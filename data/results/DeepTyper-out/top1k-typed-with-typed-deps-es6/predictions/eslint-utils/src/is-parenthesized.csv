importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
isClosingParenTokenName.Otherany0.2729boolean0.1014string0.0973complex0.0559string[]0.0288
,Punctuation
 Text.Whitespace
isOpeningParenTokenName.Otherany0.3054boolean0.2093string0.1483complex0.0759number0.0316
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
"./token-predicate"Literal.String.Double
\n\nText.Whitespace
Text
/**\n * Get the left parenthesis of the parent node syntax if it exists.\n * E.g., `if (a) {}` then the `(`.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {Token|null} The left parenthesis of the parent node syntax\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
getParentSyntaxParenName.Otherstring0.5698any0.0953boolean0.0854complex0.0415number0.0288
(Punctuation
nodeName.Otherany0.3181Node0.1462string0.0582Element0.0367ITreeNode0.0108
,Punctuation
 Text.Whitespace
sourceCodeName.Otherstring0.7178any0.2226complex0.0034boolean0.0032number0.0028
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
parentName.Otherany0.1106Node0.0455string0.0231Element0.0189complex0.0083
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.4001Node0.0844complex0.0141Element0.0135string0.0110
.Punctuation
parentName.Otherany0.2934Node0.0591string0.0185complex0.0179Element0.0160
\n\n    Text.Whitespace
switchKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.1958Node0.0416string0.0273complex0.0147Element0.0097
.Punctuation
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"CallExpression"Literal.String.Double
:Operator
\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"NewExpression"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.2241Node0.0420ViewBase0.0142string0.0084Element0.0078
.Punctuation
argumentsName.Otherany0.6352IArguments0.0975string0.0464string[]0.0380any[]0.0136
.Punctuation
lengthName.Otherany0.7398number0.2485string0.0079complex0.0014boolean0.0005
 Text.Whitespace
===Operator
 Text.Whitespace
1Literal.Number.Float
 Text.Whitespace
&&Operator
 Text.Whitespace
parentName.Otherany0.5281string0.0209Node0.0153T0.0114complex0.0105
.Punctuation
argumentsName.Otherany0.7578string0.0385IArguments0.0299string[]0.0116any[]0.0078
[Punctuation
0Literal.Number.Float
]Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.4564string0.2131Node0.0561Element0.0212number0.0143
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9564string0.0166complex0.0112number0.0008boolean0.0007
.Punctuation
getTokenAfterName.Otherstring0.5535any0.2692boolean0.0676complex0.0467number0.0202
(Punctuation
\n                    Text.Whitespace
parentName.Otherany0.3164complex0.0591Node0.0358string0.0200T0.0186
.Punctuation
calleeName.Otherany0.7795string0.1453number0.0305complex0.0105boolean0.0044
,Punctuation
\n                    Text.Whitespace
isOpeningParenTokenName.Otherstring0.5365any0.2376number0.1240boolean0.0481complex0.0190
,Punctuation
\n                Text.Whitespace
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"DoWhileStatement"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.1941Node0.0558complex0.0479string0.0244Element0.0186
.Punctuation
testName.Otherany0.4546string0.1834number0.1303boolean0.1257complex0.0722
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.7123string0.0896Node0.0482number0.0174Element0.0126
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9795string0.0088complex0.0062number0.0006any[]0.0003
.Punctuation
getTokenAfterName.Otherstring0.5275any0.3057boolean0.0822number0.0284complex0.0230
(Punctuation
\n                    Text.Whitespace
parentName.Otherany0.3686complex0.0615Node0.0538Element0.0328string0.0257
.Punctuation
bodyName.Otherany0.7774string0.0890complex0.0524HTMLElement0.0168Element0.0052
,Punctuation
\n                    Text.Whitespace
isOpeningParenTokenName.Otherstring0.7281any0.1294number0.0665boolean0.0395complex0.0083
,Punctuation
\n                Text.Whitespace
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"IfStatement"Literal.String.Double
:Operator
\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"WhileStatement"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.1378Node0.0594complex0.0417string0.0237HTMLElement0.0140
.Punctuation
testName.Otherany0.3706string0.2075number0.1982boolean0.1316complex0.0581
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.6303string0.1601Node0.0485number0.0259Element0.0094
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9952complex0.0030string0.0013number0.0002void0.0001
.Punctuation
getFirstTokenName.Otherany0.7604number0.0958void0.0368boolean0.0262string0.0246
(Punctuation
parentName.Otherstring0.3431any0.1250number0.0634Node0.0314HTMLElement0.0245
,Punctuation
 Text.Whitespace
1Literal.Number.Float
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"ImportExpression"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.0966Node0.0497complex0.0266string0.0177View0.0130
.Punctuation
sourceName.Otherstring0.7062any0.2390number0.0327complex0.0097boolean0.0036
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.6395string0.1918Node0.0338number0.0247complex0.0080
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9944complex0.0032string0.0017number0.0002void0.0001
.Punctuation
getFirstTokenName.Otherany0.7500number0.0978void0.0357boolean0.0283string0.0267
(Punctuation
parentName.Otherstring0.4317any0.1127number0.0697Node0.0215HTMLElement0.0207
,Punctuation
 Text.Whitespace
1Literal.Number.Float
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"SwitchStatement"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.1013Node0.0487complex0.0270string0.0180View0.0107
.Punctuation
discriminantName.Otherany0.3959string0.3836number0.1910boolean0.0154complex0.0057
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.6577string0.1583Node0.0336number0.0333never0.0078
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9941complex0.0036string0.0016number0.0002void0.0001
.Punctuation
getFirstTokenName.Otherany0.7395number0.1045void0.0362boolean0.0283string0.0281
(Punctuation
parentName.Otherstring0.4675any0.1111number0.0725complex0.0205Node0.0182
,Punctuation
 Text.Whitespace
1Literal.Number.Float
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
caseKeyword
 Text.Whitespace
"WithStatement"Literal.String.Double
:Operator
\n            Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.2929Node0.0569string0.0391complex0.0371T0.0127
.Punctuation
objectName.Otherany0.7653string0.1576number0.0435complex0.0183Object0.0036
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.5478string0.2198Node0.0463number0.0291complex0.0133
)Punctuation
 Text.Whitespace
{Punctuation
\n                Text.Whitespace
returnKeyword
 Text.Whitespace
sourceCodeName.Otherany0.9929complex0.0040string0.0024number0.0002void0.0001
.Punctuation
getFirstTokenName.Otherany0.7528number0.1108void0.0411string0.0255complex0.0197
(Punctuation
parentName.Otherstring0.4598any0.1106number0.0714complex0.0247HTMLElement0.0189
,Punctuation
 Text.Whitespace
1Literal.Number.Float
)Punctuation
\n            Text.Whitespace
}Punctuation
\n            Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
\n\n        Text.Whitespace
defaultName.Other
:Operator
\n            Text.Whitespace
returnKeyword.Type
 Text.Whitespace
nullKeyword.Constant
\n    Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Check whether a given node is parenthesized or not.\n * @param {number} times The number of parantheses.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {boolean} `true` if the node is parenthesized the given times.\n */Comment.Multiline
\nText.Whitespace
/**\n * Check whether a given node is parenthesized or not.\n * @param {Node} node The AST node to check.\n * @param {SourceCode} sourceCode The source code object to get tokens.\n * @returns {boolean} `true` if the node is parenthesized.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
isParenthesizedName.Othercomplex0.3511string0.2177any0.1093boolean0.0637number0.0322
(Punctuation
\n    Text.Whitespace
timesOrNodeName.Otherstring0.6867any0.1982boolean0.0328number0.0269complex0.0029
,Punctuation
\n    Text.Whitespace
nodeOrSourceCodeName.Otherstring0.6062any0.2260boolean0.0782number0.0394complex0.0030
,Punctuation
\n    Text.Whitespace
optionalSourceCodeName.Otherstring0.5834any0.2098boolean0.1103number0.0507complex0.0026
,Punctuation
\nText.Whitespace
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
timesName.Othernumber0.9417any0.0461string0.0063boolean0.0016complex0.0006
,Punctuation
 Text.Whitespace
nodeName.Otherany0.6318string0.0479Node0.0436number0.0153boolean0.0125
,Punctuation
 Text.Whitespace
sourceCodeName.Otherany0.4998string0.4651number0.0132boolean0.0053complex0.0039
,Punctuation
 Text.Whitespace
maybeLeftParenName.Otherstring0.4434any0.2322boolean0.2235number0.0619complex0.0077
,Punctuation
 Text.Whitespace
maybeRightParenName.Otherany0.4655string0.2499boolean0.2058number0.0274complex0.0158
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
timesOrNodeName.Otherany0.6701string0.1470boolean0.0763complex0.0438number0.0243
 Text.Whitespace
===Operator
 Text.Whitespace
"number"Literal.String.Double
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
timesName.Otherany0.5943number0.3787string0.0104complex0.0069boolean0.0018
 Text.Whitespace
=Operator
 Text.Whitespace
timesOrNodeName.Otherany0.5218number0.4047string0.0423boolean0.0102complex0.0067
 Text.Whitespace
|Operator
 Text.Whitespace
0Literal.Number.Float
\n        Text.Whitespace
nodeName.Otherany0.7207string0.0801number0.0590boolean0.0142Node0.0076
 Text.Whitespace
=Operator
 Text.Whitespace
nodeOrSourceCodeName.Otherany0.6764string0.1571number0.0914boolean0.0416complex0.0082
\n        Text.Whitespace
sourceCodeName.Otherany0.7484string0.1806number0.0405boolean0.0099complex0.0094
 Text.Whitespace
=Operator
 Text.Whitespace
optionalSourceCodeName.Otherany0.4557string0.3111number0.1576boolean0.0366complex0.0111
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
(Punctuation
timesName.Othernumber0.9517any0.0420string0.0048boolean0.0006complex0.0003
 Text.Whitespace
>=Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n            Text.Whitespace
throwKeywordany0.7055complex0.1083boolean0.0484Error0.0251string0.0210
 Text.Whitespace
newOperator.Wordany0.5585boolean0.1564complex0.0795string0.0641{}0.0166
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9597ErrorConstructor0.0057undefined0.0007BooleanConstructor0.0007complex0.0004
(Punctuation
"'times' should be a positive integer."Literal.String.Double
)Punctuation
\n        Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
timesName.Othernumber0.6157any0.3516string0.0218boolean0.0027complex0.0016
 Text.Whitespace
=Operator
 Text.Whitespace
1Literal.Number.Float
\n        Text.Whitespace
nodeName.Otherany0.8259string0.0570number0.0205complex0.0082boolean0.0056
 Text.Whitespace
=Operator
 Text.Whitespace
timesOrNodeName.Otherany0.6131string0.2073number0.0739boolean0.0541complex0.0119
\n        Text.Whitespace
sourceCodeName.Otherany0.6702string0.2592number0.0249boolean0.0107complex0.0090
 Text.Whitespace
=Operator
 Text.Whitespace
nodeOrSourceCodeName.Otherany0.4361string0.3643number0.0938boolean0.0428complex0.0116
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
\n        Text.Whitespace
nodeName.Otherany0.7917Node0.0159string0.0151boolean0.0135complex0.0110
 Text.Whitespace
==Operator
 Text.Whitespace
nullKeyword.Constant
 Text.Whitespace
||Operator
\n        Text.Whitespace
// `CatchClause.param` can't be parenthesized, example `try {} catch (error) {}`Comment.Single
\n        Text.Whitespace
(Punctuation
nodeName.Otherany0.8668Node0.0084complex0.0064string0.0041Element0.0029
.Punctuation
parentName.Otherany0.5974Node0.0168complex0.0165never0.0120string0.0096
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
"CatchClause"Literal.String.Double
 Text.Whitespace
&&Operator
 Text.Whitespace
nodeName.Otherany0.8909Node0.0121complex0.0106string0.0076never0.0040
.Punctuation
parentName.Otherany0.6810Node0.0198complex0.0159string0.0142never0.0102
.Punctuation
paramName.Otherany0.8665string0.0657number0.0168complex0.0079boolean0.0020
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.5970string0.0778Node0.0238number0.0163never0.0139
)Punctuation
\n    Text.Whitespace
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
maybeLeftParenName.Otherany0.7117string0.1701boolean0.0421number0.0179complex0.0087
 Text.Whitespace
=Operator
 Text.Whitespace
maybeRightParenName.Otherany0.6912string0.1930boolean0.0298number0.0147complex0.0106
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.6792string0.0870never0.0148boolean0.0130Node0.0122
\n    Text.Whitespace
doKeyword
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
maybeLeftParenName.Otherstring0.3530any0.3188boolean0.2639number0.0142complex0.0102
 Text.Whitespace
=Operator
 Text.Whitespace
sourceCodeName.Otherany0.9551string0.0137complex0.0059boolean0.0034number0.0010
.Punctuation
getTokenBeforeName.Otherboolean0.3287string0.3029any0.2775complex0.0268number0.0190
(Punctuation
maybeLeftParenName.Otherstring0.4794any0.2974boolean0.1597number0.0255complex0.0063
)Punctuation
\n        Text.Whitespace
maybeRightParenName.Otherstring0.4342any0.3242boolean0.1950number0.0222complex0.0043
 Text.Whitespace
=Operator
 Text.Whitespace
sourceCodeName.Otherany0.9328string0.0248complex0.0082boolean0.0054number0.0020
.Punctuation
getTokenAfterName.Otherany0.3580string0.3129boolean0.2471number0.0295complex0.0175
(Punctuation
maybeRightParenName.Otherstring0.5274any0.3367boolean0.0680number0.0299complex0.0055
)Punctuation
\n    Text.Whitespace
}Punctuation
 Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
\n        Text.Whitespace
maybeLeftParenName.Otherany0.5204boolean0.2601string0.1565number0.0350complex0.0052
 Text.Whitespace
!=Operator
 Text.Whitespace
nullKeyword.Constant
 Text.Whitespace
&&Operator
\n        Text.Whitespace
maybeRightParenName.Otherany0.4106boolean0.2660string0.2622number0.0389complex0.0029
 Text.Whitespace
!=Operator
 Text.Whitespace
nullKeyword.Constant
 Text.Whitespace
&&Operator
\n        Text.Whitespace
isOpeningParenTokenName.Otherboolean0.9323any0.0379string0.0207number0.0028complex0.0025
(Punctuation
maybeLeftParenName.Otherstring0.3442any0.3081boolean0.3026number0.0259complex0.0019
)Punctuation
 Text.Whitespace
&&Operator
\n        Text.Whitespace
isClosingParenTokenName.Otherboolean0.9288any0.0419string0.0197number0.0030complex0.0026
(Punctuation
maybeRightParenName.Otherany0.3642string0.3340boolean0.2526number0.0302complex0.0016
)Punctuation
 Text.Whitespace
&&Operator
\n        Text.Whitespace
// Avoid false positive such as `if (a) {}`Comment.Single
\n        Text.Whitespace
maybeLeftParenName.Otherboolean0.4587any0.2232string0.2066number0.1028complex0.0017
 Text.Whitespace
!==Operator
 Text.Whitespace
getParentSyntaxParenName.Otherboolean0.4597string0.2501any0.1951number0.0686complex0.0128
(Punctuation
nodeName.Otherany0.8064string0.0381Node0.0165number0.0150boolean0.0085
,Punctuation
 Text.Whitespace
sourceCodeName.Otherany0.5382string0.4226number0.0062complex0.0062boolean0.0046
)Punctuation
 Text.Whitespace
&&Operator
\n        Text.Whitespace
--Operator
timesName.Othernumber0.9786any0.0179string0.0023boolean0.0004complex0.0002
 Text.Whitespace
>Operator
 Text.Whitespace
0Literal.Number.Float
\n    Text.Whitespace
)Punctuation
\n\n    Text.Whitespace
returnKeyword
 Text.Whitespace
timesName.Othernumber0.9764any0.0200string0.0015boolean0.0008complex0.0002
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
\nText.Whitespace
}Punctuation
\nText.Whitespace
