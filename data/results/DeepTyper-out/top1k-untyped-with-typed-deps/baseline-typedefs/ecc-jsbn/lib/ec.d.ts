declare const randomBytes: any;
declare const BigInteger: any;
declare const Barrett: any;
declare class SecureRandom {
    nextBytes(bytes: any): void;
}
declare function ECFieldElementFp(q: any, x: any): void;
declare function feFpEquals(other: any): boolean;
declare function feFpToBigInteger(): any;
declare function feFpNegate(): any;
declare function feFpAdd(b: any): any;
declare function feFpSubtract(b: any): any;
declare function feFpMultiply(b: any): any;
declare function feFpSquare(): any;
declare function feFpDivide(b: any): any;
declare function ECPointFp(curve: any, x: any, y: any, z: any): void;
declare function pointFpGetX(): any;
declare function pointFpGetY(): any;
declare function pointFpEquals(other: any): boolean;
declare function pointFpIsInfinity(): any;
declare function pointFpNegate(): any;
declare function pointFpAdd(b: any): any;
declare function pointFpTwice(): any;
declare function pointFpMultiply(k: any): any;
declare function pointFpMultiplyTwo(j: number, x: any, k: any): any;
declare function ECCurveFp(q: any, a: any, b: any): void;
declare function curveFpGetQ(): any;
declare function curveFpGetA(): any;
declare function curveFpGetB(): boolean;
declare function curveFpEquals(other: any): boolean;
declare function curveFpGetInfinity(): any;
declare function curveFpFromBigInteger(x: any): any;
declare function curveReduce(x: any): void;
declare function curveFpEncodePointHex(p: any): any;
