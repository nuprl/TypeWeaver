Text
/**\n * An "async function" in the context of Async is an asynchronous function with\n * a variable number of parameters, with the final parameter being a callback.\n * (`function (arg1, arg2, ..., callback) {}`)\n * The final callback is of the form `callback(err, results...)`, which must be\n * called once the function is completed.  The callback should be called with a\n * Error as its first argument to signal that an error occurred.\n * Otherwise, if no error occurred, it should be called with `null` as the first\n * argument, and any additional `result` arguments that may apply, to signal\n * successful completion.\n * The callback must be called exactly once, ideally on a later tick of the\n * JavaScript event loop.\n *\n * This type of function is also referred to as a "Node-style async function",\n * or a "continuation passing-style function" (CPS). Most of the methods of this\n * library are themselves CPS/Node-style async functions, or functions that\n * return CPS/Node-style async functions.\n *\n * Wherever we accept a Node-style async function, we also directly accept an\n * [ES2017 `async` function]{@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/async_function}.\n * In this case, the `async` function will not be passed a final callback\n * argument, and any thrown error will be used as the `err` argument of the\n * implicit callback, and the return value will be used as the `result` value.\n * (i.e. a `rejected` of the returned Promise becomes the `err` callback\n * argument, and a `resolved` value becomes the `result`.)\n *\n * Note, due to JavaScript limitations, we can only detect native `async`\n * functions and not transpilied implementations.\n * Your environment must have `async`/`await` support for this to work.\n * (e.g. Node > v7.6, or a recent version of a modern browser).\n * If you are using `async` functions through a transpiler (e.g. Babel), you\n * must still wrap the function with [asyncify]{@link module:Utils.asyncify},\n * because the `async function` will be compiled to an ordinary function that\n * returns a promise.\n *\n * @typedef {Function} AsyncFunction\n * @static\n */Comment.Multiline
\n\nText.Whitespace
/**\n * Async is a utility module which provides straight-forward, powerful functions\n * for working with asynchronous JavaScript. Although originally designed for\n * use with [Node.js](http://nodejs.org) and installable via\n * `npm install --save async`, it can also be used directly in the browser.\n * @module async\n * @see AsyncFunction\n */Comment.Multiline
\n\n\nText.Whitespace
/**\n * A collection of `async` functions for manipulating collections, such as\n * arrays and objects.\n * @module Collections\n */Comment.Multiline
\n\nText.Whitespace
/**\n * A collection of `async` functions for controlling the flow through a script.\n * @module ControlFlow\n */Comment.Multiline
\n\nText.Whitespace
/**\n * A collection of `async` utility functions.\n * @module Utils\n */Comment.Multiline
\n\nText.Whitespace
/*__imports__*/Comment.Multiline
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
{Punctuation
\nText.Whitespace
/*__default_object__*/Comment.Multiline
\n\n    Text.Whitespace
// aliasesComment.Single
\nText.Whitespace
/*__default_aliases__*/Comment.Multiline
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
{Punctuation
\nText.Whitespace
/*__exports__*/Comment.Multiline
\n\n    Text.Whitespace
// AliasesComment.Single
\nText.Whitespace
/*__alias_exports__*/Comment.Multiline
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
