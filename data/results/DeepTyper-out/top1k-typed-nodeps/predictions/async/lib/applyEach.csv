importKeyword
 Text.Whitespace
applyEachName.Otherany0.2940complex0.0496void0.0271string0.0255Promise<void>0.0164
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/applyEach.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
mapName.Otherany0.2924complex0.1309U[]0.0476void0.0343string0.0116
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./map.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * Applies the provided arguments to each function in the array, calling\n * `callback` after all functions have completed. If you only provide the first\n * argument, `fns`, then it will return a function which lets you pass in the\n * arguments as if it were a single function call. If more arguments are\n * provided, `callback` is required while `args` is still optional. The results\n * for each of the applied async functions are passed to the final callback\n * as an array.\n *\n * @name applyEach\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s\n * to all call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - Returns a function that takes no args other than\n * an optional callback, that is the result of applying the `args` to each\n * of the functions.\n * @example\n *\n * const appliedFn = async.applyEach([enableSearch, updateSchema], 'bucket')\n *\n * appliedFn((err, results) => {\n *     // results[0] is the results for `enableSearch`\n *     // results[1] is the results for `updateSchema`\n * });\n *\n * // partial application example:\n * async.each(\n *     buckets,\n *     async (bucket) => async.applyEach([enableSearch, updateSchema], bucket)(),\n *     callback\n * );\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
applyEachName.Otherany0.2753complex0.0645void0.0562string0.0536boolean0.0123
(Punctuation
mapName.Otherany0.5284complex0.0714U[]0.0239string0.0105Error0.0074
)Punctuation
;Punctuation
\nText.Whitespace
