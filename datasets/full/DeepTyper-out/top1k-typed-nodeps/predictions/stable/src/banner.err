Selected GPU[0] Quadro RTX 6000 as the process wide default device.
-------------------------------------------------------------------
Build info: 

		Built time: Apr 23 2019 21:29:24
		Last modified date: Tue Apr 23 21:05:52 2019
		Build type: release
		Build target: GPU
		With ASGD: yes
		Math lib: mkl
		CUDA version: 10.0.0
		CUDNN version: 7.3.1
		Build Branch: HEAD
		Build SHA1: ae9c9c7c5f9e6072cc9c94c254f816dbdc1c5be6
		MPI distribution: Open MPI
		MPI version: 1.10.7
-------------------------------------------------------------------

About to throw exception 'Invalid sparse CSC format data specified for construction of NDArrayView with shape '[0 x 40195]'; either one of the specified buffers is null or the count (0) of non-zero values is invalid.'
/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/cntk_py_init.py:56: UserWarning: Unsupported Linux distribution (ubuntu-20.04). CNTK supports Ubuntu 16.04 and above, only.
  warnings.warn('Unsupported Linux distribution (%s-%s). CNTK supports Ubuntu 16.04 and above, only.' % (__my_distro__, __my_distro_ver__))
Traceback (most recent call last):
  File "readout.py", line 227, in <module>
    run_seq(content)
  File "readout.py", line 187, in run_seq
    mb = sIn.next_minibatch(N)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/io/__init__.py", line 734, in next_minibatch
    value = Value.create(self._vars[si.name], mb_data)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/internal/swig_helper.py", line 69, in wrapper
    result = f(*args, **kwds)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/core.py", line 457, in create
    for sample in data]
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/core.py", line 457, in <listcomp>
    for sample in data]
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/internal/swig_helper.py", line 69, in wrapper
    result = f(*args, **kwds)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/core.py", line 171, in from_data
    ndav = NDArrayView.from_csr(data, device, borrow=borrow)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/internal/swig_helper.py", line 69, in wrapper
    result = f(*args, **kwds)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/core.py", line 141, in from_csr
    read_only, borrow)
  File "/mnt/data/mhyee/.asdf/installs/python/3.6.15/lib/python3.6/site-packages/cntk/cntk_py.py", line 1140, in __init__
    this = _cntk_py.new_NDArrayView(*args)
ValueError: Invalid sparse CSC format data specified for construction of NDArrayView with shape '[0 x 40195]'; either one of the specified buffers is null or the count (0) of non-zero values is invalid.

[CALL STACK]
[0x7ff59c489a29]                                                       + 0x7c5a29
[0x7ff59c60fd45]    CNTK::NDArrayView::  NDArrayView  (CNTK::DataType,  CNTK::NDShape const&,  int const*,  int const*,  void const*,  unsigned long,  CNTK::DeviceDescriptor const&,  bool) + 0xf5
[0x7ff6648e13a8]                                                       + 0x13b3a8
[0x7ff6648e3065]                                                       + 0x13d065
[0x7ff669390bd9]    PyCFunction_Call                                   + 0xc9
[0x7ff66941d6e2]    _PyEval_EvalFrameDefault                           + 0x6f42
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff66941eaa9]    _PyFunction_FastCallDict                           + 0x1f9
[0x7ff66933a151]    _PyObject_FastCallDict                             + 0x131
[0x7ff66933a2a5]    _PyObject_Call_Prepend                             + 0xf5
[0x7ff669339f2b]    PyObject_Call                                      + 0x4b
[0x7ff6693abd7f]                                                       + 0xe8d7f
[0x7ff6693a7149]                                                       + 0xe4149
[0x7ff66933a0ad]    _PyObject_FastCallDict                             + 0x8d
[0x7ff669415d78]                                                       + 0x152d78
[0x7ff66941b50d]    _PyEval_EvalFrameDefault                           + 0x4d6d
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff6694161b2]    PyEval_EvalCodeEx                                  + 0x42
[0x7ff669368f1e]                                                       + 0xa5f1e
[0x7ff669339f2b]    PyObject_Call                                      + 0x4b
[0x7ff66941b770]    _PyEval_EvalFrameDefault                           + 0x4fd0
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b867]    _PyEval_EvalFrameDefault                           + 0x50c7
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff6694161b2]    PyEval_EvalCodeEx                                  + 0x42
[0x7ff669368f1e]                                                       + 0xa5f1e
[0x7ff669339f2b]    PyObject_Call                                      + 0x4b
[0x7ff66941b770]    _PyEval_EvalFrameDefault                           + 0x4fd0
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b867]    _PyEval_EvalFrameDefault                           + 0x50c7
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b50d]    _PyEval_EvalFrameDefault                           + 0x4d6d
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff6694161b2]    PyEval_EvalCodeEx                                  + 0x42
[0x7ff669368f1e]                                                       + 0xa5f1e
[0x7ff669339f2b]    PyObject_Call                                      + 0x4b
[0x7ff66941b770]    _PyEval_EvalFrameDefault                           + 0x4fd0
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b50d]    _PyEval_EvalFrameDefault                           + 0x4d6d
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b50d]    _PyEval_EvalFrameDefault                           + 0x4d6d
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff669415f94]                                                       + 0x152f94
[0x7ff66941b50d]    _PyEval_EvalFrameDefault                           + 0x4d6d
[0x7ff669415b9a]                                                       + 0x152b9a
[0x7ff6694161b2]    PyEval_EvalCodeEx                                  + 0x42
[0x7ff6694161df]    PyEval_EvalCode                                    + 0x1f
[0x7ff66944b3d5]    PyRun_FileExFlags                                  + 0xb5
[0x7ff66944b56f]    PyRun_SimpleFileExFlags                            + 0xff
[0x7ff6694658e8]    Py_Main                                            + 0xff8
[0x56347f2db2b8]    main                                               + 0x178
[0x7ff6690d4083]    __libc_start_main                                  + 0xf3
[0x56347f2db36e]    _start                                             + 0x2e


