export function isAlias(name: any): boolean;
export function isValidName(name: any): boolean;
export function isValidValue(name: any, value: any): boolean;
export function isGeneralCategoryValue(value: any): boolean;
export function isScriptCategoryValue(value: any): boolean;
export function isBinaryPropertyName(name: any): boolean;
export function getCanonicalName(name: any): any;
export function getCanonicalValue(value: any): any;
export namespace NON_BINARY_PROP_NAMES_TO_ALIASES {
    const General_Category: string;
    const Script: string;
    const Script_Extensions: string;
}
export const NON_BINARY_ALIASES_TO_PROP_NAMES: {};
export namespace BINARY_PROP_NAMES_TO_ALIASES {
    const ASCII: string;
    const ASCII_Hex_Digit: string;
    const Alphabetic: string;
    const Any: string;
    const Assigned: string;
    const Bidi_Control: string;
    const Bidi_Mirrored: string;
    const Case_Ignorable: string;
    const Cased: string;
    const Changes_When_Casefolded: string;
    const Changes_When_Casemapped: string;
    const Changes_When_Lowercased: string;
    const Changes_When_NFKC_Casefolded: string;
    const Changes_When_Titlecased: string;
    const Changes_When_Uppercased: string;
    const Dash: string;
    const Default_Ignorable_Code_Point: string;
    const Deprecated: string;
    const Diacritic: string;
    const Emoji: string;
    const Emoji_Component: string;
    const Emoji_Modifier: string;
    const Emoji_Modifier_Base: string;
    const Emoji_Presentation: string;
    const Extended_Pictographic: string;
    const Extender: string;
    const Grapheme_Base: string;
    const Grapheme_Extend: string;
    const Hex_Digit: string;
    const IDS_Binary_Operator: string;
    const IDS_Trinary_Operator: string;
    const ID_Continue: string;
    const ID_Start: string;
    const Ideographic: string;
    const Join_Control: string;
    const Logical_Order_Exception: string;
    const Lowercase: string;
    const Math: string;
    const Noncharacter_Code_Point: string;
    const Pattern_Syntax: string;
    const Pattern_White_Space: string;
    const Quotation_Mark: string;
    const Radical: string;
    const Regional_Indicator: string;
    const Sentence_Terminal: string;
    const Soft_Dotted: string;
    const Terminal_Punctuation: string;
    const Unified_Ideograph: string;
    const Uppercase: string;
    const Variation_Selector: string;
    const White_Space: string;
    const XID_Continue: string;
    const XID_Start: string;
}
export const BINARY_ALIASES_TO_PROP_NAMES: {};
export namespace GENERAL_CATEGORY_VALUE_TO_ALIASES {
    const Cased_Letter: string;
    const Close_Punctuation: string;
    const Connector_Punctuation: string;
    const Control: string[];
    const Currency_Symbol: string;
    const Dash_Punctuation: string;
    const Decimal_Number: string[];
    const Enclosing_Mark: string;
    const Final_Punctuation: string;
    const Format: string;
    const Initial_Punctuation: string;
    const Letter: string;
    const Letter_Number: string;
    const Line_Separator: string;
    const Lowercase_Letter: string;
    const Mark: string[];
    const Math_Symbol: string;
    const Modifier_Letter: string;
    const Modifier_Symbol: string;
    const Nonspacing_Mark: string;
    const Number: string;
    const Open_Punctuation: string;
    const Other: string;
    const Other_Letter: string;
    const Other_Number: string;
    const Other_Punctuation: string;
    const Other_Symbol: string;
    const Paragraph_Separator: string;
    const Private_Use: string;
    const Punctuation: string[];
    const Separator: string;
    const Space_Separator: string;
    const Spacing_Mark: string;
    const Surrogate: string;
    const Symbol: string;
    const Titlecase_Letter: string;
    const Unassigned: string;
    const Uppercase_Letter: string;
}
export const GENERAL_CATEGORY_VALUE_ALIASES_TO_VALUES: {};
export namespace SCRIPT_VALUE_TO_ALIASES {
    const Adlam: string;
    const Ahom: string;
    const Anatolian_Hieroglyphs: string;
    const Arabic: string;
    const Armenian: string;
    const Avestan: string;
    const Balinese: string;
    const Bamum: string;
    const Bassa_Vah: string;
    const Batak: string;
    const Bengali: string;
    const Bhaiksuki: string;
    const Bopomofo: string;
    const Brahmi: string;
    const Braille: string;
    const Buginese: string;
    const Buhid: string;
    const Canadian_Aboriginal: string;
    const Carian: string;
    const Caucasian_Albanian: string;
    const Chakma: string;
    const Cham: string;
    const Cherokee: string;
    const Common: string;
    const Coptic: string[];
    const Cuneiform: string;
    const Cypriot: string;
    const Cyrillic: string;
    const Deseret: string;
    const Devanagari: string;
    const Dogra: string;
    const Duployan: string;
    const Egyptian_Hieroglyphs: string;
    const Elbasan: string;
    const Ethiopic: string;
    const Georgian: string;
    const Glagolitic: string;
    const Gothic: string;
    const Grantha: string;
    const Greek: string;
    const Gujarati: string;
    const Gunjala_Gondi: string;
    const Gurmukhi: string;
    const Han: string;
    const Hangul: string;
    const Hanifi_Rohingya: string;
    const Hanunoo: string;
    const Hatran: string;
    const Hebrew: string;
    const Hiragana: string;
    const Imperial_Aramaic: string;
    const Inherited: string[];
    const Inscriptional_Pahlavi: string;
    const Inscriptional_Parthian: string;
    const Javanese: string;
    const Kaithi: string;
    const Kannada: string;
    const Katakana: string;
    const Kayah_Li: string;
    const Kharoshthi: string;
    const Khmer: string;
    const Khojki: string;
    const Khudawadi: string;
    const Lao: string;
    const Latin: string;
    const Lepcha: string;
    const Limbu: string;
    const Linear_A: string;
    const Linear_B: string;
    const Lisu: string;
    const Lycian: string;
    const Lydian: string;
    const Mahajani: string;
    const Makasar: string;
    const Malayalam: string;
    const Mandaic: string;
    const Manichaean: string;
    const Marchen: string;
    const Medefaidrin: string;
    const Masaram_Gondi: string;
    const Meetei_Mayek: string;
    const Mende_Kikakui: string;
    const Meroitic_Cursive: string;
    const Meroitic_Hieroglyphs: string;
    const Miao: string;
    const Modi: string;
    const Mongolian: string;
    const Mro: string;
    const Multani: string;
    const Myanmar: string;
    const Nabataean: string;
    const New_Tai_Lue: string;
    const Newa: string;
    const Nko: string;
    const Nushu: string;
    const Ogham: string;
    const Ol_Chiki: string;
    const Old_Hungarian: string;
    const Old_Italic: string;
    const Old_North_Arabian: string;
    const Old_Permic: string;
    const Old_Persian: string;
    const Old_Sogdian: string;
    const Old_South_Arabian: string;
    const Old_Turkic: string;
    const Oriya: string;
    const Osage: string;
    const Osmanya: string;
    const Pahawh_Hmong: string;
    const Palmyrene: string;
    const Pau_Cin_Hau: string;
    const Phags_Pa: string;
    const Phoenician: string;
    const Psalter_Pahlavi: string;
    const Rejang: string;
    const Runic: string;
    const Samaritan: string;
    const Saurashtra: string;
    const Sharada: string;
    const Shavian: string;
    const Siddham: string;
    const SignWriting: string;
    const Sinhala: string;
    const Sogdian: string;
    const Sora_Sompeng: string;
    const Soyombo: string;
    const Sundanese: string;
    const Syloti_Nagri: string;
    const Syriac: string;
    const Tagalog: string;
    const Tagbanwa: string;
    const Tai_Le: string;
    const Tai_Tham: string;
    const Tai_Viet: string;
    const Takri: string;
    const Tamil: string;
    const Tangut: string;
    const Telugu: string;
    const Thaana: string;
    const Thai: string;
    const Tibetan: string;
    const Tifinagh: string;
    const Tirhuta: string;
    const Ugaritic: string;
    const Vai: string;
    const Warang_Citi: string;
    const Yi: string;
    const Zanabazar_Square: string;
}
export const SCRIPT_VALUE_ALIASES_TO_VALUE: {};
