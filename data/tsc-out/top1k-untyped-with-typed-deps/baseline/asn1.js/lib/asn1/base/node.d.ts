export = Node;
declare function Node(enc: any, parent: any, name: any): void;
declare class Node {
    constructor(enc: any, parent: any, name: any);
    _baseState: {
        name: any;
        enc: any;
        parent: any;
        children: any[];
        tag: any;
        args: any;
        reverseArgs: any;
        choice: any;
        optional: boolean;
        any: boolean;
        obj: boolean;
        use: any;
        useDecoder: any;
        key: any;
        default: any;
        explicit: any;
        implicit: any;
        contains: any;
    };
    clone(): any;
    _wrap(): void;
    _init(body: any): void;
    _useArgs(args: any): void;
    use(item: any): Node;
    optional(): Node;
    def(val: any): Node;
    explicit(num: any): Node;
    implicit(num: any): Node;
    obj(...args: any[]): Node;
    key(newKey: any): Node;
    any(): Node;
    choice(obj: any): Node;
    contains(item: any): Node;
    _decode(input: any, options: any): any;
    _decodeGeneric(tag: any, input: any, options: any): any;
    _getUse(entity: any, obj: any): any;
    _decodeChoice(input: any, options: any): any;
    _createEncoderBuffer(data: any): EncoderBuffer;
    _encode(data: any, reporter: any, parent: any): any;
    _encodeValue(data: any, reporter: any, parent: any): any;
    reporter: any;
    _encodeChoice(data: any, reporter: any): any;
    _encodePrimitive(tag: any, data: any): any;
    _isNumstr(str: any): boolean;
    _isPrintstr(str: any): boolean;
}
import EncoderBuffer_1 = require("../base/buffer");
import EncoderBuffer = EncoderBuffer_1.EncoderBuffer;
