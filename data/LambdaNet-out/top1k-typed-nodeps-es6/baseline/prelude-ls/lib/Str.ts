// Generated by LiveScript 1.6.0
var split: Object, join: String, lines: Function, unlines: Function, words: Function, unwords: Function, chars: Function, unchars: Function, reverse: Function, repeat: String, capitalize: Function, camelize: Function, dasherize: Function;
split = curry$(function(sep: Array, str: String){
  return str.split(sep);
});
join = curry$(function(sep: String, xs: Object){
  return xs.join(sep);
});
lines = function(str: String){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it: Object){
  return it.join('\n');
};
words = function(str: String){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it: Object){
  return it.join(' ');
};
chars = function(it: String){
  return it.split('');
};
unchars = function(it: Object){
  return it.join('');
};
reverse = function(str: String){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n: Number, str: Number){
  var result: String, i$: Number;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str: String){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it: String){
  return it.replace(/[-_]+(.)?/g, function(arg$: Function, c: String){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str: String){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$: Function, lower: Number, upper: String){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$: Number, upper: String){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};

export default {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};

function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}