self.Flatted=function(t: object){"use strict";
/*! (c) 2020 Andrea Giammarchi */const{parse:e,stringify:n}=JSON,{keys:r}=Object,s: string=String,o: string="string",c: number={},l: string="object",a: Function=(t: string,e: string)=>e,f: Function=(t: string)=>t instanceof s?s(t):t,i: Function=(t: string,e: string)=>typeof e===o?new s(e):e,u: Function=(t: object,e: Map,n: object,o: Function)=>{const a: any[]=[];for(let f=r(n),{length:i}=f,u=0;u<i;u++){const r: string=f[u],i: string=n[r];if(i instanceof s){const s: string=t[i];typeof s!==l||e.has(s)?n[r]=o.call(n,r,s):(e.add(s),n[r]=c,a.push({k:r,a:[t,e,s,o]}))}else n[r]!==c&&(n[r]=o.call(n,r,i))}for(let{length:t}=a,e=0;e<t;e++){const{k:t,a:r}=a[e];n[t]=o.call(n,t,u.apply(null,r))}return n},p: Function=(t: Map,e: any[],n: string)=>{const r: string=s(e.push(n)-1);return t.set(n,r),r},y: Function=(t: string,n: number)=>{const r: object=e(t,i).map(f),s: string=r[0],o: Function=n||a,c: string=typeof s===l&&s?u(r,new Set,s,o):s;return o.call({"":c},"",c)},g: Function=(t: string,e: string,r: string)=>{const s: Function=e&&typeof e===l?(t: string,n: number)=>""===t||-1<e.indexOf(t)?n:void 0:e||a,c: Map=new Map,f: any[]=[],i: any[]=[];let u: number=+p(c,f,s.call({"":t},"",t)),y: boolean=!u;for(;u<f.length;)y=!0,i[u]=n(f[u++],g,r);return"["+i.join(",")+"]";function g(t: string,e: string): string{if(y)return y=!y,e;const n: string=s.call(this,t,e);switch(typeof n){case l:if(null===n)return n;case o:return c.get(n)||p(c,f,n)}return n}};return t.fromJSON=(t: string)=>y(n(t)),t.parse=y,t.stringify=g,t.toJSON=(t: string)=>e(g(t)),t}({});
