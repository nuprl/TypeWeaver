declare const _exports: {
    removeSync(path: any): void;
    remove: (...args: any[]) => void | Promise<any>;
    pathExists: (...args: any[]) => void | Promise<any>;
    pathExistsSync: any;
    outputFileSync(file: any, ...args: any[]): void;
    outputFile: (...args: any[]) => void | Promise<any>;
    move: (...args: any[]) => void | Promise<any>;
    moveSync: typeof import("./move/move-sync");
    mkdirs: (...args: any[]) => void | Promise<any>;
    mkdirsSync: typeof import("./mkdirs").mkdirsSync;
    mkdirp: (...args: any[]) => void | Promise<any>;
    mkdirpSync: typeof import("./mkdirs").mkdirsSync;
    ensureDir: (...args: any[]) => void | Promise<any>;
    ensureDirSync: typeof import("./mkdirs").mkdirsSync;
    readJson: typeof import("jsonfile").readFile;
    readJsonSync: typeof import("jsonfile").readFileSync;
    writeJson: typeof import("jsonfile").writeFile;
    writeJsonSync: typeof import("jsonfile").writeFileSync;
    createFile: (...args: any[]) => void | Promise<any>;
    createFileSync: typeof import("./ensure").createFileSync;
    ensureFile: (...args: any[]) => void | Promise<any>;
    ensureFileSync: typeof import("./ensure").createFileSync;
    createLink: (...args: any[]) => void | Promise<any>;
    createLinkSync: typeof import("./ensure").createLinkSync;
    ensureLink: (...args: any[]) => void | Promise<any>;
    ensureLinkSync: typeof import("./ensure").createLinkSync;
    createSymlink: (...args: any[]) => void | Promise<any>;
    createSymlinkSync: typeof import("./ensure").createSymlinkSync;
    ensureSymlink: (...args: any[]) => void | Promise<any>;
    ensureSymlinkSync: typeof import("./ensure").createSymlinkSync;
    emptyDirSync(dir: any): any;
    emptyDir: (...args: any[]) => void | Promise<any>;
    emptydirSync: typeof import("./empty").emptyDirSync;
    emptydir: (...args: any[]) => void | Promise<any>;
    copy: (...args: any[]) => void | Promise<any>;
    copySync: typeof import("./copy/copy-sync");
    exists(filename: any, callback: any): void | Promise<any>;
    read(fd: any, buffer: any, offset: any, length: any, position: any, callback: any): void | Promise<any>;
    write(fd: any, buffer: any, ...args: any[]): void | Promise<any>;
    writev(fd: any, buffers: any, ...args: any[]): void | Promise<any>;
};
export = _exports;
