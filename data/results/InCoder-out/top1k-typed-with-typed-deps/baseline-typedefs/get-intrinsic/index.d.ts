declare var undefined: any;
declare var $SyntaxError: SyntaxErrorConstructor;
declare var $Function: FunctionConstructor;
declare var $TypeError: TypeErrorConstructor;
declare var getEvalledConstructor: (expressionSyntax: ISyntax) => any;
declare var $gOPD: (o: any, p: PropertyKey) => PropertyDescriptor;
declare var throwTypeError: () => never;
declare var ThrowTypeError: () => any;
declare var hasSymbols: any;
declare var getProto: (o: any) => any;
declare var needsEval: {};
declare var TypedArray: any;
declare var INTRINSICS: {
    '%AggregateError%': any;
    '%Array%': ArrayConstructor;
    '%ArrayBuffer%': any;
    '%ArrayIteratorPrototype%': any;
    '%AsyncFromSyncIteratorPrototype%': any;
    '%AsyncFunction%': {};
    '%AsyncGenerator%': {};
    '%AsyncGeneratorFunction%': {};
    '%AsyncIteratorPrototype%': {};
    '%Atomics%': any;
    '%BigInt%': any;
    '%Boolean%': BooleanConstructor;
    '%DataView%': any;
    '%Date%': DateConstructor;
    '%decodeURI%': typeof decodeURI;
    '%decodeURIComponent%': typeof decodeURIComponent;
    '%encodeURI%': typeof encodeURI;
    '%encodeURIComponent%': typeof encodeURIComponent;
    '%Error%': ErrorConstructor;
    '%eval%': typeof eval;
    '%EvalError%': EvalErrorConstructor;
    '%Float32Array%': any;
    '%Float64Array%': any;
    '%FinalizationRegistry%': any;
    '%Function%': FunctionConstructor;
    '%GeneratorFunction%': {};
    '%Int8Array%': any;
    '%Int16Array%': any;
    '%Int32Array%': any;
    '%isFinite%': typeof isFinite;
    '%isNaN%': typeof isNaN;
    '%IteratorPrototype%': any;
    '%JSON%': any;
    '%Map%': any;
    '%MapIteratorPrototype%': any;
    '%Math%': Math;
    '%Number%': NumberConstructor;
    '%Object%': ObjectConstructor;
    '%parseFloat%': typeof parseFloat;
    '%parseInt%': typeof parseInt;
    '%Promise%': any;
    '%Proxy%': any;
    '%RangeError%': RangeErrorConstructor;
    '%ReferenceError%': ReferenceErrorConstructor;
    '%Reflect%': any;
    '%RegExp%': RegExpConstructor;
    '%Set%': any;
    '%SetIteratorPrototype%': any;
    '%SharedArrayBuffer%': any;
    '%String%': StringConstructor;
    '%StringIteratorPrototype%': any;
    '%Symbol%': any;
    '%SyntaxError%': SyntaxErrorConstructor;
    '%ThrowTypeError%': () => any;
    '%TypedArray%': any;
    '%TypeError%': TypeErrorConstructor;
    '%Uint8Array%': any;
    '%Uint8ClampedArray%': any;
    '%Uint16Array%': any;
    '%Uint32Array%': any;
    '%URIError%': URIErrorConstructor;
    '%WeakMap%': any;
    '%WeakRef%': any;
    '%WeakSet%': any;
};
declare var doEval: (name: string) => any;
declare var LEGACY_ALIASES: {
    '%ArrayBufferPrototype%': string[];
    '%ArrayPrototype%': string[];
    '%ArrayProto_entries%': string[];
    '%ArrayProto_forEach%': string[];
    '%ArrayProto_keys%': string[];
    '%ArrayProto_values%': string[];
    '%AsyncFunctionPrototype%': string[];
    '%AsyncGenerator%': string[];
    '%AsyncGeneratorPrototype%': string[];
    '%BooleanPrototype%': string[];
    '%DataViewPrototype%': string[];
    '%DatePrototype%': string[];
    '%ErrorPrototype%': string[];
    '%EvalErrorPrototype%': string[];
    '%Float32ArrayPrototype%': string[];
    '%Float64ArrayPrototype%': string[];
    '%FunctionPrototype%': string[];
    '%Generator%': string[];
    '%GeneratorPrototype%': string[];
    '%Int8ArrayPrototype%': string[];
    '%Int16ArrayPrototype%': string[];
    '%Int32ArrayPrototype%': string[];
    '%JSONParse%': string[];
    '%JSONStringify%': string[];
    '%MapPrototype%': string[];
    '%NumberPrototype%': string[];
    '%ObjectPrototype%': string[];
    '%ObjProto_toString%': string[];
    '%ObjProto_valueOf%': string[];
    '%PromisePrototype%': string[];
    '%PromiseProto_then%': string[];
    '%Promise_all%': string[];
    '%Promise_reject%': string[];
    '%Promise_resolve%': string[];
    '%RangeErrorPrototype%': string[];
    '%ReferenceErrorPrototype%': string[];
    '%RegExpPrototype%': string[];
    '%SetPrototype%': string[];
    '%SharedArrayBufferPrototype%': string[];
    '%StringPrototype%': string[];
    '%SymbolPrototype%': string[];
    '%SyntaxErrorPrototype%': string[];
    '%TypedArrayPrototype%': string[];
    '%TypeErrorPrototype%': string[];
    '%Uint8ArrayPrototype%': string[];
    '%Uint8ClampedArrayPrototype%': string[];
    '%Uint16ArrayPrototype%': string[];
    '%Uint32ArrayPrototype%': string[];
    '%URIErrorPrototype%': string[];
    '%WeakMapPrototype%': string[];
    '%WeakSetPrototype%': string[];
};
declare var bind: any;
declare var hasOwn: any;
declare var $concat: any;
declare var $spliceApply: any;
declare var $replace: any;
declare var $strSlice: any;
declare var $exec: any;
declare var rePropName: RegExp;
declare var reEscapeChar: RegExp;
declare var stringToPath: (string: string | string[]) => any[];
declare var getBaseIntrinsic: (name: any, allowMissing: any) => {
    alias: any;
    name: any;
    value: any;
};
