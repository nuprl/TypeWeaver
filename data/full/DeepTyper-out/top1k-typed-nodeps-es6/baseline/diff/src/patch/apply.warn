Found optional parameters; skipping function.
	export function applyPatch(source, uniDiff, options = {}) { if (typeof uniDiff =
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let lines: string[] = source.split(/\r\n|[\n\v\f\r\x85]/), delimiters = source.m
Found multiple declarations; skipping rest of declarations.
	let line: number = hunk.lines[j], operation = (line.length > 0 ? line[0] : ' '),
Found multiple declarations; skipping rest of declarations.
	let line: number = hunk.lines[j], operation = (line.length > 0 ? line[0] : ' '),
Found multiple declarations; skipping rest of declarations.
	let hunk: any = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 
Found multiple declarations; skipping rest of declarations.
	let hunk: any = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 
Found multiple declarations; skipping rest of declarations.
	let hunk: any = hunks[i], maxLine = lines.length - hunk.oldLines, localOffset = 
Found multiple declarations; skipping rest of declarations.
	let hunk: any = hunks[i], toPos = hunk.oldStart + hunk.offset + diffOffset - 1;
Found multiple declarations; skipping rest of declarations.
	let line: number = hunk.lines[j], operation = (line.length > 0 ? line[0] : ' '),
Found multiple declarations; skipping rest of declarations.
	let line: number = hunk.lines[j], operation = (line.length > 0 ? line[0] : ' '),
Found multiple declarations; skipping rest of declarations.
	let line: number = hunk.lines[j], operation = (line.length > 0 ? line[0] : ' '),

