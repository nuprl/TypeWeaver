examples.ts(7,17): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
examples.ts(17,29): error TS7019: Rest parameter 'args' implicitly has an 'any[]' type.
examples.ts(49,42): error TS2769: No overload matches this call.
  Overload 1 of 2, '(predicate: (value: string, index: number, array: string[]) => value is string, thisArg?: any): string[]', gave the following error.
    Argument of type 'Function' is not assignable to parameter of type '(value: string, index: number, array: string[]) => value is string'.
      Type 'Function' provides no match for the signature '(value: string, index: number, array: string[]): value is string'.
  Overload 2 of 2, '(predicate: (value: string, index: number, array: string[]) => unknown, thisArg?: any): string[]', gave the following error.
    Argument of type 'Function' is not assignable to parameter of type '(value: string, index: number, array: string[]) => unknown'.
      Type 'Function' provides no match for the signature '(value: string, index: number, array: string[]): unknown'.
index.ts(15,33): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(30,7): error TS2358: The left-hand side of an 'instanceof' expression must be of type 'any', an object type or a type parameter.
index.ts(31,40): error TS2339: Property 'test' does not exist on type 'never'.
index.ts(43,44): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(43,64): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(43,77): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(50,38): error TS2345: Argument of type 'string | String' is not assignable to parameter of type 'string'.
  Type 'String' is not assignable to type 'string'.
    'string' is a primitive, but 'String' is a wrapper object. Prefer using 'string' when possible.
index.ts(59,18): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(76,67): error TS2696: The 'Object' type is assignable to very few other types. Did you mean to use the 'any' type instead?
  The types returned by 'valueOf()' are incompatible between these types.
    Type 'Object' is not assignable to type 'boolean'.
index.ts(81,37): error TS2339: Property 'returnIndex' does not exist on type 'Object'.
index.ts(84,18): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(85,23): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(87,17): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(88,38): error TS2345: Argument of type 'String' is not assignable to parameter of type 'Glob'.
  Type 'String' is missing the following properties from type 'string[]': pop, push, join, reverse, and 21 more.
index.ts(89,19): error TS2314: Generic type 'Array<T>' requires 1 type argument(s).
index.ts(94,33): error TS2322: Type 'boolean' is not assignable to type 'Number'.
index.ts(103,10): error TS2339: Property 'default' does not exist on type 'Function'.

