declare const SymbolTreeNode: any;
declare const TreePosition: any;
declare const TreeIterator: any;
declare function returnTrue(): boolean;
declare function reverseArrayIndex(array: any[], reverseIndex: number): any;
declare class SymbolTree {
    constructor(description: any);
    initialize(object: any): any;
    _node(object: any): any;
    hasChildren(object: any): any;
    firstChild(object: any): any;
    lastChild(object: any): any;
    previousSibling(object: any): any;
    nextSibling(object: any): any;
    parent(object: any): any;
    lastInclusiveDescendant(object: any): any;
    preceding(object: any, options: any): any;
    following(object: any, options: any): any;
    childrenToArray(parent: any, options: any): any;
    ancestorsToArray(object: any, options: any): any;
    treeToArray(root: any, options: any): any;
    childrenIterator(parent: any, options: any): any;
    previousSiblingsIterator(object: any): any;
    nextSiblingsIterator(object: any): any;
    ancestorsIterator(object: any): any;
    treeIterator(root: any, options: any): any;
    index(child: any): any;
    childrenCount(parent: any): any;
    compareTreePosition(left: any, right: any): any;
    remove(removeObject: any): any;
    insertBefore(referenceObject: any, newObject: any): any;
    insertAfter(referenceObject: any, newObject: any): any;
    prependChild(referenceObject: any, newObject: any): any;
    appendChild(referenceObject: any, newObject: any): any;
}
