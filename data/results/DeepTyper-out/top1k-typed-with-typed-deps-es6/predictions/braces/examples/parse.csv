'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
// const input = 'foo/{a,bar/{b,c},d}';Comment.Single
\nText.Whitespace
// const input = 'a/{b,c{x,y}}/d';Comment.Single
\nText.Whitespace
// const input = '{{x,y},/{b,c{x,y}d,e}/f}';Comment.Single
\nText.Whitespace
// const input = '{{a,b}/{b,c{x,y}d,e}/f,x,z}';Comment.Single
\nText.Whitespace
// const input = 'a/{b,c}/d';Comment.Single
\nText.Whitespace
// const ast = parse(input);Comment.Single
\nText.Whitespace
// console.log(ast)Comment.Single
\nText.Whitespace
// console.log(JSON.stringify(ast.queue));Comment.Single
\nText.Whitespace
// console.log('EXPECTED:', [ 'a/b/f', 'a/cxd/f', 'a/cyd/f', 'a/e/f' ]);Comment.Single
\nText.Whitespace
// console.log(JSON.stringify(ast, null, 2))Comment.Single
\nText.Whitespace
// console.log(expand(ast));Comment.Single
\nText.Whitespace
// expand(ast);Comment.Single
\n\nText.Whitespace
// const sets = parse('foo/{a/b,{c,d,{x..z},e},f}/bar');Comment.Single
\nText.Whitespace
// const sets = parse('{a,{c,d}');Comment.Single
\nText.Whitespace
// console.log(sets.nodes[2]);Comment.Single
\nText.Whitespace
// console.log(compile(sets));Comment.Single
\n\nText.Whitespace
// const range = parse(']{a..e,z}');Comment.Single
\nText.Whitespace
// console.log(range.nodes[2]);Comment.Single
\nText.Whitespace
// console.log(braces.expand(']{a..e,z}'))Comment.Single
\nText.Whitespace
// console.log(compile(range));Comment.Single
\nText.Whitespace
// console.log(parse('[abc]'))Comment.Single
\nText.Whitespace
