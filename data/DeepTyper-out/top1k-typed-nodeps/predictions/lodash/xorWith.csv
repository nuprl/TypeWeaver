importKeyword
 Text.Whitespace
baseXorName.Otherany0.1264complex0.0566boolean0.0213void0.0200Promise<void>0.0190
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./.internal/baseXor.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
isArrayLikeObjectName.Otherany0.1620complex0.0429boolean0.0311RegExp0.0238string0.0237
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./isArrayLikeObject.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
lastName.Otherany0.6382complex0.0567string0.0323void0.0204Promise<any>0.0164
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./last.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * This method is like `xor` except that it accepts `comparator` which is\n * invoked to compare elements of `arrays`. The order of result values is\n * determined by the order they occur in the arrays. The comparator is invoked\n * with two arguments: (arrVal, othVal).\n *\n * @since 4.0.0\n * @category Array\n * @param {...Array} [arrays] The arrays to inspect.\n * @param {Function} [comparator] The comparator invoked per element.\n * @returns {Array} Returns the new array of filtered values.\n * @see difference, union, unionBy, unionWith, without, xor, xorBy\n * @example\n *\n * const objects = [{ 'x': 1, 'y': 2 }, { 'x': 2, 'y': 1 }]\n * const others = [{ 'x': 1, 'y': 1 }, { 'x': 1, 'y': 2 }]\n *\n * xorWith(objects, others, isEqual)\n * // => [{ 'x': 2, 'y': 1 }, { 'x': 1, 'y': 1 }]\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
xorWithName.Otherany0.2754complex0.1087string0.0511boolean0.0286any[]0.0217
(Punctuation
...Punctuation
arraysName.Otherany[]0.4855any0.2662complex0.0169string[]0.0108number[]0.0054
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
comparatorName.Otherany0.7758complex0.0429boolean0.0354string0.0146number0.0123
 Text.Whitespace
=Operator
 Text.Whitespace
lastName.Otherany0.9079complex0.0180any[]0.0099string0.0072number0.0034
(Punctuation
arraysName.Otherany0.7457any[]0.1120complex0.0132string0.0084number0.0038
)Punctuation
\n  Text.Whitespace
comparatorName.Otherany0.9108boolean0.0339string0.0105complex0.0070number0.0062
 Text.Whitespace
=Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
comparatorName.Otherany0.8634complex0.0326boolean0.0264string0.0157number0.0111
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
 Text.Whitespace
?Operator
 Text.Whitespace
comparatorName.Otherany0.6608string0.0758number0.0710undefined0.0552boolean0.0447
 Text.Whitespace
:Operator
 Text.Whitespace
undefinedKeyword.Type
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
baseXorName.Otherany0.5559complex0.1241any[]0.0595string0.0385boolean0.0231
(Punctuation
arraysName.Otherany0.8150any[]0.0735string0.0075string[]0.0060number0.0041
.Punctuation
filterName.Otherany0.8435complex0.1404any[]0.0029string0.0020boolean0.0014
(Punctuation
isArrayLikeObjectName.Otherany0.7260string0.0807boolean0.0615complex0.0329any[]0.0187
)Punctuation
,Punctuation
 Text.Whitespace
undefinedKeyword.Constant
,Punctuation
 Text.Whitespace
comparatorName.Otherany0.6320boolean0.2170number0.0362complex0.0243string0.0214
)Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
xorWithName.Otherany0.5550string0.0228boolean0.0188void0.0132number0.0114
\nText.Whitespace
