'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
importKeyword
 Text.Whitespace
typeOfName.Otherany0.2745void0.2394boolean0.1216complex0.0809string0.0439
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'kind-of'Literal.String.Single
;Punctuation
\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
utilsName.Otherany0.7858complex0.1847string0.0099void0.0077number0.0011
 Text.Whitespace
=Operator
 Text.Whitespace
moduleKeyword.Reserved
.exportsName.Other
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the given value is a node.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var node = new Node({type: 'foo'});\n * console.log(utils.isNode(node)); //=> true\n * console.log(utils.isNode({})); //=> false\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @returns {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8920complex0.1023void0.0007string0.0004any[]0.0001
.Punctuation
isNodeName.Otherboolean0.9503any0.0421string0.0027complex0.0023void0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7615Node0.0545string0.0130complex0.0065boolean0.0063
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
typeOfName.Otherboolean0.7095any0.2015string0.0470complex0.0143number0.0063
(Punctuation
nodeName.Otherany0.8500Node0.0259string0.0114never0.0058Element0.0036
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
'object'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
nodeName.Otherany0.9191complex0.0200Node0.0087boolean0.0037Error0.0014
.Punctuation
isNodeName.Otherboolean0.6413any0.3500complex0.0035string0.0018void0.0013
 Text.Whitespace
===Operator
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Emit an empty string for the given `node`.\n *\n * ```js\n * // do nothing for beginning-of-string\n * snapdragon.compiler.set('bos', utils.noop);\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @returns {undefined}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9249complex0.0709void0.0013string0.0004any[]0.0002
.Punctuation
noopName.Othervoid0.8960any0.0907boolean0.0045complex0.0033Function0.0020
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7638Node0.0247never0.0076Element0.0069complex0.0069
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
appendName.Othervoid0.8264any0.1130complex0.0436boolean0.0027this0.0026
(Punctuation
thisKeyword
,Punctuation
 Text.Whitespace
''Literal.String.Single
,Punctuation
 Text.Whitespace
nodeName.Otherany0.9006never0.0080string0.0078Node0.0075complex0.0055
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns `node.value` or `node.val`.\n *\n * ```js\n * const star = new Node({type: 'star', value: '*'});\n * const slash = new Node({type: 'slash', val: '/'});\n * console.log(utils.value(star)) //=> '*'\n * console.log(utils.value(slash)) //=> '/'\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @returns {String} returns\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9238complex0.0693void0.0020string0.0003number0.0002
.Punctuation
valueName.Otherany0.9192string0.0518boolean0.0099number0.0080complex0.0036
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8921Node0.0155never0.0056complex0.0049string0.0045
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.9524complex0.0152Node0.0032never0.0015string0.0008
.Punctuation
valueName.Otherany0.9622string0.0257complex0.0046number0.0021boolean0.0015
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9665complex0.0077Node0.0016string0.0009Error0.0007
.Punctuation
valueName.Otherany0.9156string0.0579number0.0108boolean0.0054complex0.0039
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9636complex0.0072Node0.0017never0.0014string0.0012
.Punctuation
valName.Otherany0.9476string0.0174boolean0.0111complex0.0056number0.0055
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Append `node.value` to `compiler.output`.\n *\n * ```js\n * snapdragon.compiler.set('text', utils.identity);\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @returns {undefined}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8291complex0.1621void0.0022any[]0.0003number0.0003
.Punctuation
identityName.Othervoid0.4629any0.4087T0.0288Promise<any>0.0155complex0.0145
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7515Node0.0232never0.0176string0.0106complex0.0056
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
appendName.Othervoid0.8364any0.1140complex0.0324boolean0.0021this0.0020
(Punctuation
thisKeyword
,Punctuation
 Text.Whitespace
utilsName.Otherany0.9547complex0.0426void0.0003string0.0003number0.0001
.Punctuation
valueName.Otherany0.8240string0.1349complex0.0127number0.0072boolean0.0039
(Punctuation
nodeName.Otherany0.9330never0.0065string0.0064Node0.0059complex0.0030
)Punctuation
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8721never0.0131Node0.0097complex0.0081string0.0066
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Previously named `.emit`, this method appends the given `value`\n * to `compiler.output` for the given node. Useful when you know\n * what value should be appended advance, regardless of the actual\n * value of `node.value`.\n *\n * ```js\n * snapdragon.compiler\n *   .set('i', function(node) {\n *     this.mapVisit(node);\n *   })\n *   .set('i.open', utils.append('<i>'))\n *   .set('i.close', utils.append('</i>'))\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @returns {Function} Returns a compiler middleware function.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9638complex0.0305void0.0025string0.0003number0.0001
.Punctuation
appendName.Otherany0.7416void0.2271complex0.0116boolean0.0027number0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
valueName.Otherany0.8066string0.1787number0.0054boolean0.0024complex0.0012
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8019Node0.0208string0.0091never0.0069Element0.0050
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
appendName.Othervoid0.7495any0.1604complex0.0645this0.0045boolean0.0031
(Punctuation
thisKeyword
,Punctuation
 Text.Whitespace
valueName.Otherany0.8546string0.1246number0.0069complex0.0030boolean0.0015
,Punctuation
 Text.Whitespace
nodeName.Otherany0.9227string0.0088never0.0070complex0.0068Node0.0059
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Used in compiler middleware, this onverts an AST node into\n * an empty `text` node and deletes `node.nodes` if it exists.\n * The advantage of this method is that, as opposed to completely\n * removing the node, indices will not need to be re-calculated\n * in sibling nodes, and nothing is appended to the output.\n *\n * ```js\n * utils.toNoop(node);\n * // convert `node.nodes` to the given value instead of deleting it\n * utils.toNoop(node, []);\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Array} `nodes` Optionally pass a new `nodes` value, to replace the existing `node.nodes` array.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9451complex0.0491void0.0013string0.0003any[]0.0002
.Punctuation
toNoopName.Otherany0.6143void0.3509complex0.0092boolean0.0073Function0.0035
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8791Node0.0085string0.0075Element0.0035complex0.0032
,Punctuation
 Text.Whitespace
nodesName.Otherany0.9230string0.0087any[]0.0071complex0.0032number0.0027
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodesName.Otherany0.9358string0.0068boolean0.0039any[]0.0038complex0.0035
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
nodeName.Otherany0.9568complex0.0053Node0.0017never0.0010Function0.0009
.Punctuation
nodesName.Otherany0.9450any[]0.0056string0.0053complex0.0033RegExp0.0016
 Text.Whitespace
=Operator
 Text.Whitespace
nodesName.Otherany0.9159string0.0140any[]0.0122complex0.0059RegExp0.0037
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
deleteOperator.Word
 Text.Whitespace
nodeName.Otherany0.9626complex0.0076Node0.0010string0.0006Error0.0006
.Punctuation
nodesName.Otherany0.9557complex0.0056string0.0054any[]0.0050RegExp0.0013
;Punctuation
\n    Text.Whitespace
nodeName.Otherany0.8994complex0.0144Node0.0028never0.0020string0.0019
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
=Operator
 Text.Whitespace
'text'Literal.String.Single
;Punctuation
\n    Text.Whitespace
nodeName.Otherany0.9297complex0.0199never0.0026Node0.0020string0.0015
.Punctuation
valueName.Otherany0.9297string0.0650complex0.0018boolean0.0007number0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Visit `node` with the given `fn`. The built-in `.visit` method in snapdragon\n * automatically calls registered compilers, this allows you to pass a visitor\n * function.\n *\n * ```js\n * snapdragon.compiler.set('i', function(node) {\n *   utils.visit(node, function(childNode) {\n *     // do stuff with "childNode"\n *     return childNode;\n *   });\n * });\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Function} `fn`\n * @return {Object} returns the node after recursively visiting all child nodes.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8429complex0.1473void0.0046any[]0.0004string0.0003
.Punctuation
visitName.Othervoid0.7322any0.2470Promise<void>0.0036Function0.0036boolean0.0036
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.9216Node0.0074complex0.0039Function0.0039never0.0034
,Punctuation
 Text.Whitespace
fnName.Otherany0.8828Function0.0637boolean0.0147void0.0088string0.0087
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.9333void0.0322complex0.0124Assert0.0039Function0.0036
(Punctuation
isFunctionName.Othercomplex0.4529boolean0.3073any0.2192void0.0054string0.0044
(Punctuation
fnName.Otherany0.6691Function0.1786void0.0704complex0.0445boolean0.0062
)Punctuation
,Punctuation
 Text.Whitespace
'expected a visitor function'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
expectName.Otherany0.9677complex0.0274void0.0017Function0.0003ExpectStatic0.0002
(Punctuation
nodeName.Otherany0.8356complex0.0308Node0.0118Element0.0048never0.0040
,Punctuation
 Text.Whitespace
'node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
fnName.Otherany0.7834Function0.0799void0.0705complex0.0427boolean0.0051
(Punctuation
nodeName.Otherany0.8675Node0.0116complex0.0084never0.0055string0.0040
)Punctuation
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9212complex0.0212Node0.0035Element0.0009boolean0.0009
.Punctuation
nodesName.Otherany0.9173complex0.0096boolean0.0061any[]0.0047RegExp0.0024
 Text.Whitespace
?Operator
 Text.Whitespace
utilsName.Otherany0.8334complex0.1533any[]0.0012number0.0008string0.0007
.Punctuation
mapVisitName.Otherany0.9023complex0.0195boolean0.0140string0.0111any[]0.0092
(Punctuation
nodeName.Otherany0.9306string0.0092complex0.0091Node0.0086number0.0030
,Punctuation
 Text.Whitespace
fnName.Otherany0.7359Function0.0740string0.0589number0.0501boolean0.0149
)Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
nodeName.Otherany0.9501complex0.0121string0.0041Node0.0037never0.0017
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Map [visit](#visit) the given `fn` over `node.nodes`. This is called by\n * [visit](#visit), use this method if you do not want `fn` to be called on\n * the first node.\n *\n * ```js\n * snapdragon.compiler.set('i', function(node) {\n *   utils.mapVisit(node, function(childNode) {\n *     // do stuff with "childNode"\n *     return childNode;\n *   });\n * });\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Object} `options`\n * @param {Function} `fn`\n * @return {Object} returns the node\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9124complex0.0821void0.0018any[]0.0003string0.0003
.Punctuation
mapVisitName.Otherany0.4851void0.4224boolean0.0475complex0.0267Function0.0062
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.9121Node0.0080Function0.0058complex0.0045string0.0037
,Punctuation
 Text.Whitespace
fnName.Otherany0.8472Function0.0952boolean0.0166string0.0138void0.0093
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.9283void0.0311complex0.0146Assert0.0048Function0.0041
(Punctuation
isFunctionName.Othercomplex0.4302boolean0.3181any0.2316void0.0056string0.0046
(Punctuation
fnName.Otherany0.7176Function0.1728void0.0470complex0.0364boolean0.0044
)Punctuation
,Punctuation
 Text.Whitespace
'expected a visitor function'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
expectName.Otherany0.9569complex0.0370void0.0023NgMatchers0.0003Function0.0003
(Punctuation
nodeName.Otherany0.8622complex0.0270Node0.0118Element0.0038boolean0.0028
,Punctuation
 Text.Whitespace
'node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.9027void0.0330Assert0.0221complex0.0093Function0.0035
(Punctuation
isArrayName.Othercomplex0.9067boolean0.0504any0.0310void0.0047any[]0.0012
(Punctuation
nodeName.Otherany0.9658complex0.0089Node0.0012any[]0.0007Function0.0006
.Punctuation
nodesName.Otherany0.9462any[]0.0088complex0.0074string0.0021string[]0.0015
)Punctuation
,Punctuation
 Text.Whitespace
'expected node.nodes to be an array'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
varKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9887any0.0106string0.0002boolean0.0001complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
 Text.Whitespace
iName.Othernumber0.9511any0.0472string0.0006boolean0.0003void0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
nodeName.Otherany0.8965complex0.0228Node0.0059Function0.0017number0.0015
.Punctuation
nodesName.Otherany0.9053any[]0.0154complex0.0106string[]0.0039string0.0023
.Punctuation
lengthName.Otherany0.7540number0.2434complex0.0008string0.0005void0.0004
;Punctuation
 Text.Whitespace
iName.Othernumber0.9179any0.0807string0.0006boolean0.0003void0.0002
++Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
utilsName.Otherany0.8491complex0.1433void0.0026any[]0.0005number0.0002
.Punctuation
visitName.Othervoid0.9472any0.0443Promise<void>0.0023complex0.0016boolean0.0014
(Punctuation
nodeName.Otherany0.9844complex0.0035Node0.0013Function0.0006any[]0.0004
.Punctuation
nodesName.Otherany0.9554any[]0.0068complex0.0067string[]0.0030string0.0018
[Punctuation
iName.Othernumber0.9636any0.0334string0.0018void0.0004boolean0.0002
]Punctuation
,Punctuation
 Text.Whitespace
fnName.Otherany0.6952void0.1184Function0.1181number0.0157string0.0138
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8842complex0.0282Node0.0083never0.0067any[]0.0065
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Unshift an `*.open` node onto `node.nodes`.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * snapdragon.parser.set('brace', function(node) {\n *   var match = this.match(/^{/);\n *   if (match) {\n *     var parent = new Node({type: 'brace'});\n *     utils.addOpen(parent, Node);\n *     console.log(parent.nodes[0]):\n *     // { type: 'brace.open', value: '' };\n *\n *     // push the parent "brace" node onto the stack\n *     this.push(parent);\n *\n *     // return the parent node, so it's also added to the AST\n *     return brace;\n *   }\n * });\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].\n * @param {Function} `filter` Optionaly specify a filter function to exclude the node.\n * @return {Object} Returns the created opening node.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8939complex0.1006void0.0022string0.0003number0.0003
.Punctuation
addOpenName.Otherany0.6481void0.2977complex0.0208boolean0.0179Function0.0041
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8666Node0.0190complex0.0142never0.0066Element0.0053
,Punctuation
 Text.Whitespace
NodeName.Otherany0.8921complex0.0556string0.0082Object0.0056Node0.0044
,Punctuation
 Text.Whitespace
valueName.Otherany0.9545string0.0379number0.0031boolean0.0010Object0.0008
,Punctuation
 Text.Whitespace
filterName.Otherany0.8252string0.0853boolean0.0328Filter0.0118complex0.0052
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
expectName.Otherany0.9782complex0.0178void0.0014string0.0003ExpectStatic0.0003
(Punctuation
nodeName.Otherany0.9275Node0.0132Element0.0082complex0.0058string0.0040
,Punctuation
 Text.Whitespace
'node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.9502void0.0142complex0.0102Assert0.0096Function0.0022
(Punctuation
isFunctionName.Otherboolean0.3850any0.3117complex0.2808string0.0090void0.0032
(Punctuation
NodeName.Otherany0.7549complex0.1889string0.0043Object0.0031Node0.0030
)Punctuation
,Punctuation
 Text.Whitespace
'expected Node to be a constructor function'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
valueName.Otherany0.9518string0.0276complex0.0148boolean0.0022number0.0012
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
filterName.Otherany0.7517string0.1181boolean0.0946complex0.0054Function0.0031
 Text.Whitespace
=Operator
 Text.Whitespace
valueName.Otherany0.7163string0.2524boolean0.0181number0.0035complex0.0029
;Punctuation
\n    Text.Whitespace
valueName.Otherstring0.5163any0.4706boolean0.0050complex0.0020RegExp0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
filterName.Otherany0.7092complex0.0878string0.0828boolean0.0710Filter0.0066
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
!Operator
filterName.Otherany0.7148complex0.1421boolean0.0737string0.0212void0.0057
(Punctuation
nodeName.Otherany0.8412Node0.0551complex0.0136string0.0116never0.0105
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
openName.Otherany0.6427string0.0823number0.0438Node0.0280boolean0.0124
 Text.Whitespace
=Operator
 Text.Whitespace
newOperator.Wordany0.4069Node0.0650string0.0376Error0.0358complex0.0200
 Text.Whitespace
NodeName.Otherany0.7663complex0.2197Node0.0029string0.0016U[]0.0010
(Punctuation
{Punctuation
 Text.Whitespace
typeKeyword.Reserved
:Operator
 Text.Whitespace
nodeName.Otherany0.7904Node0.0652complex0.0286string0.0093never0.0043
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
+Operator
 Text.Whitespace
'.open'Literal.String.Single
,Punctuation
 Text.Whitespace
valueName.Otherany0.5512string0.4042number0.0169boolean0.0095complex0.0021
:Operator
 Text.Whitespace
valueKeyword.Typeany0.5613string0.3950number0.0197boolean0.0088complex0.0032
}Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
unshiftName.Othernumber0.6626any0.3281string0.0019complex0.0017void0.0010
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.7260complex0.0597Node0.0402any[]0.0074Element0.0032
.Punctuation
unshiftName.Othernumber0.6456any0.3414complex0.0029string0.0025boolean0.0011
 Text.Whitespace
||Operator
 Text.Whitespace
nodeName.Otherany0.8535complex0.0400Node0.0169number0.0025TreeNode0.0020
.Punctuation
unshiftNodeName.Otherany0.8289boolean0.0604complex0.0363void0.0155number0.0142
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
unshiftName.Othernumber0.5648any0.3971complex0.0191string0.0083void0.0017
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
unshiftName.Othernumber0.6900any0.2947complex0.0046void0.0040string0.0022
.Punctuation
callName.Otherany0.9605void0.0192complex0.0069number0.0046string0.0014
(Punctuation
nodeName.Otherany0.5282Node0.2068Node<Node>0.0195never0.0144Element0.0132
,Punctuation
 Text.Whitespace
openName.Otherany0.3875string0.2826number0.1090boolean0.0593void0.0560
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
utilsName.Otherany0.7622complex0.2258void0.0053string0.0009any[]0.0006
.Punctuation
unshiftNodeName.Othervoid0.8998any0.0681boolean0.0113complex0.0073string0.0042
(Punctuation
nodeName.Otherany0.6165Node0.1973never0.0147Element0.0128string0.0085
,Punctuation
 Text.Whitespace
openName.Otherany0.5082string0.2211number0.0868boolean0.0604void0.0475
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
openName.Otherany0.6096boolean0.1044number0.0795string0.0652void0.0301
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Push a `*.close` node onto `node.nodes`.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * snapdragon.parser.set('brace', function(node) {\n *   var match = this.match(/^}/);\n *   if (match) {\n *     var parent = this.parent();\n *     if (parent.type !== 'brace') {\n *       throw new Error('missing opening: ' + '}');\n *     }\n *\n *     utils.addClose(parent, Node);\n *     console.log(parent.nodes[parent.nodes.length - 1]):\n *     // { type: 'brace.close', value: '' };\n *\n *     // no need to return a node, since the parent\n *     // was already added to the AST\n *     return;\n *   }\n * });\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].\n * @param {Function} `filter` Optionaly specify a filter function to exclude the node.\n * @return {Object} Returns the created closing node.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8569complex0.1357void0.0037string0.0004number0.0003
.Punctuation
addCloseName.Otherany0.5125void0.4083boolean0.0309complex0.0284Function0.0056
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7395Node0.0875complex0.0113Element0.0107never0.0081
,Punctuation
 Text.Whitespace
NodeName.Otherany0.8524complex0.0516Node0.0152string0.0147Object0.0093
,Punctuation
 Text.Whitespace
valueName.Otherany0.8797string0.1006number0.0080boolean0.0036Object0.0021
,Punctuation
 Text.Whitespace
filterName.Otherany0.6335string0.1606boolean0.1086Function0.0147Filter0.0135
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.9229void0.0268complex0.0178Assert0.0073boolean0.0040
(Punctuation
isFunctionName.Otherboolean0.4941complex0.2886any0.1941string0.0102void0.0028
(Punctuation
NodeName.Otherany0.6922complex0.2359Node0.0080string0.0063Object0.0029
)Punctuation
,Punctuation
 Text.Whitespace
'expected Node to be a constructor function'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
expectName.Otherany0.9656complex0.0298void0.0024string0.0003boolean0.0002
(Punctuation
nodeName.Otherany0.6087Node0.1611Element0.0324Node<Node>0.0182complex0.0153
,Punctuation
 Text.Whitespace
'node'Literal.String.Single
,Punctuation
 Text.Whitespace
NodeName.Otherany0.7154complex0.1673Node0.0133string0.0089Object0.0073
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
valueName.Otherany0.9430string0.0328complex0.0172boolean0.0022number0.0015
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
filterName.Otherany0.6616boolean0.1470string0.1432complex0.0070Function0.0036
 Text.Whitespace
=Operator
 Text.Whitespace
valueName.Otherany0.6463string0.3061boolean0.0312number0.0051complex0.0025
;Punctuation
\n    Text.Whitespace
valueName.Otherstring0.5767any0.4092boolean0.0058complex0.0017RegExp0.0013
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
filterName.Otherany0.6393boolean0.1040string0.0962complex0.0958Filter0.0064
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
!Operator
filterName.Otherany0.5998complex0.1841boolean0.1240string0.0258void0.0073
(Punctuation
nodeName.Otherany0.7468Node0.1369never0.0152string0.0117complex0.0089
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
closeName.Otherany0.0861Node0.0581Element0.0270Node<Node>0.0205string0.0169
 Text.Whitespace
=Operator
 Text.Whitespace
newOperator.Wordany0.2292Node0.0983string0.0434Error0.0353complex0.0155
 Text.Whitespace
NodeName.Otherany0.7782complex0.2065Node0.0041string0.0014U[]0.0010
(Punctuation
{Punctuation
 Text.Whitespace
typeKeyword.Reserved
:Operator
 Text.Whitespace
nodeName.Otherany0.7593Node0.0890complex0.0245string0.0081never0.0066
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
+Operator
 Text.Whitespace
'.close'Literal.String.Single
,Punctuation
 Text.Whitespace
valueName.Otherany0.5425string0.3987number0.0188boolean0.0143string[]0.0022
:Operator
 Text.Whitespace
valueKeyword.Typeany0.5830string0.3625number0.0262boolean0.0120complex0.0021
}Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
pushName.Othernumber0.8086any0.1731string0.0024boolean0.0017void0.0014
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.7186Node0.0772complex0.0225any[]0.0092Node<Node>0.0061
.Punctuation
pushName.Othernumber0.8742any0.1156string0.0018complex0.0013boolean0.0009
 Text.Whitespace
||Operator
 Text.Whitespace
nodeName.Otherany0.8259Node0.0354complex0.0338Node<Node>0.0034number0.0029
.Punctuation
pushNodeName.Otherany0.8024boolean0.0845complex0.0386number0.0155void0.0135
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
pushName.Othernumber0.6774any0.2681complex0.0134boolean0.0055string0.0054
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
pushName.Othernumber0.9105any0.0773void0.0024string0.0016complex0.0008
.Punctuation
callName.Otherany0.9675complex0.0107void0.0062number0.0054T0.0015
(Punctuation
nodeName.Otherany0.4927Node0.2296Node<Node>0.0205never0.0160Element0.0118
,Punctuation
 Text.Whitespace
closeName.Otherany0.2024void0.1890string0.1843number0.0722complex0.0528
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
utilsName.Otherany0.7271complex0.2643void0.0041string0.0007number0.0005
.Punctuation
pushNodeName.Othervoid0.8572any0.1054complex0.0123string0.0062boolean0.0055
(Punctuation
nodeName.Otherany0.5729Node0.2333never0.0145Element0.0134string0.0108
,Punctuation
 Text.Whitespace
closeName.Otherstring0.2782void0.2278any0.1684number0.1044complex0.0277
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
closeName.Otherany0.1037void0.0717Promise<void>0.0696string0.0311complex0.0304
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Wraps the given `node` with `*.open` and `*.close` nodes.\n *\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Function} `Node` (required) Node constructor function from [snapdragon-node][].\n * @param {Function} `filter` Optionaly specify a filter function to exclude the node.\n * @return {Object} Returns the node\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8864complex0.1078void0.0025string0.0004number0.0003
.Punctuation
wrapNodesName.Otherany0.5433void0.3956complex0.0346boolean0.0097number0.0029
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7229Node0.1000never0.0104complex0.0097string0.0076
,Punctuation
 Text.Whitespace
NodeName.Otherany0.8545complex0.0470Node0.0189string0.0100Object0.0065
,Punctuation
 Text.Whitespace
filterName.Otherany0.6234string0.1245boolean0.0580Filter0.0360complex0.0109
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8739void0.0540complex0.0260Assert0.0133IAssertFunctions0.0056
(Punctuation
utilsName.Otherany0.9593complex0.0383void0.0004string0.0003any[]0.0002
.Punctuation
isNodeName.Otherany0.5020boolean0.3243complex0.1325string0.0179void0.0108
(Punctuation
nodeName.Otherany0.8921Node0.0512complex0.0072string0.0064Element0.0042
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.9367void0.0225complex0.0148Assert0.0083boolean0.0021
(Punctuation
isFunctionName.Otherboolean0.4940complex0.2880any0.1933string0.0100void0.0038
(Punctuation
NodeName.Otherany0.7193complex0.2009Node0.0137string0.0063void0.0027
)Punctuation
,Punctuation
 Text.Whitespace
'expected Node to be a constructor function'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
utilsName.Otherany0.7999complex0.1952void0.0028string0.0005number0.0002
.Punctuation
addOpenName.Othervoid0.8195any0.1281complex0.0244boolean0.0149string0.0038
(Punctuation
nodeName.Otherany0.5873Node0.2563Node<Node>0.0185never0.0094Element0.0085
,Punctuation
 Text.Whitespace
NodeName.Otherany0.7561complex0.0701Node0.0456string0.0108Object0.0069
,Punctuation
 Text.Whitespace
filterName.Otherany0.4639string0.1767boolean0.0850complex0.0505Filter0.0459
)Punctuation
;Punctuation
\n  Text.Whitespace
utilsName.Otherany0.7927complex0.2022void0.0020string0.0009number0.0002
.Punctuation
addCloseName.Othervoid0.6289any0.2801boolean0.0310complex0.0283string0.0163
(Punctuation
nodeName.Otherany0.6138Node0.2473never0.0099Element0.0099Node<Node>0.0091
,Punctuation
 Text.Whitespace
NodeName.Otherany0.7958complex0.0698Node0.0325string0.0121Object0.0081
,Punctuation
 Text.Whitespace
filterName.Otherany0.5220string0.1269boolean0.0608Filter0.0481complex0.0381
)Punctuation
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.7838Node0.0593complex0.0154string0.0070never0.0070
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Push the given `node` onto `parent.nodes`, and set `parent` as `node.parent.\n *\n * ```js\n * var parent = new Node({type: 'foo'});\n * var node = new Node({type: 'bar'});\n * utils.pushNode(parent, node);\n * console.log(parent.nodes[0].type) // 'bar'\n * console.log(node.parent.type) // 'foo'\n * ```\n * @param {Object} `parent`\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Object} Returns the child node\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8935complex0.0995void0.0015string0.0005number0.0003
.Punctuation
pushNodeName.Otherany0.7379void0.1201boolean0.0881complex0.0225string0.0075
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
parentName.Otherany0.5041Node0.1338string0.0210never0.0114Element0.0102
,Punctuation
 Text.Whitespace
nodeName.Otherany0.7176Node0.1327string0.0075Element0.0058Tree0.0047
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8441void0.0525complex0.0204Assert0.0203IAssertFunctions0.0097
(Punctuation
utilsName.Otherany0.9766complex0.0214string0.0002any[]0.0002void0.0002
.Punctuation
isNodeName.Otherany0.6292boolean0.2467complex0.0860string0.0213void0.0041
(Punctuation
parentName.Otherany0.6902Node0.0661string0.0266complex0.0137never0.0103
)Punctuation
,Punctuation
 Text.Whitespace
'expected parent node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.8104Node0.0843complex0.0167never0.0061boolean0.0056
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
parentName.Otherany0.6619Node0.0556complex0.0198Node<Node>0.0141never0.0065
.Punctuation
pushName.Othernumber0.6142any0.3671string0.0049complex0.0029boolean0.0027
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
parentName.Otherany0.7603Node0.0398any[]0.0099string0.0060Node<Node>0.0055
.Punctuation
pushName.Othernumber0.9079any0.0874string0.0015boolean0.0008void0.0006
(Punctuation
nodeName.Otherany0.5661Node0.1852string0.0161never0.0142Element0.0092
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
nodeName.Otherany0.5597Node0.0369TreeModel0.0122complex0.0117TreeNode0.0052
.Punctuation
defineName.Otherany0.5002void0.3039complex0.0101Function0.0040U[]0.0036
(Punctuation
'parent'Literal.String.Single
,Punctuation
 Text.Whitespace
parentName.Otherany0.6878string0.0383Node0.0261never0.0104complex0.0097
)Punctuation
;Punctuation
\n  Text.Whitespace
parentName.Otherany0.6193Node0.0248Node<Node>0.0143ViewBase0.0095never0.0083
.Punctuation
nodesName.Otherany0.7616any[]0.0503Node[]0.0150complex0.0142string[]0.0049
 Text.Whitespace
=Operator
 Text.Whitespace
parentName.Otherany0.8193complex0.0127Node0.0094string0.0062any[]0.0055
.Punctuation
nodesName.Otherany0.8349any[]0.0364complex0.0123Node[]0.0094string0.0063
 Text.Whitespace
||Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
parentName.Otherany0.7943Node0.0362Node<Node>0.0073complex0.0065never0.0055
.Punctuation
nodesName.Otherany0.7393any[]0.0516Node[]0.0185complex0.0053string0.0040
.Punctuation
pushName.Othernumber0.7810any0.2109void0.0028string0.0016complex0.0009
(Punctuation
nodeName.Otherany0.6834Node0.1280never0.0089Element0.0074Node<Node>0.0064
)Punctuation
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8745Node0.0329complex0.0131never0.0062any[]0.0042
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Unshift `node` onto `parent.nodes`, and set `parent` as `node.parent.\n *\n * ```js\n * var parent = new Node({type: 'foo'});\n * var node = new Node({type: 'bar'});\n * utils.unshiftNode(parent, node);\n * console.log(parent.nodes[0].type) // 'bar'\n * console.log(node.parent.type) // 'foo'\n * ```\n * @param {Object} `parent`\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {undefined}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8767complex0.1160void0.0016number0.0005string0.0004
.Punctuation
unshiftNodeName.Otherany0.6741void0.2011boolean0.0679complex0.0274number0.0065
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
parentName.Otherany0.5886Node0.0962string0.0170never0.0096Element0.0090
,Punctuation
 Text.Whitespace
nodeName.Otherany0.7493Node0.1157Element0.0058string0.0047complex0.0040
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8695void0.0454complex0.0192Assert0.0146IAssertFunctions0.0064
(Punctuation
utilsName.Otherany0.9777complex0.0203any[]0.0002void0.0002string0.0002
.Punctuation
isNodeName.Otherany0.6342boolean0.2507complex0.0812string0.0171void0.0049
(Punctuation
parentName.Otherany0.6853Node0.0625string0.0191complex0.0153never0.0097
)Punctuation
,Punctuation
 Text.Whitespace
'expected parent node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.8022Node0.0905complex0.0144boolean0.0064never0.0055
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
parentName.Otherany0.6708complex0.0501Node0.0389Node<Node>0.0096never0.0074
.Punctuation
unshiftName.Othernumber0.5651any0.4192complex0.0062string0.0048boolean0.0009
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
parentName.Otherany0.6896Node0.0376any[]0.0199Node<Node>0.0075string0.0067
.Punctuation
unshiftName.Othernumber0.8383any0.1562void0.0014string0.0013complex0.0010
(Punctuation
nodeName.Otherany0.6585Node0.1125never0.0192string0.0114Element0.0075
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
nodeName.Otherany0.5801Node0.0232complex0.0165TreeModel0.0070any[]0.0056
.Punctuation
defineName.Otherany0.4942void0.3522complex0.0081Function0.0034U[]0.0028
(Punctuation
'parent'Literal.String.Single
,Punctuation
 Text.Whitespace
parentName.Otherany0.7364string0.0297Node0.0201complex0.0096never0.0087
)Punctuation
;Punctuation
\n  Text.Whitespace
parentName.Otherany0.6773Node0.0180Node<Node>0.0121ViewBase0.0078never0.0075
.Punctuation
nodesName.Otherany0.7814any[]0.0599Node[]0.0130complex0.0121string[]0.0046
 Text.Whitespace
=Operator
 Text.Whitespace
parentName.Otherany0.8452complex0.0134Node0.0079any[]0.0062string0.0046
.Punctuation
nodesName.Otherany0.8465any[]0.0421complex0.0111Node[]0.0084string0.0053
 Text.Whitespace
||Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
parentName.Otherany0.6736Node0.0480complex0.0121Node<Node>0.0105void0.0075
.Punctuation
nodesName.Otherany0.6369any[]0.1107Node[]0.0260string[]0.0081complex0.0065
.Punctuation
unshiftName.Othernumber0.7387any0.2539void0.0024string0.0016complex0.0011
(Punctuation
nodeName.Otherany0.7050Node0.0822never0.0134complex0.0094string0.0078
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Pop the last `node` off of `parent.nodes`. The advantage of\n * using this method is that it checks for `node.nodes` and works\n * with any version of `snapdragon-node`.\n *\n * ```js\n * var parent = new Node({type: 'foo'});\n * utils.pushNode(parent, new Node({type: 'foo'}));\n * utils.pushNode(parent, new Node({type: 'bar'}));\n * utils.pushNode(parent, new Node({type: 'baz'}));\n * console.log(parent.nodes.length); //=> 3\n * utils.popNode(parent);\n * console.log(parent.nodes.length); //=> 2\n * ```\n * @param {Object} `parent`\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Number|Undefined} Returns the length of `node.nodes` or undefined.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8915complex0.0999void0.0023any[]0.0004string0.0003
.Punctuation
popNodeName.Otherany0.5592void0.2901boolean0.0980complex0.0231string0.0058
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7522Node0.0900Element0.0074never0.0055complex0.0052
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8481void0.0571complex0.0207Assert0.0195IAssertFunctions0.0085
(Punctuation
utilsName.Otherany0.9691complex0.0270void0.0006any[]0.0003string0.0003
.Punctuation
isNodeName.Otherany0.4768boolean0.4040complex0.0769string0.0196void0.0093
(Punctuation
nodeName.Otherany0.8390Node0.0653complex0.0064string0.0055Element0.0051
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.7395Node0.0613complex0.0239never0.0074Node<Node>0.0044
.Punctuation
popName.Otherany0.9079string0.0588complex0.0098boolean0.0041number0.0034
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8632Node0.0242any[]0.0196complex0.0172string0.0030
.Punctuation
popName.Otherany0.8667string0.0748boolean0.0106complex0.0103number0.0078
(Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.7951Node0.0577complex0.0268Node<Node>0.0045never0.0035
.Punctuation
nodesName.Otherany0.8481any[]0.0222complex0.0147Node[]0.0117string0.0053
 Text.Whitespace
&&Operator
 Text.Whitespace
nodeName.Otherany0.8914Node0.0192complex0.0175any[]0.0033never0.0021
.Punctuation
nodesName.Otherany0.8490any[]0.0587complex0.0117string[]0.0085Node[]0.0084
.Punctuation
popName.Otherany0.9671string0.0123complex0.0043number0.0024boolean0.0020
(Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Shift the first `node` off of `parent.nodes`. The advantage of\n * using this method is that it checks for `node.nodes` and works\n * with any version of `snapdragon-node`.\n *\n * ```js\n * var parent = new Node({type: 'foo'});\n * utils.pushNode(parent, new Node({type: 'foo'}));\n * utils.pushNode(parent, new Node({type: 'bar'}));\n * utils.pushNode(parent, new Node({type: 'baz'}));\n * console.log(parent.nodes.length); //=> 3\n * utils.shiftNode(parent);\n * console.log(parent.nodes.length); //=> 2\n * ```\n * @param {Object} `parent`\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Number|Undefined} Returns the length of `node.nodes` or undefined.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9147complex0.0764void0.0021any[]0.0004string0.0004
.Punctuation
shiftNodeName.Otherany0.6333void0.1679boolean0.1464complex0.0197string0.0070
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.6693Node0.1253Element0.0099Tree0.0069never0.0055
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8640void0.0427complex0.0202Assert0.0189IAssertFunctions0.0077
(Punctuation
utilsName.Otherany0.9661complex0.0294void0.0005any[]0.0004string0.0003
.Punctuation
isNodeName.Otherboolean0.4794any0.4015complex0.0766string0.0207void0.0076
(Punctuation
nodeName.Otherany0.8192Node0.0771complex0.0056Element0.0054string0.0050
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.6999Node0.0789complex0.0267Node<Node>0.0075never0.0062
.Punctuation
shiftName.Otherany0.9491string0.0157number0.0097complex0.0075Node0.0028
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8375Node0.0499complex0.0116any[]0.0083never0.0031
.Punctuation
shiftName.Otherany0.9210string0.0300number0.0231complex0.0043Node0.0039
(Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8274Node0.0511complex0.0235Node<Node>0.0045never0.0024
.Punctuation
nodesName.Otherany0.8632any[]0.0185complex0.0162Node[]0.0072string0.0035
 Text.Whitespace
&&Operator
 Text.Whitespace
nodeName.Otherany0.8691complex0.0235Node0.0211any[]0.0022Node<Node>0.0021
.Punctuation
nodesName.Otherany0.8301any[]0.0397complex0.0098string[]0.0073Node[]0.0066
.Punctuation
shiftName.Otherany0.9504string0.0188number0.0123complex0.0035T0.0018
(Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Remove the specified `node` from `parent.nodes`.\n *\n * ```js\n * var parent = new Node({type: 'abc'});\n * var foo = new Node({type: 'foo'});\n * utils.pushNode(parent, foo);\n * utils.pushNode(parent, new Node({type: 'bar'}));\n * utils.pushNode(parent, new Node({type: 'baz'}));\n * console.log(parent.nodes.length); //=> 3\n * utils.removeNode(parent, foo);\n * console.log(parent.nodes.length); //=> 2\n * ```\n * @param {Object} `parent`\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Object|undefined} Returns the removed node, if successful, or undefined if it does not exist on `parent.nodes`.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9035complex0.0855void0.0015any[]0.0006number0.0003
.Punctuation
removeNodeName.Otherany0.5594boolean0.3049void0.1155number0.0065complex0.0054
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
parentName.Otherany0.4533Node0.1218string0.0154Element0.0111Tree0.0104
,Punctuation
 Text.Whitespace
nodeName.Otherany0.6289Node0.1429Element0.0076Tree0.0064never0.0052
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8723void0.0406Assert0.0212complex0.0148IAssertFunctions0.0071
(Punctuation
utilsName.Otherany0.9700complex0.0265any[]0.0003void0.0003string0.0002
.Punctuation
isNodeName.Otherany0.4709boolean0.4470complex0.0518string0.0168void0.0045
(Punctuation
parentName.Otherany0.6323Node0.0764string0.0159complex0.0131never0.0099
)Punctuation
,Punctuation
 Text.Whitespace
'expected parent to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
parentName.Otherany0.3620Node0.1141Node<Node>0.0322complex0.0292never0.0103
.Punctuation
nodesName.Otherany0.7492boolean0.0303Node[]0.0212string0.0205any[]0.0197
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.8229Node0.0762complex0.0099boolean0.0071never0.0049
)Punctuation
 Text.Whitespace
returnKeyword
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
parentName.Otherany0.7446Node0.0445complex0.0334Node<Node>0.0115never0.0067
.Punctuation
removeName.Otherany0.9286complex0.0256boolean0.0234void0.0076string0.0043
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
parentName.Otherany0.8174Node0.0508complex0.0087Node<Node>0.0080string0.0041
.Punctuation
removeName.Otherany0.9365complex0.0210void0.0144boolean0.0093number0.0072
(Punctuation
nodeName.Otherany0.8353Node0.0677never0.0081string0.0071complex0.0038
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
idxName.Othernumber0.8887any0.1081string0.0013boolean0.0008complex0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
parentName.Otherany0.5593Node0.1103Node<Node>0.0101complex0.0084Element0.0073
.Punctuation
nodesName.Otherany0.7394any[]0.0415Node[]0.0207string[]0.0092complex0.0083
.Punctuation
indexOfName.Othernumber0.5096any0.4841complex0.0016string0.0013boolean0.0007
(Punctuation
nodeName.Otherany0.8052Node0.0570never0.0097string0.0092complex0.0037
)Punctuation
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
idxName.Othernumber0.7990any0.1974string0.0019boolean0.0005complex0.0003
 Text.Whitespace
!==Operator
 Text.Whitespace
-Operator
1Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
parentName.Otherany0.7255Node0.0483Node<Node>0.0125complex0.0116never0.0043
.Punctuation
nodesName.Otherany0.8216any[]0.0381complex0.0230Node[]0.0102string0.0085
.Punctuation
spliceName.Othercomplex0.5321any0.4570any[]0.0024number0.0018boolean0.0009
(Punctuation
idxName.Othernumber0.9515any0.0463string0.0012boolean0.0004void0.0001
,Punctuation
 Text.Whitespace
1Literal.Number.Float
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node.type` matches the given `type`. Throws a\n * `TypeError` if `node` is not an instance of `Node`.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var node = new Node({type: 'foo'});\n * console.log(utils.isType(node, 'foo')); // false\n * console.log(utils.isType(node, 'bar')); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {String} `type`\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Othercomplex0.5800any0.3955void0.0034any[]0.0015Set<any>0.0006
.Punctuation
isTypeName.Otherboolean0.8042any0.1515complex0.0233void0.0086number0.0063
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.5828Node0.1264never0.0125Element0.0094Tree0.0080
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.6345complex0.3538boolean0.0024any[]0.0009void0.0008
.Punctuation
isNodeName.Otherboolean0.9479any0.0269complex0.0215string0.0011void0.0007
(Punctuation
nodeName.Otherany0.7748Node0.0984complex0.0077never0.0072Node<Node>0.0048
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
switchKeyword
 Text.Whitespace
(Punctuation
typeOfName.Otherboolean0.7100any0.1281string0.1219complex0.0204number0.0039
(Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
'string'Literal.String.Single
:Operator
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.7773Node0.0648complex0.0300never0.0114Error0.0027
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
typeKeyword.Reserved
;Punctuation
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
'regexp'Literal.String.Single
:Operator
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
typeKeyword.Reserved
.Punctuation
testName.Otherboolean0.9748any0.0147complex0.0025void0.0020string0.0019
(Punctuation
nodeName.Otherany0.8823Node0.0251complex0.0212never0.0058string0.0030
.Punctuation
typeKeyword.Reserved
)Punctuation
;Punctuation
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
'array'Literal.String.Single
:Operator
\n      Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
keyName.Otherany0.5444string0.4348complex0.0129number0.0028any[]0.0006
 Text.Whitespace
ofKeyword
 Text.Whitespace
typeKeyword.Reserved
.Punctuation
sliceName.Otherany0.7619string0.1137string[]0.0639complex0.0230any[]0.0163
(Punctuation
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
utilsName.Othercomplex0.7728any0.2167any[]0.0017boolean0.0005void0.0004
.Punctuation
isTypeName.Otherboolean0.9019complex0.0581any0.0331void0.0017number0.0016
(Punctuation
nodeName.Otherany0.8100Node0.0756complex0.0151never0.0139string0.0064
,Punctuation
 Text.Whitespace
keyName.Otherany0.5926string0.3472complex0.0313number0.0138boolean0.0021
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n          Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n        Text.Whitespace
}Punctuation
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n    Text.Whitespace
defaultKeyword
:Operator
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
throwKeywordany0.6122complex0.1393Error0.0791boolean0.0426string0.0233
 Text.Whitespace
newOperator.Wordany0.3211complex0.0781Error0.0490boolean0.0471string0.0312
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9911ErrorConstructor0.0015BooleanConstructor0.0002MapConstructor0.0001undefined0.0001
(Punctuation
'expected "type" to be an array, string or regexp'Literal.String.Single
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the given `node` has the given `type` in `node.nodes`.\n * Throws a `TypeError` if `node` is not an instance of `Node`.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var node = new Node({\n *   type: 'foo',\n *   nodes: [\n *     new Node({type: 'bar'}),\n *     new Node({type: 'baz'})\n *   ]\n * });\n * console.log(utils.hasType(node, 'xyz')); // false\n * console.log(utils.hasType(node, 'baz')); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {String} `type`\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.7210complex0.2635any[]0.0013void0.0012Set<any>0.0008
.Punctuation
hasTypeName.Otherboolean0.9857any0.0105void0.0008string0.0008complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.6894Node0.0707never0.0232Element0.0103string0.0089
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.6312complex0.3611boolean0.0013any[]0.0007void0.0004
.Punctuation
isNodeName.Otherboolean0.8634complex0.0773any0.0530string0.0017void0.0011
(Punctuation
nodeName.Otherany0.8290Node0.0645never0.0116complex0.0094Element0.0067
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9991any0.0001ObjectConstructor0.0001Math0.0001complex0.0001
.Punctuation
isArrayName.Othercomplex0.9972any0.0011boolean0.0007any[]0.0003void0.0001
(Punctuation
nodeName.Otherany0.8291complex0.0808Node0.0102never0.0089any[]0.0030
.Punctuation
nodesName.Otherany0.8713complex0.0325any[]0.0305boolean0.0033string0.0027
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
childName.Otherany0.8846Node0.0309complex0.0114string0.0070never0.0050
 Text.Whitespace
ofKeyword
 Text.Whitespace
nodeName.Otherany0.9087complex0.0130Node0.0097never0.0046any[]0.0015
.Punctuation
nodesName.Otherany0.9175any[]0.0151complex0.0113string0.0047boolean0.0030
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
utilsName.Otherany0.6333complex0.3540any[]0.0029Set<any>0.0008boolean0.0005
.Punctuation
isTypeName.Otherboolean0.7282any0.2097complex0.0517number0.0028string0.0025
(Punctuation
childName.Otherany0.9292Node0.0187string0.0091never0.0089complex0.0053
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns the first node from `node.nodes` of the given `type`\n *\n * ```js\n * var node = new Node({\n *   type: 'foo',\n *   nodes: [\n *     new Node({type: 'text', value: 'abc'}),\n *     new Node({type: 'text', value: 'xyz'})\n *   ]\n * });\n *\n * var textNode = utils.firstOfType(node.nodes, 'text');\n * console.log(textNode.value);\n * //=> 'abc'\n * ```\n * @param {Array} `nodes`\n * @param {String} `type`\n * @return {Object|undefined} Returns the first matching node or undefined.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9155complex0.0774void0.0022any[]0.0005string0.0003
.Punctuation
firstOfTypeName.Otherany0.7214void0.1345boolean0.1033complex0.0119string0.0090
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodesName.Otherany0.9088any[]0.0153string0.0050complex0.0025Node[]0.0022
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
nodeName.Otherany0.9301Node0.0188string0.0099complex0.0040never0.0038
 Text.Whitespace
ofKeyword
 Text.Whitespace
nodesName.Otherany0.8113any[]0.0540complex0.0236string0.0097string[]0.0071
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
utilsName.Othercomplex0.6263any0.3654any[]0.0017void0.0004Set<any>0.0003
.Punctuation
isTypeName.Otherboolean0.5460any0.2651complex0.1669number0.0075void0.0046
(Punctuation
nodeName.Otherany0.9222Node0.0180never0.0144string0.0049complex0.0047
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9458never0.0097Node0.0050any[]0.0038string0.0035
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns the node at the specified index, or the first node of the\n * given `type` from `node.nodes`.\n *\n * ```js\n * var node = new Node({\n *   type: 'foo',\n *   nodes: [\n *     new Node({type: 'text', value: 'abc'}),\n *     new Node({type: 'text', value: 'xyz'})\n *   ]\n * });\n *\n * var nodeOne = utils.findNode(node.nodes, 'text');\n * console.log(nodeOne.value);\n * //=> 'abc'\n *\n * var nodeTwo = utils.findNode(node.nodes, 1);\n * console.log(nodeTwo.value);\n * //=> 'xyz'\n * ```\n *\n * @param {Array} `nodes`\n * @param {String|Number} `type` Node type or index.\n * @return {Object} Returns a node or undefined.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8358complex0.1532void0.0028any[]0.0006string0.0004
.Punctuation
findNodeName.Otherany0.8953void0.0337boolean0.0198string0.0190Function0.0040
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodesName.Otherany0.8128any[]0.0156string0.0116Node[]0.0056complex0.0028
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9994any0.0001Math0.0000ObjectConstructor0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9962any0.0018any[]0.0008boolean0.0004void0.0001
(Punctuation
nodesName.Otherany0.8014any[]0.0908complex0.0600string[]0.0020string0.0019
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
'number'Literal.String.Single
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
nodesName.Otherany0.8671complex0.0670any[]0.0229{}0.0028boolean0.0010
[Punctuation
typeKeyword.Reserved
]Punctuation
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
utilsName.Otherany0.7637complex0.2284any[]0.0026void0.0010string0.0004
.Punctuation
firstOfTypeName.Otherany0.6093complex0.1607boolean0.0857void0.0474string0.0452
(Punctuation
nodesName.Otherany0.7901any[]0.0839complex0.0134string0.0107string[]0.0064
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the given node is an "*.open" node.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({type: 'brace'});\n * var open = new Node({type: 'brace.open'});\n * var close = new Node({type: 'brace.close'});\n *\n * console.log(utils.isOpen(brace)); // false\n * console.log(utils.isOpen(open)); // true\n * console.log(utils.isOpen(close)); // false\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8783complex0.1139any[]0.0008void0.0006string0.0002
.Punctuation
isOpenName.Otherany0.8300boolean0.1555void0.0049complex0.0039string0.0030
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7851Node0.0525never0.0100Element0.0058complex0.0046
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.8841Node0.0360complex0.0088never0.0072Element0.0044
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9099complex0.0246Node0.0159never0.0038boolean0.0020
.Punctuation
parentName.Otherany0.8305Node0.0409never0.0156complex0.0111string0.0059
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.9061complex0.0240Node0.0151never0.0059boolean0.0013
.Punctuation
parentName.Otherany0.8855complex0.0195Node0.0159never0.0100Node<Node>0.0017
.Punctuation
isOpenName.Otherany0.9821boolean0.0098complex0.0039string0.0029void0.0004
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9575complex0.0122Node0.0048never0.0013boolean0.0007
.Punctuation
parentName.Otherany0.9327complex0.0094Node0.0086never0.0056string0.0025
.Punctuation
isOpenName.Otherany0.9752boolean0.0172void0.0037complex0.0017string0.0011
(Punctuation
nodeName.Otherany0.9273never0.0128Node0.0094string0.0052complex0.0049
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9375complex0.0112Node0.0097never0.0076boolean0.0036
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.9128complex0.0243never0.0081Node0.0074any[]0.0014
.Punctuation
isOpenName.Otherany0.9816boolean0.0107complex0.0048string0.0020void0.0002
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9518complex0.0097Node0.0049never0.0022boolean0.0011
.Punctuation
isOpenName.Otherany0.9594boolean0.0318void0.0042complex0.0024string0.0009
(Punctuation
nodeName.Otherany0.9151never0.0145Node0.0127complex0.0063string0.0051
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8171complex0.0350Node0.0247never0.0085TreeModel0.0041
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
?Operator
 Text.Whitespace
nodeName.Otherany0.9407complex0.0281Node0.0038string0.0031never0.0022
.Punctuation
typeKeyword.Reserved
.Punctuation
sliceName.Otherany0.9441string0.0458complex0.0028string[]0.0025any[]0.0015
(Punctuation
-Operator
5Literal.Number.Float
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
'.open'Literal.String.Single
 Text.Whitespace
:Operator
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the given node is a "*.close" node.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({type: 'brace'});\n * var open = new Node({type: 'brace.open'});\n * var close = new Node({type: 'brace.close'});\n *\n * console.log(utils.isClose(brace)); // false\n * console.log(utils.isClose(open)); // false\n * console.log(utils.isClose(close)); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8041complex0.1855void0.0013any[]0.0008never0.0002
.Punctuation
isCloseName.Otherboolean0.5792any0.3840void0.0114complex0.0077number0.0048
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7434Node0.0844never0.0132Element0.0075complex0.0050
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.8363Node0.0579complex0.0116never0.0099boolean0.0062
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.8901complex0.0294Node0.0218never0.0057boolean0.0021
.Punctuation
parentName.Otherany0.7947Node0.0509never0.0235complex0.0157string0.0072
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.8947Node0.0213complex0.0203never0.0081boolean0.0014
.Punctuation
parentName.Otherany0.8636Node0.0254never0.0160complex0.0158Element0.0021
.Punctuation
isCloseName.Otherany0.9619string0.0112boolean0.0108complex0.0080number0.0020
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9467complex0.0136Node0.0067never0.0023number0.0012
.Punctuation
parentName.Otherany0.8200Node0.0318never0.0136complex0.0115string0.0065
.Punctuation
isCloseName.Otherany0.9355complex0.0158boolean0.0128void0.0100string0.0066
(Punctuation
nodeName.Otherany0.8834Node0.0207never0.0190string0.0071complex0.0061
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9151Node0.0173complex0.0145never0.0102boolean0.0039
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.9168complex0.0192Node0.0124never0.0078boolean0.0015
.Punctuation
isCloseName.Otherany0.9498string0.0150boolean0.0145complex0.0120number0.0027
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9339complex0.0112Node0.0073never0.0033number0.0018
.Punctuation
isCloseName.Otherany0.8568boolean0.0649complex0.0292void0.0104string0.0093
(Punctuation
nodeName.Otherany0.8699Node0.0260never0.0233string0.0087complex0.0082
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8143complex0.0324Node0.0304never0.0081TreeModel0.0040
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
?Operator
 Text.Whitespace
nodeName.Otherany0.9226complex0.0338Node0.0063string0.0043never0.0031
.Punctuation
typeKeyword.Reserved
.Punctuation
sliceName.Otherany0.9250string0.0616string[]0.0034complex0.0033any[]0.0019
(Punctuation
-Operator
6Literal.Number.Float
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
'.close'Literal.String.Single
 Text.Whitespace
:Operator
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the given node is an "*.open" node.\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({type: 'brace'});\n * var open = new Node({type: 'brace.open', value: '{'});\n * var inner = new Node({type: 'text', value: 'a,b,c'});\n * var close = new Node({type: 'brace.close', value: '}'});\n * brace.push(open);\n * brace.push(inner);\n * brace.push(close);\n *\n * console.log(utils.isBlock(brace)); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.6226complex0.3629void0.0032any[]0.0019boolean0.0005
.Punctuation
isBlockName.Otherboolean0.7725any0.1433void0.0417complex0.0265number0.0031
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8331Node0.0277never0.0125complex0.0086Element0.0080
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
nodeName.Otherany0.9222Node0.0125complex0.0099boolean0.0045never0.0045
 Text.Whitespace
||Operator
 Text.Whitespace
!Operator
utilsName.Otherany0.6671complex0.3236any[]0.0016boolean0.0010void0.0006
.Punctuation
isNodeName.Otherboolean0.8211any0.0896complex0.0818void0.0019string0.0015
(Punctuation
nodeName.Otherany0.8907Node0.0337never0.0072complex0.0071Element0.0053
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9992any0.0002complex0.0001ObjectConstructor0.0000Math0.0000
.Punctuation
isArrayName.Othercomplex0.9959any0.0017boolean0.0013any[]0.0004number0.0002
(Punctuation
nodeName.Otherany0.8865complex0.0326Node0.0151never0.0061any[]0.0026
.Punctuation
nodesName.Otherany0.9073any[]0.0295complex0.0183number0.0037boolean0.0023
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9028complex0.0316Node0.0156never0.0034boolean0.0030
.Punctuation
parentName.Otherany0.7980Node0.0579complex0.0156never0.0143Node<Node>0.0058
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.8607complex0.0258Node0.0228never0.0081any[]0.0025
.Punctuation
parentName.Otherany0.8864Node0.0175never0.0120complex0.0119Node<Node>0.0024
.Punctuation
isBlockName.Otherany0.9476boolean0.0301complex0.0101void0.0029number0.0028
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9570complex0.0110Node0.0045never0.0015any[]0.0015
.Punctuation
parentName.Otherany0.9511Node0.0063complex0.0059never0.0038void0.0024
.Punctuation
isBlockName.Otherany0.9391boolean0.0274complex0.0152void0.0133number0.0007
(Punctuation
nodeName.Otherany0.9554never0.0080complex0.0044string0.0042Node0.0039
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.8921complex0.0198never0.0091Node0.0080any[]0.0036
.Punctuation
isBlockName.Otherany0.9282boolean0.0422complex0.0158void0.0033number0.0026
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9567complex0.0081Node0.0033any[]0.0023boolean0.0012
.Punctuation
isBlockName.Otherany0.8779boolean0.0713void0.0230complex0.0210number0.0012
(Punctuation
nodeName.Otherany0.9663complex0.0052never0.0045string0.0042Node0.0034
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
utilsName.Otherany0.7076complex0.2851any[]0.0016void0.0014string0.0004
.Punctuation
hasOpenAndCloseName.Otherany0.7415complex0.0848void0.0558boolean0.0438string0.0319
(Punctuation
nodeName.Otherany0.9432never0.0075Node0.0071complex0.0061string0.0043
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `parent.nodes` has the given `node`.\n *\n * ```js\n * const foo = new Node({type: 'foo'});\n * const bar = new Node({type: 'bar'});\n * cosole.log(util.hasNode(foo, bar)); // false\n * foo.push(bar);\n * cosole.log(util.hasNode(foo, bar)); // true\n * ```\n * @param {String} `type`\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.6915complex0.2743void0.0042any[]0.0017never0.0006
.Punctuation
hasNodeName.Otherany0.9496string0.0179boolean0.0074complex0.0067number0.0058
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8601Node0.0363never0.0080Element0.0049complex0.0033
,Punctuation
 Text.Whitespace
childName.Otherany0.9374Node0.0164string0.0080complex0.0039never0.0026
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.6155complex0.3787boolean0.0009any[]0.0008void0.0007
.Punctuation
isNodeName.Otherboolean0.8930any0.0575complex0.0441void0.0017string0.0013
(Punctuation
nodeName.Otherany0.8747Node0.0424never0.0081complex0.0069Element0.0037
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.8333complex0.0768Node0.0103never0.0057boolean0.0037
.Punctuation
hasName.Otherany0.5176boolean0.4611complex0.0092string0.0045number0.0018
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.8098complex0.1174Node0.0079boolean0.0054never0.0033
.Punctuation
hasName.Otherboolean0.7055any0.2735complex0.0081string0.0028number0.0026
(Punctuation
childName.Otherany0.9054string0.0484Node0.0134complex0.0056never0.0049
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9058Node0.0182complex0.0100never0.0059boolean0.0031
.Punctuation
nodesName.Otherany0.9421boolean0.0083complex0.0068any[]0.0061string0.0043
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9432complex0.0100Node0.0096any[]0.0016never0.0016
.Punctuation
nodesName.Otherany0.8975any[]0.0373string[]0.0133string0.0088complex0.0061
.Punctuation
indexOfName.Otherany0.7186number0.2762complex0.0013boolean0.0012string0.0011
(Punctuation
childName.Otherany0.9132string0.0334Node0.0151number0.0066never0.0054
)Punctuation
 Text.Whitespace
!==Operator
 Text.Whitespace
-Operator
1Literal.Number.Float
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node.nodes` **has** an `.open` node\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({\n *   type: 'brace',\n *   nodes: []\n * });\n *\n * var open = new Node({type: 'brace.open'});\n * console.log(utils.hasOpen(brace)); // false\n *\n * brace.pushNode(open);\n * console.log(utils.hasOpen(brace)); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9304complex0.0652void0.0012any[]0.0003number0.0002
.Punctuation
hasOpenName.Otherany0.7880void0.1476boolean0.0341complex0.0144number0.0039
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8372Node0.0410Element0.0070never0.0052complex0.0042
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8793void0.0483complex0.0186Assert0.0150IAssertFunctions0.0034
(Punctuation
utilsName.Otherany0.9749complex0.0226any[]0.0004void0.0003string0.0002
.Punctuation
isNodeName.Otherany0.5386boolean0.3622complex0.0671string0.0149void0.0073
(Punctuation
nodeName.Otherany0.9112Node0.0233complex0.0047never0.0047string0.0042
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
firstName.Otherany0.9199Node0.0180complex0.0083boolean0.0047number0.0027
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.8988Node0.0238complex0.0163Node<Node>0.0021never0.0019
.Punctuation
firstName.Otherany0.9559complex0.0111Node0.0074boolean0.0021number0.0016
 Text.Whitespace
||Operator
 Text.Whitespace
nodeName.Otherany0.9323Node0.0110complex0.0108boolean0.0015never0.0012
.Punctuation
nodesName.Otherany0.9595complex0.0064boolean0.0063any[]0.0027string0.0015
 Text.Whitespace
?Operator
 Text.Whitespace
nodeName.Otherany0.9708complex0.0096Node0.0022any[]0.0013string0.0009
.Punctuation
nodesName.Otherany0.9427any[]0.0164complex0.0107string0.0033string[]0.0020
[Punctuation
0Literal.Number.Float
]Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.6514complex0.3395any[]0.0020boolean0.0010void0.0006
.Punctuation
isNodeName.Otherboolean0.8591any0.0924complex0.0420string0.0023void0.0012
(Punctuation
firstName.Otherany0.9438complex0.0129Node0.0074string0.0041boolean0.0034
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.9584complex0.0112Node0.0068never0.0016boolean0.0009
.Punctuation
isOpenName.Otherany0.9818boolean0.0119complex0.0027string0.0027void0.0003
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9549Node0.0075complex0.0062never0.0012boolean0.0009
.Punctuation
isOpenName.Otherany0.9345boolean0.0552void0.0059complex0.0017string0.0010
(Punctuation
firstName.Otherany0.9248Node0.0121string0.0096T0.0087complex0.0072
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
firstName.Otherany0.9162complex0.0266Node0.0104T0.0036boolean0.0019
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.9645complex0.0124Node0.0046never0.0018string0.0014
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
+Operator
 Text.Whitespace
'.open'Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node.nodes` **has** a `.close` node\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({\n *   type: 'brace',\n *   nodes: []\n * });\n *\n * var close = new Node({type: 'brace.close'});\n * console.log(utils.hasClose(brace)); // false\n *\n * brace.pushNode(close);\n * console.log(utils.hasClose(brace)); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9209complex0.0735void0.0019any[]0.0004string0.0002
.Punctuation
hasCloseName.Otherany0.6580void0.2634boolean0.0362complex0.0190string0.0045
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8895Node0.0244never0.0053complex0.0045string0.0036
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8929void0.0375complex0.0181Assert0.0142IAssertFunctions0.0030
(Punctuation
utilsName.Otherany0.9534complex0.0426any[]0.0006void0.0005string0.0002
.Punctuation
isNodeName.Otherany0.5486boolean0.2928complex0.1200string0.0153void0.0100
(Punctuation
nodeName.Otherany0.9240Node0.0183complex0.0054never0.0047string0.0042
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
lastName.Otherany0.9853number0.0039string0.0023Node0.0015complex0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.9150Node0.0195complex0.0099never0.0019Element0.0014
.Punctuation
lastName.Otherany0.9784number0.0043boolean0.0028string0.0027Node0.0021
 Text.Whitespace
||Operator
 Text.Whitespace
nodeName.Otherany0.9270complex0.0150Node0.0103boolean0.0013any[]0.0010
.Punctuation
nodesName.Otherany0.9523complex0.0102boolean0.0045any[]0.0035string0.0018
 Text.Whitespace
?Operator
 Text.Whitespace
nodeName.Otherany0.9580complex0.0132Node0.0037any[]0.0015string0.0009
.Punctuation
nodesName.Otherany0.9193complex0.0228any[]0.0171string0.0023string[]0.0014
[Punctuation
nodeName.Otherany0.9308complex0.0146Node0.0115string0.0018any[]0.0015
.Punctuation
nodesName.Otherany0.9168any[]0.0176complex0.0060string0.0033string[]0.0028
.Punctuation
lengthName.Otherany0.8446number0.1527string0.0010complex0.0008boolean0.0002
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
]Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.6770complex0.3150any[]0.0010boolean0.0009void0.0005
.Punctuation
isNodeName.Otherboolean0.8676any0.0911complex0.0350string0.0017void0.0011
(Punctuation
lastName.Otherany0.9760string0.0057complex0.0054number0.0036boolean0.0031
)Punctuation
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
nodeName.Otherany0.9427complex0.0153Node0.0107never0.0023boolean0.0016
.Punctuation
isCloseName.Otherany0.9388boolean0.0320string0.0118complex0.0100number0.0025
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nodeName.Otherany0.9493complex0.0100Node0.0069string0.0015never0.0012
.Punctuation
isCloseName.Otherany0.9027boolean0.0334complex0.0230void0.0122string0.0074
(Punctuation
lastName.Otherany0.9429string0.0234number0.0087T0.0061boolean0.0055
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
lastName.Otherany0.9611complex0.0087Node0.0055T0.0043string0.0015
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
nodeName.Otherany0.9553complex0.0124Node0.0063never0.0026string0.0021
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
+Operator
 Text.Whitespace
'.close'Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node.nodes` has both `.open` and `.close` nodes\n *\n * ```js\n * var Node = require('snapdragon-node');\n * var brace = new Node({\n *   type: 'brace',\n *   nodes: []\n * });\n *\n * var open = new Node({type: 'brace.open'});\n * var close = new Node({type: 'brace.close'});\n * console.log(utils.hasOpen(brace)); // false\n * console.log(utils.hasClose(brace)); // false\n *\n * brace.pushNode(open);\n * brace.pushNode(close);\n * console.log(utils.hasOpen(brace)); // true\n * console.log(utils.hasClose(brace)); // true\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8066complex0.1877void0.0012any[]0.0006number0.0003
.Punctuation
hasOpenAndCloseName.Otherany0.6631boolean0.2527void0.0307string0.0141complex0.0133
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7739Node0.0668never0.0104complex0.0074Element0.0057
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
utilsName.Otherany0.7828complex0.2111any[]0.0010void0.0009string0.0009
.Punctuation
hasOpenName.Otherany0.6895boolean0.1184complex0.1036string0.0381void0.0174
(Punctuation
nodeName.Otherany0.9123Node0.0220complex0.0075never0.0062string0.0045
)Punctuation
 Text.Whitespace
&&Operator
 Text.Whitespace
utilsName.Otherany0.8215complex0.1696void0.0012any[]0.0010string0.0009
.Punctuation
hasCloseName.Otherany0.6879boolean0.1542void0.0457complex0.0437string0.0344
(Punctuation
nodeName.Otherany0.9092Node0.0164complex0.0103never0.0073string0.0070
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Push the given `node` onto the `state.inside` array for the\n * given type. This array is used as a specialized "stack" for\n * only the given `node.type`.\n *\n * ```js\n * var state = { inside: {}};\n * var node = new Node({type: 'brace'});\n * utils.addType(state, node);\n * console.log(state.inside);\n * //=> { brace: [{type: 'brace'}] }\n * ```\n * @param {Object} `state` The `compiler.state` object or custom state object.\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Array} Returns the `state.inside` stack for the given type.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9113complex0.0822void0.0022string0.0005any[]0.0004
.Punctuation
addTypeName.Otherany0.7818void0.1540complex0.0224boolean0.0209string0.0039
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stateName.Otherany0.8949number0.0106string0.0076AppState0.0040boolean0.0039
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8905Node0.0223string0.0052complex0.0047never0.0040
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8924void0.0414complex0.0151Assert0.0116IAssertFunctions0.0041
(Punctuation
utilsName.Otherany0.9706complex0.0265void0.0004any[]0.0004string0.0003
.Punctuation
isNodeName.Otherany0.6069boolean0.2652complex0.0875string0.0157void0.0098
(Punctuation
nodeName.Otherany0.9268Node0.0185complex0.0048string0.0045never0.0040
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.8859void0.0239Assert0.0231complex0.0113IAssertFunctions0.0064
(Punctuation
isObjectName.Otherboolean0.8385any0.0719complex0.0540string0.0052number0.0045
(Punctuation
stateName.Otherany0.8657number0.0162string0.0115complex0.0114boolean0.0111
)Punctuation
,Punctuation
 Text.Whitespace
'expected state to be an object'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
typeKeyword.Reserved
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.9109Node0.0174complex0.0102string0.0057number0.0023
.Punctuation
parentName.Otherany0.9030string0.0125Node0.0073complex0.0066T0.0036
\n    Text.Whitespace
?Operator
 Text.Whitespace
node.parent.typeName.Other
\n    Text.Whitespace
:Operator
 Text.Whitespace
node.type.replaceKeyword.Type
(Punctuation
/\.open$/Literal.String.Regex
,Punctuation
 Text.Whitespace
''Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
stateName.Otherany0.6392complex0.0252State0.0154Node0.0109boolean0.0102
.Punctuation
hasOwnPropertyName.Otherany0.6951complex0.2777boolean0.0118string0.0059number0.0017
(Punctuation
'inside'Literal.String.Single
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
stateName.Otherany0.4610{}0.0276State0.0135complex0.0114Error0.0099
.Punctuation
insideName.Otherany0.6741Function0.0534complex0.0426{}0.0358Error0.0220
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
stateName.Otherany0.4272complex0.0663Error0.0237State0.0134{}0.0105
.Punctuation
insideName.Otherany0.4120complex0.1263Function0.1126Error0.0781boolean0.0362
.Punctuation
hasOwnPropertyName.Otherany0.5257complex0.4154boolean0.0329string0.0106number0.0033
(Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
stateName.Otherany0.5566Error0.0131complex0.0118State0.0086IState0.0072
.Punctuation
insideName.Otherany0.4405Function0.1254Error0.0698complex0.0489void0.0247
[Punctuation
typeKeyword.Reserved
]Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
arrName.Otherany0.6757any[]0.1519complex0.0594number[]0.0159string[]0.0149
 Text.Whitespace
=Operator
 Text.Whitespace
stateName.Otherany0.3216Error0.0272complex0.0191State0.0157Node0.0100
.Punctuation
insideName.Otherany0.3029Error0.1258Function0.0669complex0.0503{}0.0156
[Punctuation
typeKeyword.Reserved
]Punctuation
;Punctuation
\n  Text.Whitespace
arrName.Otherany[]0.6013any0.2117string[]0.0469number[]0.0279complex0.0151
.Punctuation
pushName.Othernumber0.9331any0.0619void0.0017string0.0011complex0.0006
(Punctuation
nodeName.Otherany0.8475Node0.0354never0.0109complex0.0062string0.0061
)Punctuation
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
arrName.Otherany[]0.5795any0.2448complex0.0630string[]0.0420number[]0.0173
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Remove the given `node` from the `state.inside` array for the\n * given type. This array is used as a specialized "stack" for\n * only the given `node.type`.\n *\n * ```js\n * var state = { inside: {}};\n * var node = new Node({type: 'brace'});\n * utils.addType(state, node);\n * console.log(state.inside);\n * //=> { brace: [{type: 'brace'}] }\n * utils.removeType(state, node);\n * //=> { brace: [] }\n * ```\n * @param {Object} `state` The `compiler.state` object or custom state object.\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @return {Array} Returns the `state.inside` stack for the given type.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9120complex0.0822void0.0017string0.0005any[]0.0004
.Punctuation
removeTypeName.Otherany0.8228void0.1136complex0.0229boolean0.0168string0.0052
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stateName.Otherany0.8241number0.0140string0.0104AppState0.0073State0.0061
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8384Node0.0361string0.0068Element0.0052never0.0044
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8731void0.0478Assert0.0149complex0.0146IAssertFunctions0.0070
(Punctuation
utilsName.Otherany0.9665complex0.0298void0.0005any[]0.0004string0.0004
.Punctuation
isNodeName.Otherany0.4978boolean0.3762complex0.0757string0.0217void0.0109
(Punctuation
nodeName.Otherany0.9043Node0.0253string0.0059complex0.0048Element0.0047
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.8755Assert0.0345void0.0178complex0.0102IAssertFunctions0.0085
(Punctuation
isObjectName.Otherboolean0.8361any0.0660complex0.0561string0.0064false0.0049
(Punctuation
stateName.Otherany0.7910number0.0200string0.0154boolean0.0128complex0.0118
)Punctuation
,Punctuation
 Text.Whitespace
'expected state to be an object'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
typeKeyword.Reserved
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.8859Node0.0233complex0.0131string0.0071Element0.0028
.Punctuation
parentName.Otherany0.8482string0.0184Node0.0152complex0.0074T0.0052
\n    Text.Whitespace
?Operator
 Text.Whitespace
node.parent.typeName.Other
\n    Text.Whitespace
:Operator
 Text.Whitespace
node.type.replaceKeyword.Type
(Punctuation
/\.close$/Literal.String.Regex
,Punctuation
 Text.Whitespace
''Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
stateName.Otherany0.2374complex0.0530State0.0260Node0.0237AppState0.0109
.Punctuation
insideName.Otherany0.3039complex0.1493Function0.0920Error0.0649boolean0.0384
.Punctuation
hasOwnPropertyName.Othercomplex0.5107any0.4164boolean0.0407string0.0167number0.0046
(Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
stateName.Otherany0.4574Error0.0165complex0.0137IState0.0097State0.0083
.Punctuation
insideName.Otherany0.3373Function0.1113Error0.0917complex0.0738void0.0156
[Punctuation
typeKeyword.Reserved
]Punctuation
.Punctuation
popName.Otherany0.9512string0.0272complex0.0050T0.0012number0.0012
(Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node.value` is an empty string, or `node.nodes` does\n * not contain any non-empty text nodes.\n *\n * ```js\n * var node = new Node({type: 'text'});\n * utils.isEmpty(node); //=> true\n * node.value = 'foo';\n * utils.isEmpty(node); //=> false\n * ```\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {Function} `fn`\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8850complex0.1055void0.0025string0.0003any[]0.0003
.Punctuation
isEmptyName.Otherboolean0.5765any0.3763void0.0280complex0.0077string0.0040
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.8959Node0.0279never0.0047Element0.0039complex0.0034
,Punctuation
 Text.Whitespace
fnName.Otherany0.8494Function0.0845string0.0156boolean0.0136complex0.0078
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8910void0.0354complex0.0183Assert0.0106IAssertFunctions0.0065
(Punctuation
utilsName.Otherany0.9601complex0.0352any[]0.0005void0.0003string0.0002
.Punctuation
isNodeName.Otherany0.4583boolean0.4140complex0.0928string0.0135void0.0047
(Punctuation
nodeName.Otherany0.8362Node0.0531never0.0099complex0.0073Element0.0067
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9992Math0.0001any0.0001ObjectConstructor0.0001complex0.0000
.Punctuation
isArrayName.Othercomplex0.9957any0.0017boolean0.0012any[]0.0005number0.0002
(Punctuation
nodeName.Otherany0.8520complex0.0319never0.0114Node0.0110Node<Node>0.0022
.Punctuation
nodesName.Otherany0.8471any[]0.0287complex0.0272string0.0057number0.0040
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
fnName.Otherany0.7891complex0.0998Function0.0254boolean0.0185never0.0117
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
fnName.Otherany0.7794Function0.0746void0.0316boolean0.0301complex0.0299
(Punctuation
nodeName.Otherany0.8831Node0.0262never0.0144string0.0059complex0.0036
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
!Operator
utilsName.Otherany0.7919complex0.2004any[]0.0011string0.0004void0.0003
.Punctuation
valueName.Otherany0.8104string0.0883boolean0.0641complex0.0231number0.0040
(Punctuation
nodeName.Otherany0.9436never0.0098Node0.0076string0.0071complex0.0032
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nodeName.Otherany0.8715Node0.0261complex0.0129never0.0095Node<Node>0.0023
.Punctuation
nodesName.Otherany0.8543any[]0.0385complex0.0106string[]0.0042string0.0038
.Punctuation
lengthName.Otherany0.7927number0.2041complex0.0010string0.0009boolean0.0004
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
childName.Otherany0.7969Node0.0783complex0.0108string0.0083T0.0054
 Text.Whitespace
ofKeyword
 Text.Whitespace
nodeName.Otherany0.8917Node0.0180complex0.0109Node<Node>0.0032never0.0026
.Punctuation
nodesName.Otherany0.9320any[]0.0087complex0.0087string0.0041boolean0.0021
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
utilsName.Otherany0.8894complex0.1038any[]0.0009{}0.0004boolean0.0003
.Punctuation
isEmptyName.Otherboolean0.9020any0.0915complex0.0028string0.0008number0.0006
(Punctuation
childName.Otherany0.9452Node0.0150string0.0109complex0.0047T0.0037
,Punctuation
 Text.Whitespace
fnName.Otherany0.9042boolean0.0176string0.0144complex0.0136Function0.0105
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if the `state.inside` stack for the given type exists\n * and has one or more nodes on it.\n *\n * ```js\n * var state = { inside: {}};\n * var node = new Node({type: 'brace'});\n * console.log(utils.isInsideType(state, 'brace')); //=> false\n * utils.addType(state, node);\n * console.log(utils.isInsideType(state, 'brace')); //=> true\n * utils.removeType(state, node);\n * console.log(utils.isInsideType(state, 'brace')); //=> false\n * ```\n * @param {Object} `state`\n * @param {String} `type`\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8754complex0.1168void0.0020any[]0.0006string0.0004
.Punctuation
isInsideTypeName.Otherany0.6909boolean0.1778void0.0856complex0.0217string0.0075
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stateName.Otherany0.7090string0.0181number0.0145AppState0.0115boolean0.0115
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8630void0.0413Assert0.0257complex0.0145IAssertFunctions0.0051
(Punctuation
isObjectName.Otherboolean0.8313complex0.0649any0.0582string0.0074false0.0068
(Punctuation
stateName.Otherany0.8172complex0.0153boolean0.0111string0.0104number0.0070
)Punctuation
,Punctuation
 Text.Whitespace
'expected state to be an object'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.8693Assert0.0338void0.0249complex0.0130IAssertFunctions0.0072
(Punctuation
isStringName.Othercomplex0.6645any0.2106boolean0.1107string0.0051number0.0018
(Punctuation
typeKeyword.Reserved
)Punctuation
,Punctuation
 Text.Whitespace
'expected type to be a string'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
stateName.Otherany0.7175complex0.0292boolean0.0227State0.0100Node0.0082
.Punctuation
hasOwnPropertyName.Otherany0.7789complex0.1721boolean0.0314string0.0085number0.0025
(Punctuation
'inside'Literal.String.Single
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
stateName.Otherany0.5162complex0.0768boolean0.0192Node0.0132State0.0126
.Punctuation
insideName.Otherany0.4812complex0.1408Function0.0722boolean0.0639Error0.0559
.Punctuation
hasOwnPropertyName.Otherany0.5873complex0.3095boolean0.0777string0.0131number0.0051
(Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
stateName.Otherany0.4377complex0.0205Error0.0123State0.0118IState0.0112
.Punctuation
insideName.Otherany0.3903Function0.1047Error0.0660complex0.0631boolean0.0175
[Punctuation
typeKeyword.Reserved
]Punctuation
.Punctuation
lengthName.Otherany0.8648number0.1328string0.0009complex0.0007boolean0.0003
 Text.Whitespace
>Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Returns true if `node` is either a child or grand-child of the given `type`,\n * or `state.inside[type]` is a non-empty array.\n *\n * ```js\n * var state = { inside: {}};\n * var node = new Node({type: 'brace'});\n * var open = new Node({type: 'brace.open'});\n * console.log(utils.isInside(state, open, 'brace')); //=> false\n * utils.pushNode(node, open);\n * console.log(utils.isInside(state, open, 'brace')); //=> true\n * ```\n * @param {Object} `state` Either the `compiler.state` object, if it exists, or a user-supplied state object.\n * @param {Object} `node` Instance of [snapdragon-node][]\n * @param {String} `type` The `node.type` to check for.\n * @return {Boolean}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.9057complex0.0840void0.0026any[]0.0004string0.0004
.Punctuation
isInsideName.Otherany0.6717void0.2278boolean0.0536complex0.0204number0.0048
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stateName.Otherany0.8469number0.0171string0.0110boolean0.0065AppState0.0058
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8481Node0.0419Element0.0044string0.0039never0.0036
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
assertName.Otherany0.8665void0.0474Assert0.0206complex0.0120IAssertFunctions0.0076
(Punctuation
utilsName.Otherany0.9705complex0.0256any[]0.0004string0.0003void0.0003
.Punctuation
isNodeName.Otherany0.5156boolean0.3732complex0.0635string0.0165void0.0065
(Punctuation
nodeName.Otherany0.8847Node0.0381complex0.0047string0.0042Element0.0041
)Punctuation
,Punctuation
 Text.Whitespace
'expected node to be an instance of Node'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.8610Assert0.0441void0.0202complex0.0076IAssertFunctions0.0075
(Punctuation
isObjectName.Otherboolean0.8560any0.0536complex0.0407false0.0080string[]0.0054
(Punctuation
stateName.Otherany0.8216boolean0.0163number0.0159complex0.0098string0.0095
)Punctuation
,Punctuation
 Text.Whitespace
'expected state to be an object'Literal.String.Single
)Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
ArrayName.BuiltinArrayConstructor0.9993Math0.0001ObjectConstructor0.0001any0.0001complex0.0000
.Punctuation
isArrayName.Othercomplex0.9895boolean0.0037any0.0037any[]0.0010number0.0005
(Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
varKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9918any0.0073string0.0002boolean0.0002complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
 Text.Whitespace
iName.Othernumber0.9804any0.0183string0.0004boolean0.0003void0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
typeKeyword.Reserved
.Punctuation
lengthName.Otherany0.5267number0.4691complex0.0013string0.0013boolean0.0004
;Punctuation
 Text.Whitespace
iName.Othernumber0.9251any0.0734string0.0005boolean0.0005complex0.0001
++Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
utilsName.Otherany0.7079complex0.2814any[]0.0020boolean0.0010void0.0007
.Punctuation
isInsideName.Otherboolean0.9184any0.0503complex0.0128string0.0053number0.0045
(Punctuation
stateName.Otherany0.7375number0.0493boolean0.0378string0.0207Node0.0119
,Punctuation
 Text.Whitespace
nodeName.Otherany0.9190Node0.0279complex0.0061string0.0050never0.0045
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
[Punctuation
iName.Othernumber0.9611any0.0349string0.0028boolean0.0005complex0.0001
]Punctuation
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
parentName.Otherany0.6207Node0.0923never0.0130string0.0074complex0.0068
 Text.Whitespace
=Operator
 Text.Whitespace
nodeName.Otherany0.8255Node0.0414complex0.0226never0.0077any[]0.0035
.Punctuation
parentName.Otherany0.6348Node0.0882string0.0137never0.0134complex0.0118
;Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.7330Node0.0419never0.0209string0.0203T0.0071
 Text.Whitespace
&&Operator
 Text.Whitespace
parentName.Otherany0.6437Node0.0542never0.0329complex0.0246T0.0168
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
===Operator
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
||Operator
 Text.Whitespace
utilsName.Otherany0.5899complex0.3937void0.0019any[]0.0015string0.0013
.Punctuation
isInsideTypeName.Otherboolean0.4523any0.3148complex0.0860string0.0669void0.0277
(Punctuation
stateName.Otherany0.6126string0.0752number0.0430complex0.0351boolean0.0319
,Punctuation
 Text.Whitespace
typeKeyword.Reserved
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeOfName.Otherboolean0.8972any0.0618complex0.0221string0.0099number0.0015
(Punctuation
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
'regexp'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
parentName.Otherany0.7247Node0.0403complex0.0248never0.0186string0.0185
 Text.Whitespace
&&Operator
 Text.Whitespace
parentName.Otherany0.6765complex0.0530Node0.0398never0.0214T0.0118
.Punctuation
typeKeyword.Reserved
 Text.Whitespace
&&Operator
 Text.Whitespace
typeKeyword.Reserved
.Punctuation
testName.Otherboolean0.9343any0.0541complex0.0036string0.0024number0.0022
(Punctuation
parentName.Otherany0.8250Node0.0276complex0.0109never0.0107T0.0082
.Punctuation
typeKeyword.Reserved
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
keysName.Otherstring[]0.9636any[]0.0155any0.0073string0.0067number[]0.0029
 Text.Whitespace
=Operator
 Text.Whitespace
ObjectName.BuiltinObjectConstructor0.9999any0.0000complex0.0000Object0.0000{}0.0000
.Punctuation
keysName.Otherstring[]0.9917any[]0.0021complex0.0017string0.0015any0.0009
(Punctuation
stateName.Otherany0.3217complex0.0833{}0.0212Object0.0182IState0.0105
.Punctuation
insideName.OtherFunction0.1841Error0.1238complex0.1100any0.0890void0.0669
)Punctuation
;Punctuation
\n    Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
lenName.Othernumber0.9059any0.0901string0.0019boolean0.0005complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
keysName.Otherstring[]0.8705any0.0651any[]0.0307string0.0067number[]0.0048
.Punctuation
lengthName.Othernumber0.7403any0.2554string0.0015complex0.0012void0.0004
;Punctuation
\n    Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
idxName.Othernumber0.9692any0.0298string0.0003boolean0.0003complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
-Operator
1Literal.Number.Float
;Punctuation
\n    Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
++Operator
idxName.Othernumber0.9712any0.0276string0.0002void0.0002complex0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
lenName.Othernumber0.9235any0.0737string0.0011complex0.0004boolean0.0004
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
keyName.Otherany0.8389string0.1464complex0.0077number0.0039any[]0.0005
 Text.Whitespace
=Operator
 Text.Whitespace
keysName.Otherstring[]0.7676any0.1255any[]0.0735complex0.0069string0.0056
[Punctuation
idxName.Othernumber0.9819any0.0159string0.0015complex0.0001boolean0.0001
]Punctuation
;Punctuation
\n      Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
valueName.Otherany0.9240string0.0319boolean0.0103number0.0076complex0.0076
 Text.Whitespace
=Operator
 Text.Whitespace
stateName.Otherany0.4839complex0.0304Node0.0162State0.0099Object0.0078
.Punctuation
insideName.Otherany0.5503complex0.0798Function0.0492Error0.0304Node0.0123
[Punctuation
keyName.Otherstring0.6933any0.2935number0.0073complex0.0038boolean0.0003
]Punctuation
;Punctuation
\n\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
ArrayName.BuiltinArrayConstructor0.9994ObjectConstructor0.0001any0.0000Math0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9927boolean0.0028any0.0019any[]0.0008number0.0004
(Punctuation
valueName.Otherany0.9481complex0.0229string0.0125any[]0.0077number0.0043
)Punctuation
 Text.Whitespace
&&Operator
 Text.Whitespace
valueName.Otherany0.8106string0.1086any[]0.0477string[]0.0153complex0.0062
.Punctuation
lengthName.Othernumber0.6225any0.3738string0.0013complex0.0012boolean0.0003
 Text.Whitespace
!==Operator
 Text.Whitespace
0Literal.Number.Float
 Text.Whitespace
&&Operator
 Text.Whitespace
typeKeyword.Reserved
.Punctuation
testName.Otherboolean0.9531any0.0356number0.0030string0.0028complex0.0027
(Punctuation
keyName.Otherany0.7759string0.1921complex0.0137number0.0133never0.0009
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Get the last `n` element from the given `array`. Used for getting\n * a node from `node.nodes.`\n *\n * @param {Array} `array`\n * @param {Number} `n`\n * @return {undefined}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8649complex0.1283any[]0.0005void0.0004string0.0004
.Punctuation
lastName.Otherany0.9399number0.0253string0.0183boolean0.0049complex0.0033
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
arrName.Otherany0.6212any[]0.1517complex0.0508string[]0.0314number[]0.0186
,Punctuation
 Text.Whitespace
nName.Othernumber0.5569any0.3992string0.0217complex0.0061never0.0029
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
ArrayName.BuiltinArrayConstructor0.9995ObjectConstructor0.0000Math0.0000any0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9966any0.0012any[]0.0009boolean0.0002number0.0002
(Punctuation
arrName.Otherany0.5606any[]0.2630complex0.1120string[]0.0138number[]0.0057
)Punctuation
 Text.Whitespace
?Operator
 Text.Whitespace
arrName.Otherany[]0.7276any0.0851complex0.0757string[]0.0313number[]0.0238
[Punctuation
arrName.Otherany[]0.7303any0.1028string[]0.0998complex0.0195number[]0.0083
.Punctuation
lengthName.Othernumber0.8962any0.1012string0.0010complex0.0008void0.0002
 Text.Whitespace
-Operator
 Text.Whitespace
(Punctuation
nName.Othernumber0.8537any0.1286string0.0133complex0.0011never0.0005
 Text.Whitespace
||Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
]Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
utilsName.Otherany0.9368complex0.0564any[]0.0013void0.0003string0.0002
.Punctuation
lastNodeName.Otherany0.9540boolean0.0154string0.0122number0.0058complex0.0048
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
nodeName.Otherany0.7243Node0.1103never0.0151Element0.0131string0.0085
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
ArrayName.BuiltinArrayConstructor0.9996Math0.0000ObjectConstructor0.0000any0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9967any0.0016any[]0.0007boolean0.0003number0.0001
(Punctuation
nodeName.Otherany0.8656complex0.0237Node0.0163never0.0075any[]0.0036
.Punctuation
nodesName.Otherany0.8873any[]0.0381complex0.0223string0.0040Node[]0.0034
)Punctuation
 Text.Whitespace
?Operator
 Text.Whitespace
utilsName.Otherany0.7089complex0.2807any[]0.0029string0.0003{}0.0003
.Punctuation
lastName.Otherany0.8665string0.0511complex0.0262number0.0150boolean0.0090
(Punctuation
nodeName.Otherany0.8930Node0.0232complex0.0061never0.0054Error0.0023
.Punctuation
nodesName.Otherany0.9153any[]0.0221string0.0135complex0.0049number0.0022
)Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Cast the given `value` to an array.\n *\n * ```js\n * console.log(utils.arrayify(''));\n * //=> []\n * console.log(utils.arrayify('foo'));\n * //=> ['foo']\n * console.log(utils.arrayify(['foo']));\n * //=> ['foo']\n * ```\n * @param {any} `value`\n * @return {Array}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8611complex0.1280any[]0.0023void0.0014string0.0003
.Punctuation
arrayifyName.Otherany0.8358boolean0.0670void0.0411string0.0267complex0.0084
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
valueName.Otherany0.9157string0.0712number0.0039complex0.0024any[]0.0015
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
valueName.Otherany0.9680string0.0208number0.0034complex0.0034boolean0.0011
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
valueName.Otherany0.8618string0.1327number0.0020complex0.0009boolean0.0007
 Text.Whitespace
!==Operator
 Text.Whitespace
''Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
[Punctuation
valueName.Otherstring0.5804any0.3931number0.0179never0.0025boolean0.0014
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9997any0.0000ObjectConstructor0.0000Math0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9946any0.0020any[]0.0016boolean0.0006number0.0002
(Punctuation
valueName.Otherany0.9415any[]0.0244string0.0133complex0.0098number0.0057
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
valueName.Otherany0.8627string0.1168boolean0.0052any[]0.0046number0.0041
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Convert the given `value` to a string by joining with `,`. Useful\n * for creating a cheerio/CSS/DOM-style selector from a list of strings.\n *\n * @param {any} `value`\n * @return {Array}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.7097complex0.2848any[]0.0018void0.0005string0.0003
.Punctuation
stringifyName.Otherstring0.5081any0.4735complex0.0110boolean0.0025number0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
valueName.Otherany0.8083string0.1788number0.0041complex0.0022any[]0.0014
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
utilsName.Otherany0.8549complex0.1359any[]0.0046string0.0006string[]0.0004
.Punctuation
arrayifyName.Otherany0.7749string0.1055string[]0.0295boolean0.0268complex0.0267
(Punctuation
valueName.Otherany0.6071string0.3808number0.0041boolean0.0024any[]0.0012
)Punctuation
.Punctuation
joinName.Otherstring0.6969any0.2953complex0.0022number0.0017boolean0.0011
(Punctuation
','Literal.String.Single
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Ensure that the given value is a string and call `.trim()` on it,\n * or return an empty string.\n *\n * @param {String} `str`\n * @return {String}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
utilsName.Otherany0.8267complex0.1578string0.0016any[]0.0014void0.0010
.Punctuation
trimName.Otherstring0.8674any0.1264number0.0027boolean0.0013complex0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
strName.Otherany0.5187string0.4751complex0.0020number0.0017boolean0.0005
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
strName.Otherany0.8103string0.1667complex0.0166boolean0.0024number0.0013
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
 Text.Whitespace
?Operator
 Text.Whitespace
strName.Otherstring0.6161any0.3813complex0.0008number0.0006boolean0.0004
.Punctuation
trimName.Otherstring0.8721any0.1244complex0.0015number0.0010boolean0.0003
(Punctuation
)Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Return true if value is an object\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
isObjectName.Otherboolean0.9808any0.0108complex0.0022string0.0022number0.0011
(Punctuation
valueName.Otherany0.8348string0.1381boolean0.0114number0.0101complex0.0008
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
typeOfName.Otherboolean0.7070any0.1891string0.0770complex0.0079number0.0064
(Punctuation
valueName.Otherany0.8385string0.1457boolean0.0052number0.0044complex0.0014
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
'object'Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Return true if value is a string\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
isStringName.Otherboolean0.6006any0.2013complex0.1819string0.0052number0.0037
(Punctuation
valueName.Otherany0.9283string0.0578number0.0069boolean0.0034complex0.0011
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
valueName.Otherany0.9462string0.0272boolean0.0077complex0.0076number0.0043
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Return true if value is a function\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
isFunctionName.Otherboolean0.8948any0.0477complex0.0469string0.0025number0.0010
(Punctuation
valueName.Otherany0.9558string0.0252boolean0.0087number0.0039complex0.0018
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
valueName.Otherany0.9419string0.0291complex0.0095boolean0.0059number0.0044
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Return true if value is an array\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
isArrayName.Otherboolean0.4928complex0.3918any0.0597any[]0.0162void0.0041
(Punctuation
valueName.Otherany0.9157string0.0607number0.0097boolean0.0046complex0.0028
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
ArrayName.BuiltinArrayConstructor0.9997Math0.0000any0.0000ObjectConstructor0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9936any0.0031boolean0.0010any[]0.0005void0.0005
(Punctuation
valueName.Otherany0.9220any[]0.0211string0.0201complex0.0156number0.0076
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Shim to ensure the `.append` methods work with any version of snapdragon\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
appendName.Othervoid0.4565any0.3450boolean0.0765complex0.0352this0.0072
(Punctuation
compilerName.Otherany0.9609string0.0022boolean0.0015number0.0012Compiler0.0009
,Punctuation
 Text.Whitespace
valueName.Otherany0.9334string0.0527number0.0051boolean0.0026never0.0009
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8025Node0.0641never0.0117string0.0042Element0.0031
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
compilerName.Otherany0.9613complex0.0013number0.0012boolean0.0010Compiler0.0009
.Punctuation
appendName.Otherany0.8799complex0.0499boolean0.0229void0.0177string0.0026
 Text.Whitespace
!==Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
compilerName.Otherany0.9868number0.0009void0.0005string0.0003complex0.0003
.Punctuation
emitName.Otherany0.9612complex0.0212void0.0068boolean0.0033number0.0017
(Punctuation
valueName.Otherany0.8107string0.1591number0.0111complex0.0040boolean0.0039
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8159Node0.0462never0.0370string0.0054Error0.0052
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
compilerName.Otherany0.9816number0.0008void0.0006string0.0004boolean0.0004
.Punctuation
appendName.Otherany0.7480void0.1643complex0.0508boolean0.0035Promise<any>0.0018
(Punctuation
valueName.Otherany0.8392string0.1349complex0.0047never0.0038number0.0035
,Punctuation
 Text.Whitespace
nodeName.Otherany0.8881never0.0245Node0.0212string0.0119complex0.0041
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Simplified assertion. Throws an error is `value` is falsey.\n */Comment.Multiline
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
assertName.Othervoid0.4359any0.4219complex0.0115Assert0.0066IAssertFunctions0.0050
(Punctuation
valueName.Otherany0.8997string0.0866number0.0036boolean0.0021Error0.0014
,Punctuation
 Text.Whitespace
messageName.Otherstring0.9150any0.0756Error0.0016number0.0010string[]0.0007
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
valueName.Otherany0.8302string0.1396boolean0.0094complex0.0044never0.0036
)Punctuation
 Text.Whitespace
throwKeywordany0.6358Error0.2956complex0.0130string0.0128{}0.0093
 Text.Whitespace
newOperator.WordError0.4419any0.2598ErrorConstructor0.2013string0.0263never0.0057
 Text.Whitespace
ErrorName.ExceptionErrorConstructor0.9999Error0.0000any0.0000never0.0000complex0.0000
(Punctuation
messageName.Otherstring0.8779any0.1070Error0.0054complex0.0015string[]0.0014
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
expectName.Otherany0.9305complex0.0527void0.0059boolean0.0008ExpectStatic0.0008
(Punctuation
nodeName.Otherany0.6807Node0.1285never0.0297Element0.0142Error0.0080
,Punctuation
 Text.Whitespace
nameName.Otherstring0.8120any0.1810never0.0016complex0.0008number0.0005
,Punctuation
 Text.Whitespace
NodeName.Otherany0.7605complex0.1098Node0.0270string0.0161Object0.0053
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
isNodeName.Otherboolean0.8282any0.1436complex0.0099string0.0048void0.0047
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
NodeName.Otherany0.5431complex0.3228Node0.0238string0.0127boolean0.0057
 Text.Whitespace
&&Operator
 Text.Whitespace
NodeName.Othercomplex0.5248any0.3574Node0.0235void0.0032boolean0.0031
.Punctuation
isNodeName.Otherboolean0.9211any0.0454complex0.0160string0.0116void0.0017
)Punctuation
 Text.Whitespace
?Operator
 Text.Whitespace
Node.isNodeName.Other
 Text.Whitespace
:Operator
 Text.Whitespace
utils.isNodeKeyword.Type
;Punctuation
\n  Text.Whitespace
assertName.Otherany0.8275void0.0917Assert0.0184complex0.0076IAssertFunctions0.0076
(Punctuation
isNodeName.Otherany0.7805boolean0.1509complex0.0293string0.0097void0.0080
(Punctuation
nodeName.Otherany0.7457Node0.1152never0.0144Element0.0121string0.0094
)Punctuation
,Punctuation
 Text.Whitespace
`Literal.String.Backtick
expected Literal.String.Backtickstring0.8990any0.0696RegExp0.0100number0.0081boolean0.0031
${Literal.String.Interpol
nameName.Otherstring0.6551any0.3327complex0.0041number0.0016never0.0012
}Literal.String.Interpol
 to be an instance of NodeLiteral.String.Backtick
`Literal.String.Backtick
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
