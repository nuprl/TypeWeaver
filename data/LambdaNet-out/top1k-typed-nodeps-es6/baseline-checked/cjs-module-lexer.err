build.ts(2,20): error TS2307: Cannot find module 'terser' or its corresponding type declarations.
build.ts(9,7): error TS2322: Type 'Buffer' is not assignable to type 'string'.
build.ts(13,87): error TS2554: Expected 0 arguments, but got 1.
build.ts(18,44): error TS2339: Property 'version' does not exist on type 'object'.
build.ts(22,58): error TS2339: Property 'code' does not exist on type 'object'.
lexer.ts(14,18): error TS2314: Generic type 'Set<T>' requires 1 type argument(s).
lexer.ts(17,25): error TS2304: Cannot find name 'Void'.
lexer.ts(30,3): error TS2740: Type 'Set<unknown>' is missing the following properties from type 'HTMLElement': accessKey, accessKeyLabel, autocapitalize, dir, and 277 more.
lexer.ts(32,3): error TS2739: Type 'Set<unknown>' is missing the following properties from type 'Error': name, message
lexer.ts(43,17): error TS2345: Argument of type 'string' is not assignable to parameter of type 'Function'.
lexer.ts(50,41): error TS2488: Type 'HTMLElement' must have a '[Symbol.iterator]()' method that returns an iterator.
lexer.ts(50,140): error TS2488: Type 'Error' must have a '[Symbol.iterator]()' method that returns an iterator.
lexer.ts(58,41): error TS2345: Argument of type 'object' is not assignable to parameter of type 'string'.
lexer.ts(76,7): error TS2322: Type 'string' is not assignable to type 'object'.
lexer.ts(86,3): error TS2322: Type 'Function' is not assignable to type 'string'.
lexer.ts(118,31): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(129,35): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(141,33): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(251,59): error TS2304: Cannot find name 'Void'.
lexer.ts(261,13): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(262,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(264,29): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
lexer.ts(266,43): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
lexer.ts(291,3): error TS2304: Cannot find name 'ch'.
lexer.ts(292,7): error TS2304: Cannot find name 'ch'.
lexer.ts(294,3): error TS2304: Cannot find name 'ch'.
lexer.ts(295,7): error TS2304: Cannot find name 'ch'.
lexer.ts(297,3): error TS2304: Cannot find name 'ch'.
lexer.ts(298,7): error TS2304: Cannot find name 'ch'.
lexer.ts(301,5): error TS2304: Cannot find name 'ch'.
lexer.ts(302,9): error TS2304: Cannot find name 'ch'.
lexer.ts(304,5): error TS2304: Cannot find name 'ch'.
lexer.ts(306,7): error TS2304: Cannot find name 'ch'.
lexer.ts(308,3): error TS2304: Cannot find name 'ch'.
lexer.ts(309,7): error TS2304: Cannot find name 'ch'.
lexer.ts(311,3): error TS2304: Cannot find name 'ch'.
lexer.ts(312,7): error TS2304: Cannot find name 'ch'.
lexer.ts(314,3): error TS2304: Cannot find name 'ch'.
lexer.ts(315,7): error TS2304: Cannot find name 'ch'.
lexer.ts(317,3): error TS2304: Cannot find name 'ch'.
lexer.ts(319,3): error TS2304: Cannot find name 'ch'.
lexer.ts(320,7): error TS2304: Cannot find name 'ch'.
lexer.ts(322,3): error TS2304: Cannot find name 'ch'.
lexer.ts(325,3): error TS2304: Cannot find name 'ch'.
lexer.ts(326,7): error TS2304: Cannot find name 'ch'.
lexer.ts(331,54): error TS2304: Cannot find name 'Void'.
lexer.ts(335,7): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(338,9): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(344,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(349,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(352,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(352,31): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(357,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(360,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(363,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(367,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(370,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(373,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(377,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(381,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(382,20): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(382,31): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(386,18): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(390,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(393,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(398,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(401,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(404,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(407,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(410,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(416,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(422,20): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(425,17): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(425,35): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(429,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(433,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(437,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(440,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(444,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(447,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(448,20): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(448,31): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(454,34): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(457,22): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(462,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(469,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(473,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(476,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(480,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(483,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(486,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(493,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(496,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(499,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(502,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(509,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(513,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(513,33): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(518,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(521,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(527,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(530,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(530,33): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(535,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(538,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(541,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(544,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(549,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(553,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(559,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(562,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(565,19): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(569,19): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(572,21): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(588,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(593,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(598,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(604,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(607,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(613,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(619,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(622,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(625,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(628,19): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(635,18): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(639,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(639,33): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(647,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(651,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(654,17): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(659,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(662,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(665,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(671,19): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(677,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(686,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(692,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(695,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(701,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(707,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(710,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(716,18): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(720,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(723,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(726,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(731,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(737,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(740,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(743,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(746,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(749,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(752,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(755,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(758,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(761,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(766,17): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(769,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(772,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(775,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(778,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(784,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(790,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(793,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(797,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(800,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(804,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(807,15): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(810,15): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(817,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(820,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(824,21): error TS2339: Property 'add' does not exist on type 'Error'.
lexer.ts(824,32): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(837,7): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(840,9): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(847,7): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(857,45): error TS2304: Cannot find name 'Void'.
lexer.ts(861,7): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(864,9): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(872,54): error TS2304: Cannot find name 'Void'.
lexer.ts(878,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(885,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(886,20): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(886,31): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(893,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(896,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(896,29): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(901,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(904,13): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(905,18): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(905,29): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(910,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(912,23): error TS2339: Property 'size' does not exist on type 'Error'.
lexer.ts(913,11): error TS2322: Type 'Set<unknown>' is not assignable to type 'Error'.
lexer.ts(917,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(923,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(924,27): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(937,9): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(941,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(941,29): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(945,13): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(947,18): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(948,25): error TS2339: Property 'add' does not exist on type 'Error'.
lexer.ts(948,36): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(950,18): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(951,25): error TS2339: Property 'add' does not exist on type 'Error'.
lexer.ts(951,36): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(954,15): error TS2740: Type '{}' is missing the following properties from type 'Function': apply, call, bind, prototype, and 6 more.
lexer.ts(954,48): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(965,37): error TS2304: Cannot find name 'Void'.
lexer.ts(973,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(981,9): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(983,16): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(983,27): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(985,14): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(987,66): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(996,14): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(996,32): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(1001,11): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(1009,9): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(1010,18): error TS2339: Property 'add' does not exist on type 'HTMLElement'.
lexer.ts(1010,29): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
lexer.ts(1018,9): error TS2367: This condition will always return 'false' since the types 'string' and 'number' have no overlap.
lexer.ts(1021,9): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lexer.ts(1063,7): error TS2740: Type 'RegExp' is missing the following properties from type 'HTMLElement': accessKey, accessKeyLabel, autocapitalize, dir, and 277 more.
lexer.ts(1064,7): error TS2322: Type 'RegExp' is not assignable to type 'HTMLElement'.
lexer.ts(1100,70): error TS2339: Property 'test' does not exist on type 'HTMLElement'.
lexer.ts(1101,7): error TS2367: This condition will always return 'false' since the types 'number' and 'boolean' have no overlap.
lexer.ts(1114,65): error TS2339: Property 'test' does not exist on type 'HTMLElement'.
lexer.ts(1115,7): error TS2367: This condition will always return 'false' since the types 'number' and 'boolean' have no overlap.
lexer.ts(1121,30): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'number'.
lexer.ts(1121,39): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.
lexer.ts(1123,23): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(1125,30): error TS2345: Argument of type 'boolean' is not assignable to parameter of type 'number'.
lexer.ts(1126,27): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lexer.ts(1128,14): error TS2367: This condition will always return 'false' since the types 'number' and 'string' have no overlap.
lexer.ts(1140,7): error TS2365: Operator '<' cannot be applied to types 'string' and 'number'.
lexer.ts(1152,37): error TS2304: Cannot find name 'Void'.
lexer.ts(1158,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1162,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1169,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1170,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1171,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1172,10): error TS2678: Type 'number' is not comparable to type 'string'.
lexer.ts(1183,37): error TS2314: Generic type 'Promise<T>' requires 1 type argument(s).
lexer.ts(1187,39): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
lexer.ts(1203,9): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(1206,7): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(1209,3): error TS2322: Type 'number' is not assignable to type 'string'.
lexer.ts(1212,29): error TS2304: Cannot find name 'Void'.
lexer.ts(1226,3): error TS2304: Cannot find name 'syntaxError'.
lexer.ts(1229,27): error TS2304: Cannot find name 'Void'.
lexer.ts(1240,26): error TS2304: Cannot find name 'Void'.
lexer.ts(1248,41): error TS2304: Cannot find name 'Void'.
lexer.ts(1277,32): error TS2304: Cannot find name 'Void'.
lexer.ts(1435,20): error TS2314: Generic type 'Promise<T>' requires 1 type argument(s).
src/lexer.ts(12,34): error TS2339: Property '__heap_base' does not exist on type 'HTMLElement'.
src/lexer.ts(12,60): error TS2339: Property '__heap_base' does not exist on type 'HTMLElement'.
src/lexer.ts(12,90): error TS2339: Property 'memory' does not exist on type 'HTMLElement'.
src/lexer.ts(14,10): error TS2339: Property 'memory' does not exist on type 'HTMLElement'.
src/lexer.ts(16,29): error TS2339: Property 'sa' does not exist on type 'HTMLElement'.
src/lexer.ts(17,57): error TS2339: Property 'memory' does not exist on type 'HTMLElement'.
src/lexer.ts(17,72): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
src/lexer.ts(19,13): error TS2339: Property 'parseCJS' does not exist on type 'HTMLElement'.
src/lexer.ts(20,62): error TS2339: Property 'e' does not exist on type 'HTMLElement'.
src/lexer.ts(20,90): error TS2339: Property 'e' does not exist on type 'HTMLElement'.
src/lexer.ts(20,122): error TS2339: Property 'e' does not exist on type 'HTMLElement'.
src/lexer.ts(20,158): error TS2339: Property 'e' does not exist on type 'HTMLElement'.
src/lexer.ts(20,183): error TS2339: Property 'e' does not exist on type 'HTMLElement'.
src/lexer.ts(22,7): error TS2322: Type 'Set<unknown>' is not assignable to type 'Error'.
src/lexer.ts(22,35): error TS2322: Type 'Set<unknown>' is not assignable to type 'Error'.
src/lexer.ts(22,65): error TS2322: Type 'Set<unknown>' is not assignable to type 'Error'.
src/lexer.ts(24,15): error TS2339: Property 'rre' does not exist on type 'HTMLElement'.
src/lexer.ts(25,11): error TS2322: Type 'object' is not assignable to type 'string'.
src/lexer.ts(25,38): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
src/lexer.ts(25,56): error TS2339: Property 'res' does not exist on type 'HTMLElement'.
src/lexer.ts(25,68): error TS2339: Property 'ree' does not exist on type 'HTMLElement'.
src/lexer.ts(27,17): error TS2339: Property 'add' does not exist on type 'Error'.
src/lexer.ts(29,15): error TS2339: Property 'ru' does not exist on type 'HTMLElement'.
src/lexer.ts(30,19): error TS2339: Property 'add' does not exist on type 'Error'.
src/lexer.ts(30,30): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
src/lexer.ts(30,48): error TS2339: Property 'us' does not exist on type 'HTMLElement'.
src/lexer.ts(30,59): error TS2339: Property 'ue' does not exist on type 'HTMLElement'.
src/lexer.ts(31,15): error TS2339: Property 're' does not exist on type 'HTMLElement'.
src/lexer.ts(32,9): error TS2322: Type 'object' is not assignable to type 'string'.
src/lexer.ts(32,34): error TS2345: Argument of type 'string' is not assignable to parameter of type 'object'.
src/lexer.ts(32,52): error TS2339: Property 'es' does not exist on type 'HTMLElement'.
src/lexer.ts(32,63): error TS2339: Property 'ee' does not exist on type 'HTMLElement'.
src/lexer.ts(33,49): error TS2339: Property 'has' does not exist on type 'Error'.
src/lexer.ts(34,7): error TS2304: Cannot find name 'add'.
src/lexer.ts(37,25): error TS2488: Type 'Error' must have a '[Symbol.iterator]()' method that returns an iterator.
src/lexer.ts(37,50): error TS2488: Type 'Error' must have a '[Symbol.iterator]()' method that returns an iterator.
src/lexer.ts(43,41): error TS2345: Argument of type 'object' is not assignable to parameter of type 'string'.
src/lexer.ts(61,7): error TS2322: Type 'string' is not assignable to type 'object'.
src/lexer.ts(70,50): error TS2304: Cannot find name 'Void'.
src/lexer.ts(79,50): error TS2304: Cannot find name 'Void'.
src/lexer.ts(89,5): error TS2322: Type 'Function' is not assignable to type 'boolean'.
src/lexer.ts(90,3): error TS2322: Type 'Promise<void>' is not assignable to type 'boolean'.
src/lexer.ts(90,10): error TS2740: Type 'Promise<void>' is missing the following properties from type 'Function': apply, call, bind, prototype, and 6 more.
src/lexer.ts(91,11): error TS2322: Type 'Module' is not assignable to type 'string'.
src/lexer.ts(96,5): error TS2740: Type 'Exports' is missing the following properties from type 'HTMLElement': accessKey, accessKeyLabel, autocapitalize, dir, and 277 more.

