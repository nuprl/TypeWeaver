dist/loglevel.min.ts(2,2): error TS1345: An expression of type 'void' cannot be tested for truthiness.
dist/loglevel.min.ts(2,61): error TS2304: Cannot find name 'define'.
dist/loglevel.min.ts(2,69): error TS2304: Cannot find name 'define'.
dist/loglevel.min.ts(2,80): error TS2304: Cannot find name 'define'.
dist/loglevel.min.ts(2,145): error TS2349: This expression is not callable.
  Type 'String' has no call signatures.
dist/loglevel.min.ts(2,155): error TS2349: This expression is not callable.
  Type 'String' has no call signatures.
dist/loglevel.min.ts(2,165): error TS2345: Argument of type '() => any' is not assignable to parameter of type 'string'.
dist/loglevel.min.ts(2,491): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[message?: any, ...optionalParams: any[]]'.
dist/loglevel.min.ts(2,701): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Console'.
  No index signature with a parameter of type 'string' was found on type 'Console'.
dist/loglevel.min.ts(2,842): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,856): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,882): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,891): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,986): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,996): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,1010): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,1087): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,1092): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[a: any, b: any, c: any]'.
dist/loglevel.min.ts(2,1220): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1251): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1291): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1398): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1419): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1483): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1556): error TS2531: Object is possibly 'null'.
dist/loglevel.min.ts(2,1669): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1700): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1748): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,1864): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.min.ts(2,1962): error TS2322: Type 'undefined' is not assignable to type 'string'.
dist/loglevel.min.ts(2,2325): error TS2322: Type 'string' is not assignable to type 'number'.
dist/loglevel.min.ts(2,2329): error TS2367: This condition will always return 'true' since the types 'boolean' and 'string' have no overlap.
dist/loglevel.min.ts(2,2475): error TS1345: An expression of type 'void' cannot be tested for truthiness.
dist/loglevel.min.ts(2,2723): error TS2322: Type '() => void' is not assignable to type 'void'.
dist/loglevel.min.ts(2,2759): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,2778): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,2823): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,2895): error TS2554: Expected 3 arguments, but got 0.
dist/loglevel.min.ts(2,2895): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
dist/loglevel.min.ts(2,3066): error TS7053: Element implicitly has an 'any' type because expression of type 'string | symbol' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
dist/loglevel.min.ts(2,3084): error TS7053: Element implicitly has an 'any' type because expression of type 'string | symbol' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
dist/loglevel.min.ts(2,3089): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
dist/loglevel.min.ts(2,3152): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,3163): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,3226): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,3238): error TS2304: Cannot find name 'window'.
dist/loglevel.min.ts(2,3255): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(4,16): error TS2304: Cannot find name 'define'.
dist/loglevel.ts(4,41): error TS2304: Cannot find name 'define'.
dist/loglevel.ts(5,9): error TS2304: Cannot find name 'define'.
dist/loglevel.ts(15,22): error TS2322: Type '() => void' is not assignable to type 'void'.
dist/loglevel.ts(16,9): error TS2322: Type 'string' is not assignable to type 'RegExp'.
dist/loglevel.ts(17,26): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(17,33): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(17,63): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(17,70): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(18,32): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(50,44): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[message?: any, ...optionalParams: any[]]'.
dist/loglevel.ts(66,13): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(70,20): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Console'.
  No index signature with a parameter of type 'string' was found on type 'Console'.
dist/loglevel.ts(85,13): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(87,17): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(91,9): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(91,20): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(97,16): error TS2322: Type '() => void' is not assignable to type 'void'.
dist/loglevel.ts(98,17): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(99,44): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(100,17): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(100,40): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(110,54): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(110,60): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[methodName: string, level: number, loggerName: number]'.
dist/loglevel.ts(114,17): error TS2526: A 'this' type is available only in a non-static member of a class or interface.
dist/loglevel.ts(114,24): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
dist/loglevel.ts(122,9): error TS2322: Type 'undefined' is not assignable to type 'string'.
dist/loglevel.ts(126,47): error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
dist/loglevel.ts(128,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(128,22): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(132,15): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(138,15): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(146,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(146,22): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(149,29): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(153,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(155,40): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(156,23): error TS2322: Type 'number' is not assignable to type 'string'.
dist/loglevel.ts(158,23): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
dist/loglevel.ts(159,37): error TS2531: Object is possibly 'null'.
dist/loglevel.ts(159,66): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
dist/loglevel.ts(173,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(173,22): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(177,15): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(183,15): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(211,19): error TS2367: This condition will always return 'true' since the types 'string' and 'boolean' have no overlap.
dist/loglevel.ts(212,42): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
dist/loglevel.ts(214,55): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
dist/loglevel.ts(215,19): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(225,16): error TS1345: An expression of type 'void' cannot be tested for truthiness.
dist/loglevel.ts(257,34): error TS2554: Expected 3 arguments, but got 0.
dist/loglevel.ts(257,34): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
dist/loglevel.ts(260,19): error TS2339: Property 'getLogger' does not exist on type 'Console'.
dist/loglevel.ts(260,65): error TS2749: 'Logger' refers to a value, but is being used as a type here. Did you mean 'typeof Logger'?
dist/loglevel.ts(265,27): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
dist/loglevel.ts(267,20): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
dist/loglevel.ts(267,43): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
dist/loglevel.ts(268,33): error TS2339: Property 'getLevel' does not exist on type 'Console'.
dist/loglevel.ts(268,59): error TS2339: Property 'methodFactory' does not exist on type 'Console'.
dist/loglevel.ts(274,22): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(274,29): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(274,57): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(275,19): error TS2339: Property 'noConflict' does not exist on type 'Console'.
dist/loglevel.ts(276,13): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
dist/loglevel.ts(276,20): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(277,16): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(278,13): error TS2304: Cannot find name 'window'.
dist/loglevel.ts(284,19): error TS2339: Property 'getLoggers' does not exist on type 'Console'.
dist/loglevel.ts(285,9): error TS2322: Type '{}' is not assignable to type 'void'.
dist/loglevel.ts(289,5): error TS7053: Element implicitly has an 'any' type because expression of type '"default"' can't be used to index type 'Console'.
  Property 'default' does not exist on type 'Console'.
lib/loglevel.ts(9,16): error TS2304: Cannot find name 'define'.
lib/loglevel.ts(9,41): error TS2304: Cannot find name 'define'.
lib/loglevel.ts(10,9): error TS2304: Cannot find name 'define'.
lib/loglevel.ts(20,22): error TS2322: Type '() => void' is not assignable to type 'void'.
lib/loglevel.ts(21,9): error TS2322: Type 'string' is not assignable to type 'RegExp'.
lib/loglevel.ts(22,26): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(22,33): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(22,63): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(22,70): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(23,32): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(55,44): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[message?: any, ...optionalParams: any[]]'.
lib/loglevel.ts(71,13): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(75,20): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type 'Console'.
  No index signature with a parameter of type 'string' was found on type 'Console'.
lib/loglevel.ts(90,13): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(92,17): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(96,9): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(96,20): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(102,16): error TS2322: Type '() => void' is not assignable to type 'void'.
lib/loglevel.ts(103,17): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(104,44): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(105,17): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(105,40): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(115,54): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(115,60): error TS2345: Argument of type 'IArguments' is not assignable to parameter of type '[methodName: string, level: number, loggerName: number]'.
lib/loglevel.ts(119,17): error TS2526: A 'this' type is available only in a non-static member of a class or interface.
lib/loglevel.ts(119,24): error TS2683: 'this' implicitly has type 'any' because it does not have a type annotation.
lib/loglevel.ts(127,9): error TS2322: Type 'undefined' is not assignable to type 'string'.
lib/loglevel.ts(131,47): error TS7015: Element implicitly has an 'any' type because index expression is not of type 'number'.
lib/loglevel.ts(133,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(133,22): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(137,15): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(143,15): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(151,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(151,22): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(154,29): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(158,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(160,40): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(161,23): error TS2322: Type 'number' is not assignable to type 'string'.
lib/loglevel.ts(163,23): error TS2367: This condition will always return 'true' since the types 'string' and 'number' have no overlap.
lib/loglevel.ts(164,37): error TS2531: Object is possibly 'null'.
lib/loglevel.ts(164,66): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
lib/loglevel.ts(178,15): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(178,22): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(182,15): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(188,15): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(216,19): error TS2367: This condition will always return 'true' since the types 'string' and 'boolean' have no overlap.
lib/loglevel.ts(217,42): error TS2345: Argument of type 'number' is not assignable to parameter of type 'string'.
lib/loglevel.ts(219,55): error TS2345: Argument of type 'string' is not assignable to parameter of type 'number'.
lib/loglevel.ts(220,19): error TS2367: This condition will always return 'false' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(230,16): error TS1345: An expression of type 'void' cannot be tested for truthiness.
lib/loglevel.ts(262,34): error TS2554: Expected 3 arguments, but got 0.
lib/loglevel.ts(262,34): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
lib/loglevel.ts(265,19): error TS2339: Property 'getLogger' does not exist on type 'Console'.
lib/loglevel.ts(265,65): error TS2749: 'Logger' refers to a value, but is being used as a type here. Did you mean 'typeof Logger'?
lib/loglevel.ts(270,27): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
lib/loglevel.ts(272,20): error TS7053: Element implicitly has an 'any' type because expression of type 'string' can't be used to index type '{}'.
  No index signature with a parameter of type 'string' was found on type '{}'.
lib/loglevel.ts(272,43): error TS7009: 'new' expression, whose target lacks a construct signature, implicitly has an 'any' type.
lib/loglevel.ts(273,33): error TS2339: Property 'getLevel' does not exist on type 'Console'.
lib/loglevel.ts(273,59): error TS2339: Property 'methodFactory' does not exist on type 'Console'.
lib/loglevel.ts(279,22): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(279,29): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(279,57): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(280,19): error TS2339: Property 'noConflict' does not exist on type 'Console'.
lib/loglevel.ts(281,13): error TS2367: This condition will always return 'true' since the types 'string' and 'RegExp' have no overlap.
lib/loglevel.ts(281,20): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(282,16): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(283,13): error TS2304: Cannot find name 'window'.
lib/loglevel.ts(289,19): error TS2339: Property 'getLoggers' does not exist on type 'Console'.
lib/loglevel.ts(290,9): error TS2322: Type '{}' is not assignable to type 'void'.
lib/loglevel.ts(294,5): error TS7053: Element implicitly has an 'any' type because expression of type '"default"' can't be used to index type 'Console'.
  Property 'default' does not exist on type 'Console'.

