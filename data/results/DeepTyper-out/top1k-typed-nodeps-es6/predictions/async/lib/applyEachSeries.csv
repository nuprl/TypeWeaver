importKeyword
 Text.Whitespace
applyEachName.Otherany0.1366complex0.0599boolean0.0193string0.0158void0.0154
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/applyEach.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
mapSeriesName.Otherany0.1746complex0.0544boolean0.0431string0.0378RegExp0.0281
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./mapSeries.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * The same as [`applyEach`]{@link module:ControlFlow.applyEach} but runs only a single async operation at a time.\n *\n * @name applyEachSeries\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.applyEach]{@link module:ControlFlow.applyEach}\n * @category Control Flow\n * @param {Array|Iterable|AsyncIterable|Object} fns - A collection of {@link AsyncFunction}s to all\n * call with the same arguments\n * @param {...*} [args] - any number of separate arguments to pass to the\n * function.\n * @param {Function} [callback] - the final argument should be the callback,\n * called when all functions have completed processing.\n * @returns {AsyncFunction} - A function, that when called, is the result of\n * appling the `args` to the list of functions.  It takes no args, other than\n * a callback.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
applyEachName.Otherany0.2091string0.0502void0.0474boolean0.0375complex0.0322
(Punctuation
mapSeriesName.Otherany0.3044string0.1264number0.0590boolean0.0339complex0.0312
)Punctuation
;Punctuation
\nText.Whitespace
