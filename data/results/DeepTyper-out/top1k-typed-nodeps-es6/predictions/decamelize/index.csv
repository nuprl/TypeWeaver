constKeyword.Declaration
 Text.Whitespace
handlePreserveConsecutiveUppercaseName.Otherstring0.7310any0.1402void0.0262complex0.0184number0.0102
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
decamelizedName.Otherstring0.9059any0.0711number0.0039string[]0.0037RegExp0.0036
,Punctuation
 Text.Whitespace
separatorName.Otherstring0.9294any0.0660complex0.0009number0.0007string[]0.0005
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
// Lowercase all single uppercase characters. As weComment.Single
\n\tText.Whitespace
// want to preserve uppercase sequences, we cannotComment.Single
\n\tText.Whitespace
// simply lowercase the separated string at the end.Comment.Single
\n\tText.Whitespace
// `data_For_USACounties` → `data_for_USACounties`Comment.Single
\n\tText.Whitespace
decamelizedName.Otherstring0.8557any0.1352number0.0052boolean0.0013string[]0.0009
 Text.Whitespace
=Operator
 Text.Whitespace
decamelizedName.Otherstring0.8177any0.1772number0.0021boolean0.0007string[]0.0006
.Punctuation
replaceName.Othercomplex0.8809any0.1127string0.0034boolean0.0006number0.0004
(Punctuation
\n\t\tText.Whitespace
/((?<![\p{Uppercase_Letter}\d])[\p{Uppercase_Letter}\d](?![\p{Uppercase_Letter}\d]))/guLiteral.String.Regex
,Punctuation
\n\t\tText.Whitespace
$0Name.Other
 Text.Whitespace
=>Punctuation
 Text.Whitespace
$0Name.Other
.Punctuation
toLowerCaseName.Otherstring0.9483any0.0495number0.0005complex0.0005string[]0.0005
(Punctuation
)Punctuation
,Punctuation
\n\tText.Whitespace
)Punctuation
;Punctuation
\n\n\tText.Whitespace
// Remaining uppercase sequences will be separated from lowercase sequences.Comment.Single
\n\tText.Whitespace
// `data_For_USACounties` → `data_for_USA_counties`Comment.Single
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
decamelizedName.Otherstring0.8058any0.1861number0.0022RegExp0.0015boolean0.0014
.Punctuation
replaceName.Othercomplex0.8471any0.1445string0.0038boolean0.0011void0.0006
(Punctuation
\n\t\tText.Whitespace
/(\p{Uppercase_Letter}+)(\p{Uppercase_Letter}\p{Lowercase_Letter}+)/guLiteral.String.Regex
,Punctuation
\n\t\tText.Whitespace
(Punctuation
_Name.Otherstring0.7645any0.2147string[]0.0092boolean0.0032number0.0024
,Punctuation
 Text.Whitespace
$1Name.Other
,Punctuation
 Text.Whitespace
$2Name.Other
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
$1Name.Other
 Text.Whitespace
+Operator
 Text.Whitespace
separatorName.Otherstring0.9125any0.0843number0.0017string[]0.0003boolean0.0003
 Text.Whitespace
+Operator
 Text.Whitespace
$2Name.Other
.Punctuation
toLowerCaseName.Otherstring0.9543any0.0436number0.0007string[]0.0005complex0.0003
(Punctuation
)Punctuation
,Punctuation
\n\tText.Whitespace
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
decamelizeName.Otherany0.4960string0.2634complex0.0533Promise<any>0.0198void0.0116
(Punctuation
\n\tText.Whitespace
textName.Otherstring0.9443any0.0513string[]0.0012complex0.0006RegExp0.0005
,Punctuation
\n\tText.Whitespace
{Punctuation
\n\t\tText.Whitespace
separatorName.Otherstring0.8879any0.1075boolean0.0012RegExp0.0007complex0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
'_'Literal.String.Single
,Punctuation
\n\t\tText.Whitespace
preserveConsecutiveUppercaseName.Otherboolean0.9570any0.0200string0.0184number0.0013false0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
falseKeyword.Constant
,Punctuation
\n\tText.Whitespace
}Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
,Punctuation
\nText.Whitespace
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
(Punctuation
typeofOperator.Word
 Text.Whitespace
textName.Otherany0.6222string0.3631complex0.0097string[]0.0013boolean0.0007
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
separatorName.Otherstring0.8040any0.1798complex0.0046boolean0.0037string[]0.0012
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
throwKeywordany0.4536complex0.3739string0.0648boolean0.0347Error0.0164
 Text.Whitespace
newOperator.Wordany0.2405complex0.1993string0.1092boolean0.0976string[]0.0401
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9823ErrorConstructor0.0034MapConstructor0.0002undefined0.0002NumberConstructor0.0002
(Punctuation
\n\t\t\tText.Whitespace
'The `text` and `separator` arguments should be of type `string`'Literal.String.Single
,Punctuation
\n\t\tText.Whitespace
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
// Checking the second character is done later on. Therefore process shorter strings here.Comment.Single
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
textName.Otherstring0.7763any0.2052string[]0.0118complex0.0014any[]0.0013
.Punctuation
lengthName.Othernumber0.9460any0.0500string0.0029complex0.0003void0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
2Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
preserveConsecutiveUppercaseName.Otherstring0.6394boolean0.2497any0.0890number0.0059string[]0.0042
 Text.Whitespace
?Operator
 Text.Whitespace
textName.Otherstring0.8608any0.1312string[]0.0024complex0.0010number0.0006
 Text.Whitespace
:Operator
 Text.Whitespace
text.toLowerCaseKeyword.Type
(Punctuation
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
replacementName.Otherstring0.8895any0.1053number0.0007RegExp0.0007complex0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
`Literal.String.Backtick
$Literal.String.Backtick
1Literal.String.Backtick
${Literal.String.Interpol
separatorName.Otherstring0.9482any0.0485complex0.0008boolean0.0006number0.0004
}Literal.String.Interpol
$Literal.String.Backtick
2Literal.String.Backtick
`Literal.String.Backtick
;Punctuation
\n\n\tText.Whitespace
// Split lowercase sequences followed by uppercase character.Comment.Single
\n\tText.Whitespace
// `dataForUSACounties` → `data_For_USACounties`Comment.Single
\n\tText.Whitespace
// `myURLstring → `my_URLstring`Comment.Single
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
decamelizedName.Otherstring0.8948any0.0944number0.0047RegExp0.0021boolean0.0014
 Text.Whitespace
=Operator
 Text.Whitespace
textName.Otherstring0.8808any0.1164complex0.0006RegExp0.0005string[]0.0004
.Punctuation
replaceName.Othercomplex0.9149any0.0720string0.0072boolean0.0011RegExp0.0009
(Punctuation
\n\t\tText.Whitespace
/([\p{Lowercase_Letter}\d])(\p{Uppercase_Letter})/guLiteral.String.Regex
,Punctuation
\n\t\tText.Whitespace
replacementName.Otherstring0.9786any0.0172RegExp0.0014complex0.0008boolean0.0006
,Punctuation
\n\tText.Whitespace
)Punctuation
;Punctuation
\n\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
preserveConsecutiveUppercaseName.Otherstring0.7696any0.1071boolean0.0926number0.0134RegExp0.0082
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
handlePreserveConsecutiveUppercaseName.Otherstring0.9007any0.0753boolean0.0055complex0.0045number0.0038
(Punctuation
decamelizedName.Otherstring0.9366any0.0498RegExp0.0037boolean0.0032number0.0032
,Punctuation
 Text.Whitespace
separatorName.Otherstring0.9513any0.0451number0.0007boolean0.0005complex0.0004
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
// Split multiple uppercase characters followed by one or more lowercase characters.Comment.Single
\n\tText.Whitespace
// `my_URLstring` → `my_ur_lstring`Comment.Single
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
decamelizedName.Otherstring0.8917any0.1011number0.0018RegExp0.0014boolean0.0010
\n\t\tText.Whitespace
.Punctuation
replaceName.Othercomplex0.8817any0.1021string0.0060boolean0.0024RegExp0.0011
(Punctuation
\n\t\t\tText.Whitespace
/(\p{Uppercase_Letter})(\p{Uppercase_Letter}\p{Lowercase_Letter}+)/guLiteral.String.Regex
,Punctuation
\n\t\t\tText.Whitespace
replacementName.Otherstring0.9646any0.0288RegExp0.0018boolean0.0014complex0.0010
,Punctuation
\n\t\tText.Whitespace
)Punctuation
\n\t\tText.Whitespace
.Punctuation
toLowerCaseName.Otherstring0.9431any0.0526boolean0.0011number0.0010complex0.0006
(Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
