import { findVariable } from "./find-variable";
import { getFunctionHeadLocation } from "./get-function-head-location";
import { getFunctionNameWithKind } from "./get-function-name-with-kind";
import { getInnermostScope } from "./get-innermost-scope";
import { getPropertyName } from "./get-property-name";
import { getStaticValue } from "./get-static-value";
import { getStringIfConstant } from "./get-string-if-constant";
import { hasSideEffect } from "./has-side-effect";
import { isParenthesized } from "./is-parenthesized";
import { PatternMatcher } from "./pattern-matcher";
import { CALL, CONSTRUCT, ESM, READ, ReferenceTracker } from "./reference-tracker";
import { isArrowToken, isClosingBraceToken, isClosingBracketToken, isClosingParenToken, isColonToken, isCommaToken, isCommentToken, isNotArrowToken, isNotClosingBraceToken, isNotClosingBracketToken, isNotClosingParenToken, isNotColonToken, isNotCommaToken, isNotCommentToken, isNotOpeningBraceToken, isNotOpeningBracketToken, isNotOpeningParenToken, isNotSemicolonToken, isOpeningBraceToken, isOpeningBracketToken, isOpeningParenToken, isSemicolonToken } from "./token-predicate";
declare const _default: {
    CALL: string;
    CONSTRUCT: string;
    ESM: string;
    findVariable: typeof findVariable;
    getFunctionHeadLocation: typeof getFunctionHeadLocation;
    getFunctionNameWithKind: typeof getFunctionNameWithKind;
    getInnermostScope: typeof getInnermostScope;
    getPropertyName: typeof getPropertyName;
    getStaticValue: typeof getStaticValue;
    getStringIfConstant: typeof getStringIfConstant;
    hasSideEffect: typeof hasSideEffect;
    isArrowToken: typeof isArrowToken;
    isClosingBraceToken: typeof isClosingBraceToken;
    isClosingBracketToken: typeof isClosingBracketToken;
    isClosingParenToken: typeof isClosingParenToken;
    isColonToken: typeof isColonToken;
    isCommaToken: typeof isCommaToken;
    isCommentToken: typeof isCommentToken;
    isNotArrowToken: Function;
    isNotClosingBraceToken: Function;
    isNotClosingBracketToken: Function;
    isNotClosingParenToken: Function;
    isNotColonToken: string;
    isNotCommaToken: Function;
    isNotCommentToken: string;
    isNotOpeningBraceToken: string;
    isNotOpeningBracketToken: Function;
    isNotOpeningParenToken: Function;
    isNotSemicolonToken: Function;
    isOpeningBraceToken: typeof isOpeningBraceToken;
    isOpeningBracketToken: typeof isOpeningBracketToken;
    isOpeningParenToken: typeof isOpeningParenToken;
    isParenthesized: typeof isParenthesized;
    isSemicolonToken: typeof isSemicolonToken;
    PatternMatcher: typeof PatternMatcher;
    READ: string;
    ReferenceTracker: typeof ReferenceTracker;
};
export default _default;
export { CALL, CONSTRUCT, ESM, findVariable, getFunctionHeadLocation, getFunctionNameWithKind, getInnermostScope, getPropertyName, getStaticValue, getStringIfConstant, hasSideEffect, isArrowToken, isClosingBraceToken, isClosingBracketToken, isClosingParenToken, isColonToken, isCommaToken, isCommentToken, isNotArrowToken, isNotClosingBraceToken, isNotClosingBracketToken, isNotClosingParenToken, isNotColonToken, isNotCommaToken, isNotCommentToken, isNotOpeningBraceToken, isNotOpeningBracketToken, isNotOpeningParenToken, isNotSemicolonToken, isOpeningBraceToken, isOpeningBracketToken, isOpeningParenToken, isParenthesized, isSemicolonToken, PatternMatcher, READ, ReferenceTracker, };
