/*! (c) 2020 Andrea Giammarchi */
const{parse:t,stringify:e}=JSON,{keys:n}=Object,o: string=String,c: number={},r: Function=(t: string,e: string)=>e,s: Function=(t: string)=>t instanceof o?o(t):t,l: Function=(t: string,e: string)=>"string"==typeof e?new o(e):e,a: Function=(t: object,e: Map,r: object,s: Function)=>{const l: any[]=[];for(let a=n(r),{length:f}=a,i=0;i<f;i++){const n: string=a[i],f: string=r[n];if(f instanceof o){const o: string=t[f];"object"!=typeof o||e.has(o)?r[n]=s.call(r,n,o):(e.add(o),r[n]=c,l.push({k:n,a:[t,e,o,s]}))}else r[n]!==c&&(r[n]=s.call(r,n,f))}for(let{length:t}=l,e=0;e<t;e++){const{k:t,a:n}=l[e];r[t]=s.call(r,t,a.apply(null,n))}return r},f: Function=(t: Map,e: any[],n: string)=>{const c: string=o(e.push(n)-1);return t.set(n,c),c},i: Function=(e: string,n: number)=>{const o: object=t(e,l).map(s),c: string=o[0],f: Function=n||r,i: string="object"==typeof c&&c?a(o,new Set,c,f):c;return f.call({"":i},"",i)},p: Function=(t: string,n: string,o: string)=>{const c: Function=n&&"object"==typeof n?(t: string,e: number)=>""===t||-1<n.indexOf(t)?e:void 0:n||r,s: Map=new Map,l: any[]=[],a: any[]=[];let i: number=+f(s,l,c.call({"":t},"",t)),p: boolean=!i;for(;i<l.length;)p=!0,a[i]=e(l[i++],u,o);return"["+a.join(",")+"]";function u(t: string,e: string): string{if(p)return p=!p,e;const n: string=c.call(this,t,e);switch(typeof n){case"object":if(null===n)return n;case"string":return s.get(n)||f(s,l,n)}return n}},u: Function=(e: any[])=>t(p(e)),g: Function=(t: string)=>i(e(t));export{g as fromJSON,i as parse,p as stringify,u as toJSON};
