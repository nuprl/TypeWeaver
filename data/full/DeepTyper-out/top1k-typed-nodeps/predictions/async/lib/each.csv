importKeyword
 Text.Whitespace
eachOfName.Otherany0.1003complex0.0436string0.0333boolean0.0314void0.0252
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./eachOf.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
withoutIndexName.Otherany0.1378string0.0870boolean0.0653complex0.0391void0.0336
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/withoutIndex.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
wrapAsyncName.Otherany0.1388string0.1091boolean0.0751void0.0405complex0.0384
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/wrapAsync.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
awaitifyName.Otherany0.1445string0.1406boolean0.0924void0.0462complex0.0362
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/awaitify.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * Applies the function `iteratee` to each item in `coll`, in parallel.\n * The `iteratee` is called with an item from the list, and a callback for when\n * it has finished. If the `iteratee` passes an error to its `callback`, the\n * main `callback` (for the `each` function) is immediately called with the\n * error.\n *\n * Note, that since this function applies `iteratee` to each item in parallel,\n * there is no guarantee that the iteratee functions will complete in order.\n *\n * @name each\n * @static\n * @memberOf module:Collections\n * @method\n * @alias forEach\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to\n * each item in `coll`. Invoked with (item, callback).\n * The array index is not passed to the iteratee.\n * If you need the index, use `eachOf`.\n * @param {Function} [callback] - A callback which is called when all\n * `iteratee` functions have finished, or an error occurs. Invoked with (err).\n * @returns {Promise} a promise, if a callback is omitted\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * const fileList = [ 'dir1/file2.txt', 'dir2/file3.txt', 'dir/file5.txt'];\n * const withMissingFileList = ['dir1/file1.txt', 'dir4/file2.txt'];\n *\n * // asynchronous function that deletes a file\n * const deleteFile = function(file, callback) {\n *     fs.unlink(file, callback);\n * };\n *\n * // Using callbacks\n * async.each(fileList, deleteFile, function(err) {\n *     if( err ) {\n *         console.log(err);\n *     } else {\n *         console.log('All files have been deleted successfully');\n *     }\n * });\n *\n * // Error Handling\n * async.each(withMissingFileList, deleteFile, function(err){\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using Promises\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.each(fileList, deleteFile)\n * .then( () => {\n *     console.log('All files have been deleted successfully');\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4/file2.txt does not exist\n *     // dir1/file1.txt could have been deleted\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         await async.each(files, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         await async.each(withMissingFileList, deleteFile);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4/file2.txt does not exist\n *         // dir1/file1.txt could have been deleted\n *     }\n * }\n *\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
eachLimitName.Otherstring0.2444any0.1279boolean0.0761number0.0327complex0.0224
(Punctuation
collName.Otherany0.3605string0.0491any[]0.0459Buffer0.0082{}0.0081
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.5367string0.1531number0.0658boolean0.0072Buffer0.0063
,Punctuation
 Text.Whitespace
callbackName.Otherany0.4374number0.1052Function0.0844string0.0284boolean0.0171
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
eachOfName.Otherany0.4039void0.0859string0.0611complex0.0317boolean0.0216
(Punctuation
collName.Otherany0.4637any[]0.1229{}0.0167string0.0142object0.0091
,Punctuation
 Text.Whitespace
withoutIndexName.Otherany0.4795string0.1259number0.0397any[]0.0292complex0.0239
(Punctuation
wrapAsyncName.Otherany0.4047string0.2672number0.0320any[]0.0254boolean0.0148
(Punctuation
iterateeName.Otherany0.5256string0.2166number0.0629Date0.0052Buffer0.0045
)Punctuation
)Punctuation
,Punctuation
 Text.Whitespace
callbackName.Otherany0.5859Function0.1274number0.0567void0.0306boolean0.0186
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
awaitifyName.Otherany0.3393void0.0725string0.0427complex0.0405number0.0363
(Punctuation
eachLimitName.Othernumber0.3150any0.2085string0.1573boolean0.0196void0.0064
,Punctuation
 Text.Whitespace
3Literal.Number.Float
)Punctuation
\nText.Whitespace
