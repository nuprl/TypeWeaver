declare function Pe(e: any, t: any): string;
declare function We(e: any): any;
declare function He(e: any, t: any): any;
declare function $e(e: any, t: any, n: any, i: any): void;
declare function Ge(e: any, t: any, n: any): boolean;
declare function Ve(e: any, t: any, n: any, i: any, r: any, a: any, l: any): boolean;
declare function Ze(e: any, t: any): void;
declare function Je(e: any, t: any, n: any): void;
declare function Qe(e: any, t: any): () => never;
declare var ze: any, Xe: any, et: any, tt: any, nt: any, it: any, rt: any, ot: any, at: (e: any, t: any) => string, lt: any, ct: {
    binary: any;
    float: any;
    map: any;
    null: any;
    pairs: any;
    set: any;
    timestamp: any;
    bool: any;
    int: any;
    merge: any;
    omap: any;
    seq: any;
    str: any;
}, st: () => never, ut: () => never, pt: () => never, ft: {
    Type: any;
    Schema: any;
    FAILSAFE_SCHEMA: any;
    JSON_SCHEMA: any;
    CORE_SCHEMA: any;
    DEFAULT_SCHEMA: any;
    load: any;
    loadAll: any;
    dump: (e: any, t: any) => string;
    YAMLException: any;
    types: {
        binary: any;
        float: any;
        map: any;
        null: any;
        pairs: any;
        set: any;
        timestamp: any;
        bool: any;
        int: any;
        merge: any;
        omap: any;
        seq: any;
        str: any;
    };
    safeLoad: () => never;
    safeLoadAll: () => never;
    safeDump: () => never;
};
