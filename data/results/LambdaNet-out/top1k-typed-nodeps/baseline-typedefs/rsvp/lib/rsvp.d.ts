import Promise from './rsvp/promise';
import EventTarget from './rsvp/events';
import denodeify from './rsvp/node';
import all from './rsvp/all';
import allSettled from './rsvp/all-settled';
import race from './rsvp/race';
import hash from './rsvp/hash';
import hashSettled from './rsvp/hash-settled';
import rethrow from './rsvp/rethrow';
import defer from './rsvp/defer';
import { configure } from './rsvp/config';
import map from './rsvp/map';
import resolve from './rsvp/resolve';
import reject from './rsvp/reject';
import filter from './rsvp/filter';
import asap from './rsvp/asap';
declare const cast: any[];
declare const async: Function;
declare function on(): void;
declare function off(): void;
declare const _default: {
    asap: typeof asap;
    cast: any[];
    Promise: typeof Promise;
    EventTarget: {
        mixin(object: any): any;
        on(eventName: any, callback: any): void;
        off(eventName: any, callback: any): void;
        trigger(eventName: any, options: any, label: any): void;
    };
    all: typeof all;
    allSettled: typeof allSettled;
    race: typeof race;
    hash: typeof hash;
    hashSettled: typeof hashSettled;
    rethrow: typeof rethrow;
    defer: typeof defer;
    denodeify: typeof denodeify;
    configure: typeof configure;
    on: typeof on;
    off: typeof off;
    resolve: typeof resolve;
    reject: typeof reject;
    map: typeof map;
    async: Function;
    filter: typeof filter;
};
export default _default;
export { asap, cast, Promise, EventTarget, all, allSettled, race, hash, hashSettled, rethrow, defer, denodeify, configure, on, off, resolve, reject, map, async, filter };
