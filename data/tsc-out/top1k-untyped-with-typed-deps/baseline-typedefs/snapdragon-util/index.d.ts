export function isNode(node: any): boolean;
export function noop(node: any): undefined;
export function value(node: any): string;
export function identity(node: any): undefined;
export function append(value: any): Function;
export function toNoop(node: any, nodes: any[]): void;
export function visit(node: any, fn: Function): any;
export function mapVisit(node: any, fn: Function): any;
export function addOpen(node: any, Node: Function, value: any, filter: Function): any;
export function addClose(node: any, Node: Function, value: any, filter: Function): any;
export function wrapNodes(node: any, Node: Function, filter: Function): any;
export function pushNode(parent: any, node: any): any;
export function unshiftNode(parent: any, node: any): undefined;
export function popNode(node: any): number | undefined;
export function shiftNode(node: any): number | undefined;
export function removeNode(parent: any, node: any): any | undefined;
export function isType(node: any, type: string): boolean;
export function hasType(node: any, type: string): boolean;
export function firstOfType(nodes: any[], type: string): any | undefined;
export function findNode(nodes: any[], type: string | number): any;
export function isOpen(node: any): boolean;
export function isClose(node: any): boolean;
export function isBlock(node: any): boolean;
export function hasNode(node: any, child: any): boolean;
export function hasOpen(node: any): boolean;
export function hasClose(node: any): boolean;
export function hasOpenAndClose(node: any): boolean;
export function addType(state: any, node: any): any[];
export function removeType(state: any, node: any): any[];
export function isEmpty(node: any, fn: Function): boolean;
export function isInsideType(state: any, type: string): boolean;
export function isInside(state: any, node: any, type: string): boolean;
export function last(arr: any, n: number): undefined;
export function lastNode(node: any): null;
export function arrayify(value: any): any[];
export function stringify(value: any): any[];
export function trim(str: string): string;
