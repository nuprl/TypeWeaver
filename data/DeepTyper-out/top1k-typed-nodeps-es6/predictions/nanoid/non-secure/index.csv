Text
// This alphabet uses `A-Za-z0-9_-` symbols.Comment.Single
\nText.Whitespace
// The order of characters is optimized for better gzip and brotli compression.Comment.Single
\nText.Whitespace
// References to the same file (works both for gzip and brotli):Comment.Single
\nText.Whitespace
// `'use`, `andom`, and `rict'`Comment.Single
\nText.Whitespace
// References to the brotli default dictionary:Comment.Single
\nText.Whitespace
// `-26T`, `1983`, `40px`, `75px`, `bush`, `jack`, `mind`, `very`, and `wolf`Comment.Single
\nText.Whitespace
letKeyword.Declaration
 Text.Whitespace
urlAlphabetName.Otherstring0.4163RegExp0.3938any0.0248number0.0192string[]0.0190
 Text.Whitespace
=Operator
\n  Text.Whitespace
'useandom-26T198340PX75pxJACKVERYMINDBUSHWOLF_GQZbfghjklqvwyzrict'Literal.String.Single
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
customAlphabetName.Otherstring0.5460number0.2475boolean0.0912any0.0668string[]0.0086
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
alphabetName.Otherstring0.4946number0.3940any0.0944boolean0.0070string[]0.0009
,Punctuation
 Text.Whitespace
defaultSizeName.Othernumber0.8738string0.0949any0.0184boolean0.0088Date0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
21Literal.Number.Float
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
(Punctuation
sizeName.Othernumber0.5964string0.3167any0.0796boolean0.0041complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
defaultSizeName.Otherstring0.4596number0.4350any0.0886boolean0.0071complex0.0007
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
idName.Otherstring0.9787any0.0126number0.0061boolean0.0008RegExp0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
\n    Text.Whitespace
// A compact alternative for `for (var i = 0; i < step; i++)`.Comment.Single
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9661any0.0179boolean0.0088string0.0064complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
sizeName.Othernumber0.7859string0.1648any0.0457boolean0.0022complex0.0004
\n    Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
iName.Othernumber0.9782any0.0179boolean0.0024string0.0009complex0.0001
--Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
// `| 0` is more compact and faster than `Math.floor()`.Comment.Single
\n      Text.Whitespace
idName.Otherstring0.9313number0.0404any0.0266boolean0.0004complex0.0003
 Text.Whitespace
+=Operator
 Text.Whitespace
alphabetName.Otherstring[]0.7316string0.0943any0.0797complex0.0215number[]0.0169
[Punctuation
(Punctuation
MathName.BuiltinMath0.9996number0.0000any0.0000string[]0.0000ClientRect0.0000
.Punctuation
randomName.Othernumber0.9984string0.0007any0.0004boolean0.0002complex0.0001
(Punctuation
)Punctuation
 Text.Whitespace
*Operator
 Text.Whitespace
alphabetName.Otherstring0.3440number0.2495any0.1957string[]0.1183number[]0.0210
.Punctuation
lengthName.Othernumber0.9920any0.0066string0.0010boolean0.0001complex0.0000
)Punctuation
 Text.Whitespace
|Operator
 Text.Whitespace
0Literal.Number.Float
]Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
idName.Otherstring0.8771number0.0655any0.0539boolean0.0008complex0.0007
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
nanoidName.Othernumber0.5984string0.3067boolean0.0406any0.0402string[]0.0018
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
sizeName.Othernumber0.9733string0.0181any0.0075boolean0.0006complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
21Literal.Number.Float
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
idName.Otherstring0.9782any0.0138number0.0056boolean0.0007RegExp0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
\n  Text.Whitespace
// A compact alternative for `for (var i = 0; i < step; i++)`.Comment.Single
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9697any0.0165boolean0.0067string0.0063complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
sizeName.Othernumber0.7822string0.1702any0.0440boolean0.0021complex0.0004
\n  Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
iName.Othernumber0.9804any0.0158boolean0.0021string0.0011complex0.0001
--Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
// `| 0` is more compact and faster than `Math.floor()`.Comment.Single
\n    Text.Whitespace
idName.Otherstring0.9332number0.0418any0.0232boolean0.0004complex0.0003
 Text.Whitespace
+=Operator
 Text.Whitespace
urlAlphabetName.Otherstring[]0.6978string0.0974any0.0854complex0.0273number[]0.0195
[Punctuation
(Punctuation
MathName.BuiltinMath0.9996number0.0000ClientRect0.0000any0.0000string[]0.0000
.Punctuation
randomName.Othernumber0.9983string0.0008any0.0004boolean0.0001complex0.0001
(Punctuation
)Punctuation
 Text.Whitespace
*Operator
 Text.Whitespace
64Literal.Number.Float
)Punctuation
 Text.Whitespace
|Operator
 Text.Whitespace
0Literal.Number.Float
]Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
idName.Otherstring0.8587number0.0714any0.0627complex0.0018boolean0.0010
\nText.Whitespace
}Punctuation
\nText.Whitespace
