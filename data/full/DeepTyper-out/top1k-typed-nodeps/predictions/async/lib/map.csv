importKeyword
 Text.Whitespace
_mapName.Otherany0.0763complex0.0450Promise<T>0.0137RegExp0.0086Promise<boolean>0.0071
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/map.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
eachOfName.Otherany0.1755complex0.0753boolean0.0645string0.0401string[]0.0304
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./eachOf.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
awaitifyName.Otherany0.2002boolean0.0969complex0.0923string0.0700string[]0.0266
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/awaitify.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * Produces a new collection of values by mapping each value in `coll` through\n * the `iteratee` function. The `iteratee` is called with an item from `coll`\n * and a callback for when it has finished processing. Each of these callbacks\n * takes 2 arguments: an `error`, and the transformed item from `coll`. If\n * `iteratee` passes an error to its callback, the main `callback` (for the\n * `map` function) is immediately called with the error.\n *\n * Note, that since this function applies the `iteratee` to each item in\n * parallel, there is no guarantee that the `iteratee` functions will complete\n * in order. However, the results array will be in the same order as the\n * original `coll`.\n *\n * If `map` is passed an Object, the results will be an Array.  The results\n * will roughly be in the order of the original Objects' keys (but this can\n * vary across JavaScript engines).\n *\n * @name map\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - An async function to apply to each item in\n * `coll`.\n * The iteratee should complete with the transformed item.\n * Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called when all `iteratee`\n * functions have finished, or an error occurs. Results is an Array of the\n * transformed items from the `coll`. Invoked with (err, results).\n * @returns {Promise} a promise, if no callback is passed\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n * // file4.txt does not exist\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n * const withMissingFileList = ['file1.txt','file2.txt','file4.txt'];\n *\n * // asynchronous function that returns the file size in bytes\n * function getFileSizeInBytes(file, callback) {\n *     fs.stat(file, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         callback(null, stat.size);\n *     });\n * }\n *\n * // Using callbacks\n * async.map(fileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *     } else {\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes, function(err, results) {\n *     if (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     } else {\n *         console.log(results);\n *     }\n * });\n *\n * // Using Promises\n * async.map(fileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n *     // results is now an array of the file size in bytes for each file, e.g.\n *     // [ 1000, 2000, 3000]\n * }).catch( err => {\n *     console.log(err);\n * });\n *\n * // Error Handling\n * async.map(withMissingFileList, getFileSizeInBytes)\n * .then( results => {\n *     console.log(results);\n * }).catch( err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.map(fileList, getFileSizeInBytes);\n *         console.log(results);\n *         // results is now an array of the file size in bytes for each file, e.g.\n *         // [ 1000, 2000, 3000]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.map(withMissingFileList, getFileSizeInBytes);\n *         console.log(results);\n *     }\n *     catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *     }\n * }\n *\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
mapName.Otherany0.1242complex0.0581U[]0.0309void0.0132...0.0116
 Text.Whitespace
(Punctuation
collName.Otherany0.6304string0.0294any[]0.0161{}0.0129Error0.0068
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.6881string0.0719number0.0235Error0.0102boolean0.0045
,Punctuation
 Text.Whitespace
callbackName.Otherany0.4632Function0.0522number0.0315void0.0092Callback0.0066
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
_mapName.Otherany0.2380complex0.1350Promise<T>0.0195Promise<any>0.0117Promise<{}>0.0105
(Punctuation
eachOfName.Otherany0.2924string0.0923Error0.0221complex0.0201boolean0.0198
,Punctuation
 Text.Whitespace
collName.Otherany0.6794any[]0.0394{}0.0223string0.0116complex0.0098
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.6886string0.0376number0.0182Error0.0126any[]0.0080
,Punctuation
 Text.Whitespace
callbackName.Otherany0.5566Function0.0933void0.0468number0.0188{}0.0087
)Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
awaitifyName.Othervoid0.3348any0.3249complex0.0480string0.0133Promise<void>0.0084
(Punctuation
mapName.Otherany0.4016complex0.0255U[]0.0224Error0.0089string0.0079
,Punctuation
 Text.Whitespace
3Literal.Number.Float
)Punctuation
;Punctuation
\nText.Whitespace
