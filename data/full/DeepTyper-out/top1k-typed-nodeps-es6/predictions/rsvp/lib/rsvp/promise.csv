importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
configName.Otherany0.5445Config0.2407complex0.0380ConfigReader0.0080boolean0.0055
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./config'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
instrumentName.Otherany0.5200string0.1591boolean0.0850void0.0717complex0.0308
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./instrument'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
thenName.Otherany0.7004complex0.1397void0.0280Promise<any>0.0230Promise<void>0.0136
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./then'Literal.String.Single
;Punctuation
\n\nText.Whitespace
importKeyword
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
noopName.Othervoid0.9556any0.0383complex0.0014Promise<void>0.0009boolean0.0006
,Punctuation
\n  Text.Whitespace
initializePromiseName.Othervoid0.8051any0.1684Promise<void>0.0088complex0.0082Promise<any>0.0020
\nText.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./-internal'Literal.String.Single
;Punctuation
\n\nText.Whitespace
importKeyword
 Text.Whitespace
allName.Otherany0.5421boolean0.1387complex0.0585Promise<any>0.0325void0.0282
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./promise/all'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
raceName.Othercomplex0.3724any0.3009void0.1398boolean0.0514string0.0454
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./promise/race'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
ResolveName.Otherany0.6717complex0.3044void0.0054string0.0047boolean0.0041
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./promise/resolve'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
RejectName.Otherany0.5646void0.0905complex0.0744Promise<void>0.0540boolean0.0463
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./promise/reject'Literal.String.Single
;Punctuation
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
guidKeyName.Otherstring0.9002RegExp0.0745any0.0060string[]0.0037number0.0032
 Text.Whitespace
=Operator
 Text.Whitespace
'rsvp_'Literal.String.Single
 Text.Whitespace
+Operator
 Text.Whitespace
DateName.BuiltinDateConstructor0.9993Date0.0001FunctionConstructor0.0001ErrorConstructor0.0000Math0.0000
.Punctuation
nowName.Othernumber0.9649string0.0213any0.0060Date0.0033boolean0.0018
(Punctuation
)Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
'-'Literal.String.Single
;Punctuation
\nText.Whitespace
letKeyword.Declaration
 Text.Whitespace
counterName.Othernumber0.9975any0.0018string0.0003void0.0001boolean0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
needsResolverName.Othervoid0.9625Promise<void>0.0123any0.0044complex0.0028boolean0.0026
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
throwKeywordany0.4286complex0.2045Error0.1933boolean0.0500string0.0337
 Text.Whitespace
newOperator.Wordany0.2314complex0.1264boolean0.1169string0.0730Error0.0566
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9933ErrorConstructor0.0016BooleanConstructor0.0002FunctionConstructor0.0001MapConstructor0.0001
(Punctuation
'You must pass a resolver function as the first argument to the promise constructor'Literal.String.Single
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
needsNewName.Othervoid0.8288Promise<void>0.0633any0.0210Promise<{}>0.0165complex0.0075
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
throwKeywordany0.3789Error0.2270complex0.2113boolean0.0409string0.0237
 Text.Whitespace
newOperator.Wordany0.1790complex0.1166boolean0.0942Error0.0717string0.0638
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9911ErrorConstructor0.0023BooleanConstructor0.0002Promise0.0001FunctionConstructor0.0001
(Punctuation
"Failed to construct 'Promise': Please use the 'new' operator, this object constructor cannot be called as a function."Literal.String.Double
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n  Promise objects represent the eventual result of an asynchronous operation. The\n  primary way of interacting with a promise is through its `then` method, which\n  registers callbacks to receive either a promiseâ€™s eventual value or the reason\n  why the promise cannot be fulfilled.\n\n  Terminology\n  -----------\n\n  - `promise` is an object or function with a `then` method whose behavior conforms to this specification.\n  - `thenable` is an object or function that defines a `then` method.\n  - `value` is any legal JavaScript value (including undefined, a thenable, or a promise).\n  - `exception` is a value that is thrown using the throw statement.\n  - `reason` is a value that indicates why a promise was rejected.\n  - `settled` the final resting state of a promise, fulfilled or rejected.\n\n  A promise can be in one of three states: pending, fulfilled, or rejected.\n\n  Promises that are fulfilled have a fulfillment value and are in the fulfilled\n  state.  Promises that are rejected have a rejection reason and are in the\n  rejected state.  A fulfillment value is never a thenable.\n\n  Promises can also be said to *resolve* a value.  If this value is also a\n  promise, then the original promise's settled state will match the value's\n  settled state.  So a promise that *resolves* a promise that rejects will\n  itself reject, and a promise that *resolves* a promise that fulfills will\n  itself fulfill.\n\n\n  Basic Usage:\n  ------------\n\n  ```js\n  let promise = new Promise(function(resolve, reject) {\n    // on success\n    resolve(value);\n\n    // on failure\n    reject(reason);\n  });\n\n  promise.then(function(value) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Advanced Usage:\n  ---------------\n\n  Promises shine when abstracting away asynchronous interactions such as\n  `XMLHttpRequest`s.\n\n  ```js\n  function getJSON(url) {\n    return new Promise(function(resolve, reject){\n      let xhr = new XMLHttpRequest();\n\n      xhr.open('GET', url);\n      xhr.onreadystatechange = handler;\n      xhr.responseType = 'json';\n      xhr.setRequestHeader('Accept', 'application/json');\n      xhr.send();\n\n      function handler() {\n        if (this.readyState === this.DONE) {\n          if (this.status === 200) {\n            resolve(this.response);\n          } else {\n            reject(new Error('getJSON: `' + url + '` failed with status: [' + this.status + ']'));\n          }\n        }\n      };\n    });\n  }\n\n  getJSON('/posts.json').then(function(json) {\n    // on fulfillment\n  }, function(reason) {\n    // on rejection\n  });\n  ```\n\n  Unlike callbacks, promises are great composable primitives.\n\n  ```js\n  Promise.all([\n    getJSON('/posts'),\n    getJSON('/comments')\n  ]).then(function(values){\n    values[0] // => postsJSON\n    values[1] // => commentsJSON\n\n    return values;\n  });\n  ```\n\n  @class Promise\n  @public\n  @param {function} resolver\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @constructor\n*/Comment.Multiline
\nText.Whitespace
classKeyword.Declaration
 Text.Whitespace
PromiseName.BuiltinPromiseConstructor0.8965any0.1008complex0.0013Promise<any>0.0003number0.0002
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
constructorKeyword.Reserved
(Punctuation
resolverName.Otherany0.2539string0.0979void0.0907number0.0409boolean0.0300
,Punctuation
 Text.Whitespace
labelName.Otherstring0.8451any0.1309number0.0048void0.0025boolean0.0015
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
thisKeyword
.Punctuation
_idName.Othernumber0.9415any0.0249string0.0180void0.0047boolean0.0046
 Text.Whitespace
=Operator
 Text.Whitespace
counterName.Othernumber0.9953any0.0037string0.0006boolean0.0001void0.0001
++Operator
;Punctuation
\n    Text.Whitespace
thisKeyword
.Punctuation
_labelName.Otherstring0.4428any0.1799number0.0330Error0.0209void0.0075
 Text.Whitespace
=Operator
 Text.Whitespace
labelName.Otherstring0.7497any0.2069number0.0098complex0.0019void0.0017
;Punctuation
\n    Text.Whitespace
thisKeyword
.Punctuation
_stateName.Otherany0.1024void0.0911number0.0705boolean0.0683State0.0266
 Text.Whitespace
=Operator
 Text.Whitespace
undefinedKeyword.Constant
;Punctuation
\n    Text.Whitespace
thisKeyword
.Punctuation
_resultName.Otherany0.7677boolean0.0762void0.0551string0.0229complex0.0129
 Text.Whitespace
=Operator
 Text.Whitespace
undefinedKeyword.Constant
;Punctuation
\n    Text.Whitespace
thisKeyword
.Punctuation
_subscribersName.Otherany[]0.6956any0.0819string[]0.0311number[]0.0201complex0.0155
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\n    Text.Whitespace
configName.Otherany0.3961Config0.2504IConfig0.0133void0.0081Configuration0.0070
.Punctuation
instrumentName.Otherany0.7952boolean0.0695void0.0683string0.0276complex0.0049
 Text.Whitespace
&&Operator
 Text.Whitespace
instrumentName.Otherany0.8073boolean0.0724void0.0531string0.0248T0.0102
(Punctuation
'created'Literal.String.Single
,Punctuation
 Text.Whitespace
thisKeyword
)Punctuation
;Punctuation
\n\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
noopName.Othervoid0.6961any0.1591boolean0.1189string0.0052number0.0038
 Text.Whitespace
!==Operator
 Text.Whitespace
resolverName.Otherany0.3778boolean0.2825string0.1242void0.0548number0.0182
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
typeofOperator.Word
 Text.Whitespace
resolverName.Otherany0.5201string0.1439boolean0.0834void0.0315number0.0278
 Text.Whitespace
!==Operator
 Text.Whitespace
'function'Literal.String.Single
 Text.Whitespace
&&Operator
 Text.Whitespace
needsResolverName.Otherboolean0.3792any0.2414void0.1539string0.0926Promise<void>0.0218
(Punctuation
)Punctuation
;Punctuation
\n      Text.Whitespace
thisKeyword
 Text.Whitespace
instanceofOperator.Word
 Text.Whitespace
PromiseName.BuiltinPromiseConstructor0.9388any0.0531void0.0021complex0.0016Promise<any>0.0012
 Text.Whitespace
?Operator
 Text.Whitespace
initializePromiseName.Othervoid0.6770any0.1931Promise<void>0.0425complex0.0410Promise<any>0.0174
(Punctuation
thisKeyword
,Punctuation
 Text.Whitespace
resolverName.Otherany0.2515void0.1567string0.0881boolean0.0442number0.0358
)Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
needsNewName.Othervoid0.7750Promise<void>0.0879any0.0817string0.0071complex0.0058
(Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
_onErrorName.Othervoid0.9915any0.0044Promise<void>0.0011boolean0.0011complex0.0003
(Punctuation
reasonName.Otherany0.6470string0.2791Error0.0385number0.0130complex0.0033
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
configName.Otherany0.6229Config0.2865IConfig0.0042complex0.0039Configuration0.0028
.Punctuation
afterName.Otherany0.8606complex0.0691void0.0533Promise<void>0.0029Promise<any>0.0024
(Punctuation
(Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
thisKeyword
.Punctuation
_onErrorName.Otherboolean0.8029void0.0879any0.0516string0.0105false0.0068
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
configName.Otherany0.4455Config0.3006IConfig0.0065Configuration0.0060void0.0047
.Punctuation
triggerName.Othervoid0.5360any0.3395Promise<void>0.0401Promise<any>0.0312Promise<{}>0.0035
(Punctuation
'error'Literal.String.Single
,Punctuation
 Text.Whitespace
reasonName.Otherany0.4652string0.4033Error0.0831number0.0090complex0.0042
,Punctuation
 Text.Whitespace
thisKeyword
.Punctuation
_labelName.Otherstring0.6647any0.2611number0.0063void0.0063Error0.0042
)Punctuation
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n  `catch` is simply sugar for `then(undefined, onRejection)` which makes it the same\n  as the catch block of a try/catch statement.\n\n  ```js\n  function findAuthor(){\n    throw new Error('couldn\'t find that author');\n  }\n\n  // synchronous\n  try {\n    findAuthor();\n  } catch(reason) {\n    // something went wrong\n  }\n\n  // async with promises\n  findAuthor().catch(function(reason){\n    // something went wrong\n  });\n  ```\n\n  @method catch\n  @param {Function} onRejection\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise}\n*/Comment.Multiline
\n  Text.Whitespace
catchKeyword
(Punctuation
onRejectionName.Otherany0.9318number0.0279string0.0195boolean0.0074void0.0023
,Punctuation
 Text.Whitespace
labelName.Otherstring0.7799any0.1887number0.0085Buffer0.0016complex0.0010
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
thisKeyword
.Punctuation
thenName.Otherany0.8410complex0.0619Promise<any>0.0344Promise<void>0.0198void0.0105
(Punctuation
undefinedKeyword.Constant
,Punctuation
 Text.Whitespace
onRejectionName.Otherany0.2665void0.2392boolean0.1161number0.0950Promise<void>0.0660
,Punctuation
 Text.Whitespace
labelName.Otherstring0.7352any0.2389number0.0056void0.0037complex0.0020
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n  `finally` will be invoked regardless of the promise's fate just as native\n  try/catch/finally behaves\n\n  Synchronous example:\n\n  ```js\n  findAuthor() {\n    if (Math.random() > 0.5) {\n      throw new Error();\n    }\n    return new Author();\n  }\n\n  try {\n    return findAuthor(); // succeed or fail\n  } catch(error) {\n    return findOtherAuthor();\n  } finally {\n    // always runs\n    // doesn't affect the return value\n  }\n  ```\n\n  Asynchronous example:\n\n  ```js\n  findAuthor().catch(function(reason){\n    return findOtherAuthor();\n  }).finally(function(){\n    // author was either found, or not\n  });\n  ```\n\n  @method finally\n  @param {Function} callback\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise}\n*/Comment.Multiline
\n  Text.Whitespace
finallyKeyword
(Punctuation
callbackName.Otherany0.6389Function0.1588string0.0233number0.0204void0.0197
,Punctuation
 Text.Whitespace
labelName.Otherstring0.8670any0.1097number0.0030Buffer0.0021complex0.0009
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
promiseName.Otherany0.6790Promise<any>0.1423Promise<void>0.0202Promise<string>0.0185Promise0.0180
 Text.Whitespace
=Operator
 Text.Whitespace
thisKeyword
;Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
constructorKeyword.Reserved
 Text.Whitespace
=Operator
 Text.Whitespace
promiseName.Otherany0.8613Promise<any>0.0421complex0.0112Promise<T>0.0102Promise0.0101
.Punctuation
constructorKeyword.Reserved
;Punctuation
\n\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
callbackName.Otherany0.5422Function0.0809string0.0401boolean0.0321void0.0168
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
promiseName.Otherany0.6329Promise<any>0.1648Promise<string>0.0636Promise<void>0.0401Promise<T>0.0186
.Punctuation
thenName.Otherany0.9738complex0.0111Promise<any>0.0076Promise<void>0.0015Promise<number>0.0006
(Punctuation
valueName.Otherany0.6450string0.2775number0.0229boolean0.0082complex0.0058
 Text.Whitespace
=>Punctuation
 Text.Whitespace
constructorKeyword.Reserved
.Punctuation
resolveName.Otherany0.6936complex0.1415Promise<any>0.0581Promise<void>0.0216T0.0175
(Punctuation
callbackName.Otherany0.4874Promise<any>0.1549Function0.0865Promise<void>0.0616Promise<{}>0.0329
(Punctuation
)Punctuation
)Punctuation
.Punctuation
thenName.Otherany0.9891complex0.0046Promise<any>0.0021Promise<void>0.0005number0.0004
(Punctuation
(Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
valueName.Otherstring0.4784any0.4561number0.0337boolean0.0072Error0.0039
)Punctuation
,Punctuation
\n                         Text.Whitespace
reasonName.Otherany0.7839string0.0976Error0.0947number0.0046complex0.0032
 Text.Whitespace
=>Punctuation
 Text.Whitespace
constructorKeyword.Reserved
.Punctuation
resolveName.Otherany0.8102complex0.0941Promise<any>0.0295T0.0128Promise<void>0.0075
(Punctuation
callbackName.Otherany0.4579Promise<any>0.1350Function0.0764Promise<void>0.0627Promise<{}>0.0620
(Punctuation
)Punctuation
)Punctuation
.Punctuation
thenName.Otherany0.9881complex0.0040Promise<any>0.0021Promise<void>0.0006void0.0004
(Punctuation
(Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
 Text.Whitespace
throwKeywordany0.6759Error0.2691complex0.0149string0.0141number0.0055
 Text.Whitespace
reasonName.Otherany0.6782Error0.2382string0.0544number0.0064complex0.0048
;Punctuation
 Text.Whitespace
}Punctuation
)Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
returnKeyword
 Text.Whitespace
promiseName.Otherany0.6885Promise<any>0.1244Promise<string>0.0422Promise<void>0.0387Promise<T>0.0285
.Punctuation
thenName.Otherany0.9842complex0.0060Promise<any>0.0038Promise<void>0.0016void0.0005
(Punctuation
callbackName.Otherany0.4879void0.1761Promise<void>0.0875Function0.0519boolean0.0301
,Punctuation
 Text.Whitespace
callbackName.Otherany0.5229void0.1460Function0.0770Promise<void>0.0710Promise<any>0.0331
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9489any0.0432Promise<any>0.0018complex0.0016void0.0007
.Punctuation
castName.Othercomplex0.5848any0.2106string0.0367number0.0170any[]0.0085
 Text.Whitespace
=Operator
 Text.Whitespace
ResolveName.Otherany0.9099complex0.0764Promise<any>0.0015Promise<void>0.0012PromiseConstructor0.0011
;Punctuation
 Text.Whitespace
// deprecatedComment.Single
\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9268any0.0639complex0.0023Promise<any>0.0018void0.0012
.Punctuation
allName.Otherany0.3782complex0.1790Promise<any>0.0540boolean0.0486Promise<any>[]0.0351
 Text.Whitespace
=Operator
 Text.Whitespace
allName.Otherany0.3518Promise<any>[]0.1411Promise<void>[]0.0747Promise<any>0.0699complex0.0398
;Punctuation
\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9246any0.0662Promise<any>0.0022complex0.0018void0.0012
.Punctuation
raceName.Othercomplex0.4833any0.3491boolean0.0533string0.0393Promise<any>0.0185
 Text.Whitespace
=Operator
 Text.Whitespace
raceName.Otherany0.4346complex0.3419string0.0305PromiseConstructor0.0299boolean0.0265
;Punctuation
\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9731any0.0217Promise<any>0.0013complex0.0009void0.0007
.Punctuation
resolveName.Othercomplex0.8633any0.1001Promise<any>0.0107string0.0050number0.0049
 Text.Whitespace
=Operator
 Text.Whitespace
ResolveName.Otherany0.7755complex0.1590Promise<any>0.0100string0.0059Promise<void>0.0051
;Punctuation
\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9718any0.0225Promise<any>0.0012complex0.0010void0.0008
.Punctuation
rejectName.Othercomplex0.5591any0.2883number0.0766void0.0201string0.0175
 Text.Whitespace
=Operator
 Text.Whitespace
RejectName.Otherany0.5596Promise<any>0.1318Promise<void>0.0724complex0.0361Promise<number>0.0235
;Punctuation
\n\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9373any0.0490complex0.0038Promise<any>0.0027void0.0020
.Punctuation
prototypeName.OtherPromise<any>0.2382Promise<any>[]0.0396any0.0298Promise<{}>0.0223Promise<string>0.0218
.Punctuation
_guidKeyName.OtherPromise<any>0.4915Promise<void>0.1497any0.1008string0.0355Promise<{}>0.0320
 Text.Whitespace
=Operator
 Text.Whitespace
guidKeyName.OtherPromise<any>0.3494Promise<void>0.2133any0.1225Promise<{}>0.0603number0.0346
;Punctuation
\n\nText.Whitespace
/**\n  The primary way of interacting with a promise is through its `then` method,\n  which registers callbacks to receive either a promise's eventual value or the\n  reason why the promise cannot be fulfilled.\n\n  ```js\n  findUser().then(function(user){\n    // user is available\n  }, function(reason){\n    // user is unavailable, and you are given the reason why\n  });\n  ```\n\n  Chaining\n  --------\n\n  The return value of `then` is itself a promise.  This second, 'downstream'\n  promise is resolved with the return value of the first promise's fulfillment\n  or rejection handler, or rejected if the handler throws an exception.\n\n  ```js\n  findUser().then(function (user) {\n    return user.name;\n  }, function (reason) {\n    return 'default name';\n  }).then(function (userName) {\n    // If `findUser` fulfilled, `userName` will be the user's name, otherwise it\n    // will be `'default name'`\n  });\n\n  findUser().then(function (user) {\n    throw new Error('Found user, but still unhappy');\n  }, function (reason) {\n    throw new Error('`findUser` rejected and we\'re unhappy');\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // if `findUser` fulfilled, `reason` will be 'Found user, but still unhappy'.\n    // If `findUser` rejected, `reason` will be '`findUser` rejected and we\'re unhappy'.\n  });\n  ```\n  If the downstream promise does not specify a rejection handler, rejection reasons will be propagated further downstream.\n\n  ```js\n  findUser().then(function (user) {\n    throw new PedagogicalException('Upstream error');\n  }).then(function (value) {\n    // never reached\n  }).then(function (value) {\n    // never reached\n  }, function (reason) {\n    // The `PedgagocialException` is propagated all the way down to here\n  });\n  ```\n\n  Assimilation\n  ------------\n\n  Sometimes the value you want to propagate to a downstream promise can only be\n  retrieved asynchronously. This can be achieved by returning a promise in the\n  fulfillment or rejection handler. The downstream promise will then be pending\n  until the returned promise is settled. This is called *assimilation*.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // The user's comments are now available\n  });\n  ```\n\n  If the assimliated promise rejects, then the downstream promise will also reject.\n\n  ```js\n  findUser().then(function (user) {\n    return findCommentsByAuthor(user);\n  }).then(function (comments) {\n    // If `findCommentsByAuthor` fulfills, we'll have the value here\n  }, function (reason) {\n    // If `findCommentsByAuthor` rejects, we'll have the reason here\n  });\n  ```\n\n  Simple Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let result;\n\n  try {\n    result = findResult();\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n  findResult(function(result, err){\n    if (err) {\n      // failure\n    } else {\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findResult().then(function(result){\n    // success\n  }, function(reason){\n    // failure\n  });\n  ```\n\n  Advanced Example\n  --------------\n\n  Synchronous Example\n\n  ```javascript\n  let author, books;\n\n  try {\n    author = findAuthor();\n    books  = findBooksByAuthor(author);\n    // success\n  } catch(reason) {\n    // failure\n  }\n  ```\n\n  Errback Example\n\n  ```js\n\n  function foundBooks(books) {\n\n  }\n\n  function failure(reason) {\n\n  }\n\n  findAuthor(function(author, err){\n    if (err) {\n      failure(err);\n      // failure\n    } else {\n      try {\n        findBoooksByAuthor(author, function(books, err) {\n          if (err) {\n            failure(err);\n          } else {\n            try {\n              foundBooks(books);\n            } catch(reason) {\n              failure(reason);\n            }\n          }\n        });\n      } catch(error) {\n        failure(err);\n      }\n      // success\n    }\n  });\n  ```\n\n  Promise Example;\n\n  ```javascript\n  findAuthor().\n    then(findBooksByAuthor).\n    then(function(books){\n      // found books\n  }).catch(function(reason){\n    // something went wrong\n  });\n  ```\n\n  @method then\n  @param {Function} onFulfillment\n  @param {Function} onRejection\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise}\n*/Comment.Multiline
\nText.Whitespace
PromiseName.BuiltinPromiseConstructor0.9373any0.0520Promise<any>0.0028complex0.0023void0.0013
.Punctuation
prototypeName.OtherPromise<any>0.3608any0.0493Promise<any>[]0.0309Promise<string>0.0253Promise<{}>0.0200
.Punctuation
thenName.Otherany0.8137Promise<any>0.0612complex0.0486number0.0140Promise<void>0.0108
 Text.Whitespace
=Operator
 Text.Whitespace
thenName.Otherany0.8300Promise<any>0.0439complex0.0199void0.0130Promise<void>0.0121
;Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
PromiseName.BuiltinPromiseConstructor0.9589any0.0319Promise<any>0.0023complex0.0010void0.0010
;Punctuation
\nText.Whitespace
