importKeyword
 Text.Whitespace
mapName.Otherany0.3471complex0.1668U[]0.0846void0.0187Promise<void>0.0073
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./map.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
unzipName.Otherany0.1247boolean0.0648void0.0621complex0.0474string[]0.0260
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./unzip.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * This method is like `unzip` except that it accepts `iteratee` to specify\n * how regrouped values should be combined. The iteratee is invoked with the\n * elements of each group: (...group).\n *\n * @since 3.8.0\n * @category Array\n * @param {Array} array The array of grouped elements to process.\n * @param {Function} iteratee The function to combine\n *  regrouped values.\n * @returns {Array} Returns the new array of regrouped elements.\n * @example\n *\n * const zipped = zip([1, 2], [10, 20], [100, 200])\n * // => [[1, 10, 100], [2, 20, 200]]\n *\n * unzipWith(zipped, add)\n * // => [3, 30, 300]\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
unzipWithName.Othercomplex0.2381any0.2105void0.0980string0.0653boolean0.0568
(Punctuation
arrayName.Otherany0.5802any[]0.0957string[]0.0505string0.0328complex0.0308
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.6421string0.0542boolean0.0185number0.0175Position0.0051
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
(Punctuation
arrayName.Otherany0.6495any[]0.1066string[]0.0500number[]0.0431complex0.0296
 Text.Whitespace
!=Operator
 Text.Whitespace
nullKeyword.Constant
 Text.Whitespace
&&Operator
 Text.Whitespace
arrayName.Otherany0.5667any[]0.2015number[]0.0307string[]0.0234T[]0.0122
.Punctuation
lengthName.Othernumber0.6393any0.3530string0.0050complex0.0009boolean0.0003
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
[Punctuation
]Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
resultName.Otherany0.8765boolean0.0221complex0.0189any[]0.0105number0.0055
 Text.Whitespace
=Operator
 Text.Whitespace
unzipName.Otherany0.7806complex0.0652boolean0.0164any[]0.0159number0.0052
(Punctuation
arrayName.Otherany0.5691any[]0.1768complex0.0637number[]0.0403string[]0.0352
)Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
mapName.Otherany0.6460complex0.1830U[]0.1118void0.0059any[]0.0023
(Punctuation
resultName.Otherany0.8533complex0.0216any[]0.0122string0.0099number0.0063
,Punctuation
 Text.Whitespace
(Punctuation
groupName.Otherany0.8458string0.0183number0.0138Function0.0108complex0.0081
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
iterateeName.Otherany0.6972Function0.0273void0.0102string0.0057Error0.0038
.Punctuation
applyName.Otherany0.9760number0.0080void0.0040complex0.0023Function0.0015
(Punctuation
undefinedKeyword.Constant
,Punctuation
 Text.Whitespace
groupName.Otherany0.5495number0.1284complex0.0463string0.0349undefined0.0104
)Punctuation
)Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
unzipWithName.Otherany0.3231void0.0414complex0.0384string0.0209number0.0146
\nText.Whitespace
