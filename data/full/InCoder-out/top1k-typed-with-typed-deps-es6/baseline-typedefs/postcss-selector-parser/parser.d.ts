import Combinator from './selectors/combinator';
export default class Parser {
    constructor(rule: any, options?: {});
    _errorGenerator(): (message: any, errorOptions: any) => any;
    attribute(): void;
    parseWhitespaceEquivalentTokens(stopPosition: any): any[];
    convertWhitespaceNodesToSpace(nodes: any, requiredSpace?: boolean): {
        space: string;
        rawSpace: string;
    };
    isNamedCombinator(position?: any): boolean;
    namedCombinator(): Combinator;
    combinator(): any;
    comma(): void;
    comment(): void;
    error(message: any, opts: any): void;
    missingBackslash(): void;
    missingParenthesis(): void;
    missingSquareBracket(): void;
    unexpected(): void;
    namespace(): any;
    nesting(): void;
    parentheses(): void;
    pseudo(): void;
    space(): void;
    string(): void;
    universal(namespace: any): any;
    splitWord(namespace: any, firstCallback: any): void;
    word(namespace: any): any;
    loop(): any;
    parse(throwOnParenthesis: any): void;
    expected(description: any, index: any, found: any): void;
    requiredSpace(space: any): any;
    optionalSpace(space: any): any;
    lossySpace(space: any, required: any): any;
    parseParenthesisToken(token: any): any;
    newNode(node: any, namespace: any): any;
    content(token?: any): any;
    get currToken(): any;
    get nextToken(): any;
    get prevToken(): any;
    locateNextMeaningfulToken(startPosition?: any): any;
}
