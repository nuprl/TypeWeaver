declare let source: string, pos: number, end: number;
declare let openTokenDepth: number, templateDepth: number, lastTokenPos: number, lastSlashWasDivision: boolean, templateStack: object, templateStackDepth: number, openTokenPosStack: object, openClassPosStack: object, nextBraceIsClass: boolean, starExportMap: object, lastStarExportSpecifier: Function, _exports: HTMLElement, unsafeGetters: Set, reexports: Error;
declare function resetState(): void;
declare const Import: number;
declare const ExportAssign: number;
declare const ExportStar: number;
declare function parseCJS(source: string, name?: string): object;
declare function decode(str: object): object;
declare function parseSource(cjsSource: Function): boolean;
declare function tryBacktrackAddStarExportBinding(bPos: number): void;
declare function tryParseObjectHasOwnProperty(it_id: string): boolean;
declare function tryParseObjectDefineOrKeys(keys: boolean): void;
declare function readExportsOrModuleDotExports(ch: string): boolean;
declare function tryParseModuleExportsDotAssign(): void;
declare function tryParseExportsDotAssign(assign: boolean): void;
declare function tryParseRequire(requireType: string): boolean;
declare function tryParseLiteralExports(): void;
declare let nonASCIIidentifierStartChars: string;
declare let nonASCIIidentifierChars: string;
declare const nonASCIIidentifierStart: HTMLElement;
declare const nonASCIIidentifier: HTMLElement;
declare const astralIdentifierStartCodes: any[];
declare const astralIdentifierCodes: any[];
declare function isInAstralSet(code: number, set: any[]): boolean;
declare function isIdentifierStart(code: number, astral: number): boolean;
declare function isIdentifierChar(code: number, astral: number): boolean;
declare function identifier(): boolean;
declare function codePointLen(ch: string): number;
declare function codePointAtLast(bPos: number): number;
declare function throwIfImportStatement(): void;
declare function throwIfExportStatement(): Promise;
declare function commentWhitespace(): string;
declare function templateString(): void;
declare function blockComment(): void;
declare function lineComment(): void;
declare function stringLiteral(quote: number): void;
declare function regexCharacterClass(): number;
declare function regularExpression(): void;
declare function isBr(c: number): boolean;
declare function isBrOrWs(c: number): boolean;
declare function isBrOrWsOrPunctuatorNotDot(c: number): boolean;
declare function keywordStart(pos: number): boolean;
declare function readPrecedingKeyword(pos: number, match: string): boolean;
declare function readPrecedingKeyword1(pos: number, ch: number): boolean;
declare function isExpressionKeyword(pos: number): boolean;
declare function isParenKeyword(curPos: number): boolean;
declare function isPunctuator(ch: number): boolean;
declare function isExpressionPunctuator(ch: number): boolean;
declare function isExpressionTerminator(curPos: number): boolean;
declare const initPromise: Promise;
