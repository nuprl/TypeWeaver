Text
/*\n * exit\n * https://github.com/cowboy/node-exit\n *\n * Copyright (c) 2013 "Cowboy" Ben Alman\n * Licensed under the MIT license.\n */Comment.Multiline
\n\nText.Whitespace
'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
moduleKeyword.Reserved
.exportsName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
exitName.Othervoid0.8715any0.1021number0.0061complex0.0042string0.0034
(Punctuation
exitCodeName.Othernumber0.5360any0.4357boolean0.0063void0.0037string0.0022
,Punctuation
 Text.Whitespace
streamsName.Otherany0.5897any[]0.0938boolean0.0392number0.0359complex0.0344
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
streamsName.Otherany0.7363any[]0.0732boolean0.0373complex0.0164string[]0.0139
)Punctuation
 Text.Whitespace
{Punctuation
 Text.Whitespace
streamsName.Otherany[]0.5021any0.2784complex0.0710string[]0.0174number[]0.0070
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
processName.Otherany0.9952complex0.0023Process0.0003T0.0002void0.0002
.Punctuation
stdoutName.Otherany0.9947string0.0020number0.0008void0.0005{}0.0004
,Punctuation
 Text.Whitespace
processName.Otherany0.9971complex0.0010Process0.0004T0.0001void0.0001
.Punctuation
stderrName.Otherany0.9965string0.0018number0.0012void0.0002complex0.0001
]Punctuation
;Punctuation
 Text.Whitespace
}Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
drainCountName.Othernumber0.9872void0.0075any0.0032boolean0.0008string0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
// Actually exit if all streams are drained.Comment.Single
\n  Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
tryToExitName.Othervoid0.9965number0.0011any0.0008boolean0.0005Promise<void>0.0003
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
drainCountName.Othernumber0.9001any0.0632void0.0167string0.0082boolean0.0072
 Text.Whitespace
===Operator
 Text.Whitespace
streamsName.Otherany0.5363any[]0.2058string[]0.0677string0.0147number[]0.0114
.Punctuation
lengthName.Othernumber0.5740any0.4221string0.0015void0.0008complex0.0004
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
processName.Otherany0.9975complex0.0010number0.0002void0.0001Process0.0001
.Punctuation
exitName.Otherany0.9798void0.0174complex0.0010number0.0006Promise<void>0.0003
(Punctuation
exitCodeName.Othernumber0.5831any0.4060boolean0.0040string0.0022void0.0011
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
streamsName.Otherany0.5279any[]0.3467complex0.0375string[]0.0189number[]0.0070
.Punctuation
forEachName.Othervoid0.4167any0.4036complex0.1602v...0.0110number0.0010
(Punctuation
functionKeyword.Declaration
(Punctuation
streamName.Otherany0.7663number0.0125string0.0105Buffer0.0081void0.0042
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
// Count drained streams now, but monitor non-drained streams.Comment.Single
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
streamName.Otherany0.6292Buffer0.0095number0.0077complex0.0036SocketStream0.0035
.Punctuation
bufferSizeName.Othernumber0.5958any0.3986string0.0026boolean0.0010complex0.0010
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
drainCountName.Othernumber0.9934any0.0050void0.0006string0.0004boolean0.0004
++Operator
;Punctuation
\n    Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
streamName.Otherany0.9261number0.0028Buffer0.0009void0.0006Stream<number>0.0005
.Punctuation
writeName.Otherany0.8519void0.1380complex0.0043Promise<void>0.0018number0.0010
(Punctuation
''Literal.String.Single
,Punctuation
 Text.Whitespace
'utf-8'Literal.String.Single
,Punctuation
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
drainCountName.Othernumber0.9934any0.0048void0.0010string0.0003boolean0.0002
++Operator
;Punctuation
\n        Text.Whitespace
tryToExitName.Othervoid0.9732number0.0161any0.0066Promise<void>0.0011complex0.0007
(Punctuation
)Punctuation
;Punctuation
\n      Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
// Prevent further writing.Comment.Single
\n    Text.Whitespace
streamName.Otherany0.6222void0.0046Stream<number>0.0040SocketStream0.0036Promise<void>0.0035
.Punctuation
writeName.Othervoid0.7233any0.2688complex0.0028Promise<void>0.0023number0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
// If all streams were already drained, exit now.Comment.Single
\n  Text.Whitespace
tryToExitName.Othervoid0.9814any0.0125number0.0017Promise<void>0.0014Function0.0009
(Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
// In Windows, when run as a Node.js child process, a script utilizingComment.Single
\n  Text.Whitespace
// this library might just exit with a 0 exit code, regardless. This code,Comment.Single
\n  Text.Whitespace
// despite the fact that it looks a bit crazy, appears to fix that.Comment.Single
\n  Text.Whitespace
processName.Otherany0.9977complex0.0005Process0.0002number0.0001void0.0001
.Punctuation
onName.Otherany0.9693complex0.0192void0.0074Promise<void>0.0003boolean0.0003
(Punctuation
'exit'Literal.String.Single
,Punctuation
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
processName.Otherany0.9973complex0.0013Process0.0001number0.0001void0.0001
.Punctuation
exitName.Otherany0.9869void0.0103complex0.0008number0.0004Promise<any>0.0004
(Punctuation
exitCodeName.Othernumber0.7691any0.2138boolean0.0065string0.0034void0.0018
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
