importKeyword
 Text.Whitespace
concatLimitName.Otherany0.1127boolean0.1017string0.0394complex0.0363string[]0.0210
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./concatLimit.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
awaitifyName.Otherboolean0.2956any0.1785string0.1119complex0.0353string[]0.0260
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/awaitify.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * Applies `iteratee` to each item in `coll`, concatenating the results. Returns\n * the concatenated list. The `iteratee`s are called in parallel, and the\n * results are concatenated as they return. The results array will be returned in\n * the original order of `coll` passed to the `iteratee` function.\n *\n * @name concat\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @alias flatMap\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {AsyncFunction} iteratee - A function to apply to each item in `coll`,\n * which should use an array as its result. Invoked with (item, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished, or an error occurs. Results is an array\n * containing the concatenated results of the `iteratee` function. Invoked with\n * (err, results).\n * @returns A Promise, if no callback is passed\n * @example\n *\n * // dir1 is a directory that contains file1.txt, file2.txt\n * // dir2 is a directory that contains file3.txt, file4.txt\n * // dir3 is a directory that contains file5.txt\n * // dir4 does not exist\n *\n * let directoryList = ['dir1','dir2','dir3'];\n * let withMissingDirectoryList = ['dir1','dir2','dir3', 'dir4'];\n *\n * // Using callbacks\n * async.concat(directoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *    } else {\n *        console.log(results);\n *        // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *    }\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir, function(err, results) {\n *    if (err) {\n *        console.log(err);\n *        // [ Error: ENOENT: no such file or directory ]\n *        // since dir4 does not exist\n *    } else {\n *        console.log(results);\n *    }\n * });\n *\n * // Using Promises\n * async.concat(directoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n *     // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n * }).catch(err => {\n *      console.log(err);\n * });\n *\n * // Error Handling\n * async.concat(withMissingDirectoryList, fs.readdir)\n * .then(results => {\n *     console.log(results);\n * }).catch(err => {\n *     console.log(err);\n *     // [ Error: ENOENT: no such file or directory ]\n *     // since dir4 does not exist\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let results = await async.concat(directoryList, fs.readdir);\n *         console.log(results);\n *         // [ 'file1.txt', 'file2.txt', 'file3.txt', 'file4.txt', file5.txt ]\n *     } catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n * // Error Handling\n * async () => {\n *     try {\n *         let results = await async.concat(withMissingDirectoryList, fs.readdir);\n *         console.log(results);\n *     } catch (err) {\n *         console.log(err);\n *         // [ Error: ENOENT: no such file or directory ]\n *         // since dir4 does not exist\n *     }\n * }\n *\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
concatName.Otherany0.6344string0.0742any[]0.0441complex0.0394number0.0302
(Punctuation
collName.Otherany0.4185any[]0.0447string0.0286number0.0067object0.0062
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.6390number0.0707string0.0645boolean0.0057Buffer0.0042
,Punctuation
 Text.Whitespace
callbackName.Otherany0.4358number0.1179Function0.0780boolean0.0136string0.0111
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
concatLimitName.Otherany0.3097boolean0.1298complex0.0751void0.0551string0.0488
(Punctuation
collName.Otherany0.4257any[]0.0613string0.0215{}0.0154number0.0141
,Punctuation
 Text.Whitespace
InfinityKeyword.Constantnumber0.9842any0.0117string0.0010boolean0.0004void0.0004
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.6472number0.0975string0.0217Function0.0068any[]0.0065
,Punctuation
 Text.Whitespace
callbackName.Otherany0.5352Function0.1411number0.0690void0.0687boolean0.0092
)Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
awaitifyName.Otherany0.4779void0.2588complex0.0911number0.0156string0.0150
(Punctuation
concatName.Otherany0.8116any[]0.0517number0.0140string0.0113complex0.0104
,Punctuation
 Text.Whitespace
3Literal.Number.Float
)Punctuation
;Punctuation
\nText.Whitespace
