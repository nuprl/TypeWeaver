// Generated by LiveScript 1.6.0
var values: Function, keys: Function, pairsToObj: Function, objToPairs: Function, listsToObj: any[], objToLists: Function, empty: Function, each: object, map: any[], compact: Function, filter: object, reject: object, partition: any[], find: object;
values = function(object: object){
  var i$: string, x: string, results$: any[] = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object: object){
  var x: string, results$: any[] = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object: any[]){
  var i$: number, len$: Function, x: object, resultObj$: object = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs = function(object: object){
  var key: string, value: string, results$: any[] = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys: any[], values: object){
  var i$: number, len$: Function, i: number, key: string, resultObj$: object = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists = function(object: object){
  var keys: any[], values: any[], key: string, value: string;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object: object){
  var x: string;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f: Function, object: object){
  var i$: string, x: string;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f: Function, object: object){
  var k: Function, x: string, resultObj$: object = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact = function(object: object){
  var k: Function, x: Function, resultObj$: object = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter = curry$(function(f: Function, object: object){
  var k: Function, x: string, resultObj$: object = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject = curry$(function(f: Function, object: object){
  var k: Function, x: string, resultObj$: object = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition = curry$(function(f: Function, object: object){
  var passed: object, failed: object, k: Function, x: string;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f: Function, object: object){
  var i$: string, x: string;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});

export default {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};

function curry$(f: any[], bound: boolean): boolean{
  var context: string,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: any[] = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}