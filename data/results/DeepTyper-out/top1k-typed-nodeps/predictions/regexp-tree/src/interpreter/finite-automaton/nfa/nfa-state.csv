Text
/**\n * The MIT License (MIT)\n * Copyright (c) 2017-present Dmitry Soshnikov <dmitry.soshnikov@gmail.com>\n */Comment.Multiline
\n\nText.Whitespace
'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
StateName.Otherany0.9781State0.0139complex0.0017string0.0011boolean0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
requireName.Other
(Punctuation
'../state'Literal.String.Single
)Punctuation
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
{Punctuation
EPSILONName.Otherany0.8221complex0.0925string0.0244number0.0116any[]0.0077
}Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
requireName.Other
(Punctuation
'../special-symbols'Literal.String.Single
)Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * NFA state.\n *\n * Allows nondeterministic transitions to several states on the\n * same symbol, and also epsilon-transitions.\n */Comment.Multiline
\nText.Whitespace
classKeyword.Declaration
 Text.Whitespace
NFAStateName.Otherany0.9978complex0.0017string0.0002State0.0001number0.0000
 Text.Whitespace
extendsKeyword
 Text.Whitespace
StateName.Otherany0.9986State0.0006complex0.0005string0.0001number0.0001
 Text.Whitespace
{Punctuation
\n\n  Text.Whitespace
/**\n   * Whether this state matches a string.\n   *\n   * We maintain set of visited epsilon-states to avoid infinite loops\n   * when an epsilon-transition goes eventually to itself.\n   *\n   * NOTE: this function is rather "educational", since we use DFA for strings\n   * matching. DFA is built on top of NFA, and uses fast transition table.\n   */Comment.Multiline
\n  Text.Whitespace
matchesName.Othercomplex0.3288boolean0.2890any0.2227Promise<boolean>0.0226Set<any>0.0161
(Punctuation
stringKeyword.Type
,Punctuation
 Text.Whitespace
visitedName.OtherSet<any>0.8167Set<string>0.0732any0.0355boolean0.0077State0.0040
 Text.Whitespace
=Operator
 Text.Whitespace
newOperator.Wordany0.4385Set<any>0.2731Set<string>0.0421SetConstructor0.0362boolean0.0272
 Text.Whitespace
SetName.BuiltinSetConstructor0.9747Set<any>0.0118any0.0042Set<string>0.0007boolean0.0005
(Punctuation
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
// An epsilon-state has been visited, stop to avoid infinite loop.Comment.Single
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
visitedName.OtherSet<any>0.6092Set<string>0.1376complex0.0918boolean0.0253any0.0205
.Punctuation
hasName.Otherboolean0.9791any0.0151string0.0010complex0.0009Set<any>0.0005
(Punctuation
thisKeyword
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
visitedName.OtherSet<any>0.7548Set<string>0.1315any0.0115boolean0.0090RegExp0.0052
.Punctuation
addName.OtherSet<any>0.5693Set<string>0.1865any0.1482boolean0.0104complex0.0074
(Punctuation
thisKeyword
)Punctuation
;Punctuation
\n\n    Text.Whitespace
// No symbols left..Comment.Single
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
stringKeyword.Type
.Punctuation
lengthName.Othernumber0.9366any0.0529string0.0043boolean0.0040complex0.0013
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
// .. and we're in the accepting state.Comment.Single
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
thisKeyword
.Punctuation
acceptingName.Otherboolean0.8623any0.0277string0.0088complex0.0083RegExp0.0074
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n      Text.Whitespace
}Punctuation
\n\n      Text.Whitespace
// Check if we can reach any accepting state fromComment.Single
\n      Text.Whitespace
// on the epsilon transitions.Comment.Single
\n      Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
nextStateName.OtherState0.7767Set<any>0.0206any0.0168complex0.0164RegExp0.0050
 Text.Whitespace
ofKeyword
 Text.Whitespace
thisKeyword
.Punctuation
getTransitionsOnSymbolName.Otherboolean0.2571complex0.1318State0.0906any0.0685Set<any>0.0393
(Punctuation
EPSILONName.Otherany0.3819complex0.0519State0.0372RegExp0.0307Set<any>0.0093
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nextStateName.OtherState0.7360any0.0253Set<any>0.0230complex0.0104RegExp0.0074
.Punctuation
matchesName.Otherboolean0.6526complex0.1795any0.0566Promise<boolean>0.0101State0.0091
(Punctuation
''Literal.String.Single
,Punctuation
 Text.Whitespace
visitedName.OtherSet<any>0.3985any0.1690RegExp0.0761Set<string>0.0665boolean0.0524
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n          Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n        Text.Whitespace
}Punctuation
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
// Else, we get some symbols.Comment.Single
\n    Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
symbolName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
[Punctuation
0Literal.Number.Float
]Punctuation
;Punctuation
\n    Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
restName.Otherstring0.4782string[]0.4356complex0.0339any0.0288boolean0.0057
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
sliceName.Otherstring0.5694string[]0.3013complex0.0361any0.0335any[]0.0055
(Punctuation
1Literal.Number.Float
)Punctuation
;Punctuation
\n\n    Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
symbolTransitionsName.Otherboolean0.4157complex0.0929string0.0660string[]0.0367RegExp0.0295
 Text.Whitespace
=Operator
 Text.Whitespace
thisKeyword
.Punctuation
getTransitionsOnSymbolName.Otherboolean0.4338string0.1649string[]0.0707complex0.0515any0.0418
(Punctuation
symbolName.Other
)Punctuation
;Punctuation
\n    Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
nextStateName.OtherState0.6670any0.0580complex0.0445Set<any>0.0399RegExp0.0048
 Text.Whitespace
ofKeyword
 Text.Whitespace
symbolTransitionsName.Othercomplex0.1801any0.0958Set<any>0.0730string[]0.0721RegExp0.0304
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nextStateName.OtherState0.7129Set<any>0.0528complex0.0197any0.0143RegExp0.0074
.Punctuation
matchesName.Otherboolean0.9246complex0.0354any0.0110true0.0030string[]0.0030
(Punctuation
restName.Otherstring0.3036string[]0.2266any0.1630complex0.0783RegExp0.0447
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
// If we couldn't match on symbol, check still epsilon-transitionsComment.Single
\n    Text.Whitespace
// without consuming the symbol (i.e. continue from `string`, not `rest`).Comment.Single
\n    Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
nextStateName.OtherState0.6939Set<any>0.0337complex0.0237any0.0232RegExp0.0106
 Text.Whitespace
ofKeyword
 Text.Whitespace
thisKeyword
.Punctuation
getTransitionsOnSymbolName.Othercomplex0.2069boolean0.1485any0.0791State0.0776Set<any>0.0390
(Punctuation
EPSILONName.Otherany0.3468complex0.0748RegExp0.0451State0.0259Set<any>0.0101
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
nextStateName.OtherState0.7103any0.0381Set<any>0.0237complex0.0223RegExp0.0061
.Punctuation
matchesName.Otherboolean0.4960complex0.3444any0.0653State0.0089Set<any>0.0085
(Punctuation
stringKeyword.Type
,Punctuation
 Text.Whitespace
visitedName.OtherSet<any>0.3795any0.2160RegExp0.0554Set<string>0.0469boolean0.0372
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
returnKeyword
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
returnKeyword
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
/**\n   * Returns an ε-closure for this state:\n   * self + all states following ε-transitions.\n   */Comment.Multiline
\n  Text.Whitespace
getEpsilonClosureName.Otherboolean0.5430any0.0811string0.0733void0.0420complex0.0250
(Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
thisKeyword
.Punctuation
_epsilonClosureName.Otherboolean0.8498any0.0400string0.0101complex0.0100Set<any>0.0061
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
epsilonTransitionsName.Otherboolean0.2052any0.0763complex0.0659State0.0633Set<any>0.0552
 Text.Whitespace
=Operator
 Text.Whitespace
thisKeyword
.Punctuation
getTransitionsOnSymbolName.Otherboolean0.3529any0.1272complex0.1187string0.0803State0.0244
(Punctuation
EPSILONName.Othercomplex0.2623any0.2246State0.0406RegExp0.0181string0.0141
)Punctuation
;Punctuation
\n      Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
closureName.Otherany0.2498Set<any>0.1026Set<string>0.0387boolean0.0385Function0.0238
 Text.Whitespace
=Operator
 Text.Whitespace
thisKeyword
.Punctuation
_epsilonClosureName.OtherSet<any>0.7019Set<string>0.1858any0.0113Set<number>0.0044SetConstructor0.0042
 Text.Whitespace
=Operator
 Text.Whitespace
newOperator.WordSet<any>0.3424any0.2236SetConstructor0.0997Set<string>0.0803object0.0267
 Text.Whitespace
SetName.BuiltinSetConstructor0.9805Set<any>0.0108any0.0025Set<string>0.0004Set<number>0.0002
(Punctuation
)Punctuation
;Punctuation
\n      Text.Whitespace
closureName.Otherany0.5706Set<any>0.0533Function0.0244complex0.0231boolean0.0210
.Punctuation
addName.OtherSet<any>0.2990any0.2543void0.1937Set<string>0.0996boolean0.0134
(Punctuation
thisKeyword
)Punctuation
;Punctuation
\n      Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
nextStateName.OtherState0.5451Set<any>0.1077any0.0643complex0.0444Set<string>0.0050
 Text.Whitespace
ofKeyword
 Text.Whitespace
epsilonTransitionsName.OtherSet<any>0.1563any0.1207complex0.0998any[]0.0561string[]0.0355
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
closureName.Othercomplex0.4019any0.1133Set<any>0.1035Set<string>0.0342boolean0.0323
.Punctuation
hasName.Otherboolean0.9681any0.0173Set<any>0.0029State0.0017complex0.0016
(Punctuation
nextStateName.OtherState0.7121any0.0663Set<any>0.0294complex0.0277Element0.0032
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n          Text.Whitespace
closureName.Otherany0.5252State0.0299complex0.0292Function0.0228Set<any>0.0197
.Punctuation
addName.Otherany0.3056Set<any>0.1966void0.1198Set<string>0.1069State0.0423
(Punctuation
nextStateName.OtherState0.7649any0.0612complex0.0214Set<any>0.0147Element0.0024
)Punctuation
;Punctuation
\n          Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
nextClosureName.OtherState0.2280any0.0595boolean0.0557Set<any>0.0455complex0.0427
 Text.Whitespace
=Operator
 Text.Whitespace
nextStateName.OtherState0.6997any0.0325Set<any>0.0080complex0.0061IState0.0040
.Punctuation
getEpsilonClosureName.OtherState0.1742boolean0.0393Set<any>0.0355any0.0281string[]0.0233
(Punctuation
)Punctuation
;Punctuation
\n          Text.Whitespace
nextClosureName.Otherany0.1660complex0.1204string[]0.0803any[]0.0650State0.0535
.Punctuation
forEachName.Othervoid0.5632complex0.1667any0.1269v...0.0886State0.0122
(Punctuation
stateName.OtherState0.4115any0.1259boolean0.0231void0.0155string0.0155
 Text.Whitespace
=>Punctuation
 Text.Whitespace
closureName.Otherany0.2357boolean0.0489State0.0377Function0.0368Set<any>0.0334
.Punctuation
addName.OtherSet<any>0.2385Set<string>0.1672any0.1247void0.0892State0.0399
(Punctuation
stateName.OtherState0.3654any0.1140string0.0816complex0.0288number0.0241
)Punctuation
)Punctuation
;Punctuation
\n        Text.Whitespace
}Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
returnKeyword
 Text.Whitespace
thisKeyword
.Punctuation
_epsilonClosureName.Otherany0.1940boolean0.1221complex0.0528State0.0431string0.0376
;Punctuation
\n  Text.Whitespace
}Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
moduleKeyword.Reserved
.exportsName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
NFAStateName.Otherany0.3146string0.1280RegExp0.0338boolean0.0254complex0.0219
;Punctuation
\nText.Whitespace
