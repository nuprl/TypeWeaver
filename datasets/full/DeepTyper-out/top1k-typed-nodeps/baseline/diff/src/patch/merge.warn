Found multiple declarations; skipping rest of declarations.
	let mineIndex: number = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
Found multiple declarations; skipping rest of declarations.
	let mineIndex: number = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
Found multiple declarations; skipping rest of declarations.
	let mineIndex: number = 0, theirsIndex = 0, mineOffset = 0, theirsOffset = 0;
Found multiple declarations; skipping rest of declarations.
	let mineCurrent: any = mine.hunks[mineIndex] || {oldStart: Infinity}, theirsCurr
Found multiple declarations; skipping rest of declarations.
	let mine: any = {offset: mineOffset, lines: mineLines, index: 0}, their = {offse
Found multiple declarations; skipping rest of declarations.
	let mineCurrent: any = mine.lines[mine.index], theirCurrent = their.lines[their.
Found multiple declarations; skipping rest of declarations.
	let myChanges: any = collectChange(mine), theirChanges = collectChange(their);
Found multiple declarations; skipping rest of declarations.
	let myChanges: any = collectChange(mine), theirChanges = collectContext(their, m
Found multiple declarations; skipping rest of declarations.
	let ret: any[] = [], operation = state.lines[state.index][0];
Found multiple declarations; skipping rest of declarations.
	let changes: any[] = [], merged = [], matchIndex = 0, contextChanges = false, co
Found multiple declarations; skipping rest of declarations.
	let changes: any[] = [], merged = [], matchIndex = 0, contextChanges = false, co
Found multiple declarations; skipping rest of declarations.
	let changes: any[] = [], merged = [], matchIndex = 0, contextChanges = false, co
Found multiple declarations; skipping rest of declarations.
	let changes: any[] = [], merged = [], matchIndex = 0, contextChanges = false, co
Found multiple declarations; skipping rest of declarations.
	let change: any = state.lines[state.index], match = matchChanges[matchIndex];

