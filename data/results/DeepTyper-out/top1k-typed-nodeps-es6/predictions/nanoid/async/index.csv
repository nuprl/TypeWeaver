importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
randomFillName.Otherany0.5795string0.0547number0.0522boolean0.0275complex0.0264
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'crypto'Literal.String.Single
\n\nText.Whitespace
importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
urlAlphabetName.Otherany0.5391string0.0846number0.0556complex0.0385Promise<{}>0.0369
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'../url-alphabet/index.js'Literal.String.Single
\n\nText.Whitespace
Text
// `crypto.randomFill()` is a little faster than `crypto.randomBytes()`,Comment.Single
\nText.Whitespace
// because it is possible to use in combination with `Buffer.allocUnsafe()`.Comment.Single
\nText.Whitespace
exportKeyword
 Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
randomName.Otherany0.3210number0.1482Promise<{}>0.1161Promise<any>0.0898Promise<number>0.0509
 Text.Whitespace
=Operator
 Text.Whitespace
bytesName.Otherany0.7299number0.1044Promise<{}>0.0137any[]0.0089Promise<number>0.0059
 Text.Whitespace
=>Punctuation
\n  Text.Whitespace
newOperator.Wordany0.4946PromiseConstructor0.1424Promise<{}>0.1081void0.0386Promise<any>0.0337
 Text.Whitespace
PromiseName.BuiltinPromiseConstructor0.9923any0.0062void0.0003complex0.0003Promise<any>0.0002
(Punctuation
(Punctuation
resolveName.Othervoid0.9673any0.0245complex0.0020Function0.0014number0.0011
,Punctuation
 Text.Whitespace
rejectName.Othervoid0.9846any0.0106Function0.0020boolean0.0006complex0.0004
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
// `Buffer.allocUnsafe()` is faster because it doesnâ€™t flush the memory.Comment.Single
\n    Text.Whitespace
// Memory flushing is unnecessary since the buffer allocation itself resetsComment.Single
\n    Text.Whitespace
// the memory with the new bytes.Comment.Single
\n    Text.Whitespace
randomFillName.Othervoid0.5488any0.3828number0.0122Promise<any>0.0108Promise<void>0.0095
(Punctuation
BufferName.Otherany0.9957Buffer0.0009void0.0004string0.0004complex0.0003
.Punctuation
allocUnsafeName.Otherany0.9410number0.0124complex0.0097string0.0080void0.0054
(Punctuation
bytesName.Otherany0.3974number0.3615string0.0419complex0.0390any[]0.0256
)Punctuation
,Punctuation
 Text.Whitespace
(Punctuation
errName.Otherany0.7762Error0.1970string0.0084Buffer0.0029number0.0020
,Punctuation
 Text.Whitespace
bufName.Otherany0.5604Buffer0.1450number0.0558string0.0425ArrayBuffer0.0256
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
errName.Otherany0.5748Error0.3977string0.0083boolean0.0022number0.0019
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
/* c8 ignore next */Comment.Multiline
\n        Text.Whitespace
rejectName.Othervoid0.9589any0.0330complex0.0020Function0.0017number0.0007
(Punctuation
errName.Otherany0.7280Error0.2469string0.0081number0.0022complex0.0018
)Punctuation
\n      Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
resolveName.Othervoid0.9500any0.0378complex0.0026Function0.0025Promise<void>0.0013
(Punctuation
bufName.Otherany0.6465Buffer0.1272string0.0460number0.0298ArrayBuffer0.0250
)Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
)Punctuation
\n  Text.Whitespace
}Punctuation
)Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
customAlphabetName.Othernumber0.8192any0.0713string0.0390Promise<any>0.0076complex0.0058
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
alphabetName.Othernumber0.7631any0.0790string0.0503number[]0.0022boolean0.0022
,Punctuation
 Text.Whitespace
defaultSizeName.Othernumber0.9864any0.0060string0.0036boolean0.0007number[]0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
21Literal.Number.Float
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
// First, a bitmask is necessary to generate the ID. The bitmask makes bytesComment.Single
\n  Text.Whitespace
// values closer to the alphabet size. The bitmask calculates the closestComment.Single
\n  Text.Whitespace
// `2^31 - 1` number, which exceeds the alphabet size.Comment.Single
\n  Text.Whitespace
// For example, the bitmask for the alphabet size 30 is 31 (00011111).Comment.Single
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
maskName.Othernumber0.9508any0.0278string0.0169boolean0.0024void0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
2Literal.Number.Float
 Text.Whitespace
<<Operator
 Text.Whitespace
(Punctuation
31Literal.Number.Float
 Text.Whitespace
-Operator
 Text.Whitespace
MathName.BuiltinMath0.9999number0.0000any0.0000ArrayConstructor0.0000number[]0.0000
.Punctuation
clz32Name.Othernumber0.9158complex0.0096number[]0.0092any0.0059string0.0057
(Punctuation
(Punctuation
alphabetName.Otherstring[]0.4578any0.1499number[]0.1415number0.0576string0.0293
.Punctuation
lengthName.Othernumber0.9838any0.0152string0.0006complex0.0001boolean0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
|Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
)Punctuation
)Punctuation
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
\n  Text.Whitespace
// Though, the bitmask solution is not perfect since the bytes exceedingComment.Single
\n  Text.Whitespace
// the alphabet size are refused. Therefore, to reliably generate the ID,Comment.Single
\n  Text.Whitespace
// the random bytes redundancy has to be satisfied.Comment.Single
\n\n  Text.Whitespace
// Note: every hardware random generator call is performance expensive,Comment.Single
\n  Text.Whitespace
// because the system call for entropy collection takes a lot of time.Comment.Single
\n  Text.Whitespace
// So, to avoid additional system calls, extra bytes are requested in advance.Comment.Single
\n\n  Text.Whitespace
// Next, a step determines how many random bytes to generate.Comment.Single
\n  Text.Whitespace
// The number of random bytes gets decided upon the ID size, mask,Comment.Single
\n  Text.Whitespace
// alphabet size, and magic number 1.6 (using 1.6 peaks at performanceComment.Single
\n  Text.Whitespace
// according to benchmarks).Comment.Single
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
stepName.Othernumber0.9955any0.0028string0.0010boolean0.0003void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
MathName.BuiltinMath1.0000number0.0000ArrayConstructor0.0000PointerCoordinates0.0000ClientRect0.0000
.Punctuation
ceilName.Othernumber0.9974any0.0006string0.0003complex0.0002boolean0.0002
(Punctuation
(Punctuation
1.6Literal.Number.Float
 Text.Whitespace
*Operator
 Text.Whitespace
maskName.Othernumber0.9690any0.0278string0.0024boolean0.0002complex0.0001
 Text.Whitespace
*Operator
 Text.Whitespace
defaultSizeName.Othernumber0.9795any0.0126string0.0053complex0.0005number[]0.0004
)Punctuation
 Text.Whitespace
/Operator
 Text.Whitespace
alphabetName.Othernumber0.2778any0.2306string[]0.1325number[]0.0847string0.0835
.Punctuation
lengthName.Othernumber0.9838any0.0148string0.0008void0.0001boolean0.0001
)Punctuation
\n\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
tickName.Otherany0.8044number0.1239Promise<any>0.0293Promise<number>0.0073string0.0071
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
idName.Othernumber0.7522string0.1858any0.0576complex0.0013number[]0.0006
,Punctuation
 Text.Whitespace
sizeName.Othernumber0.9640string0.0181any0.0167boolean0.0003complex0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
defaultSizeName.Othernumber0.9539string0.0290any0.0142boolean0.0009complex0.0002
)Punctuation
 Text.Whitespace
=>Punctuation
\n    Text.Whitespace
randomName.Otherany0.7174number0.2075Promise<any>0.0139Promise<number>0.0056void0.0041
(Punctuation
stepName.Othernumber0.9664string0.0163any0.0085void0.0008boolean0.0006
)Punctuation
.Punctuation
thenName.Otherany0.9897complex0.0053number0.0020Promise<any>0.0006void0.0004
(Punctuation
bytesName.Otherany0.4492number0.2136string0.0172number[]0.0168any[]0.0125
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
// A compact alternative for `for (var i = 0; i < step; i++)`.Comment.Single
\n      Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9834any0.0146string0.0010boolean0.0007void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
stepName.Othernumber0.9747any0.0180string0.0052void0.0005boolean0.0005
\n      Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
iName.Othernumber0.9804any0.0184boolean0.0004string0.0004complex0.0001
--Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
// Adding `|| ''` refuses a random byte that exceeds the alphabet size.Comment.Single
\n        Text.Whitespace
idName.Otherstring0.4671number0.4480any0.0821complex0.0008boolean0.0006
 Text.Whitespace
+=Operator
 Text.Whitespace
alphabetName.Otherany0.3895complex0.1857number0.1597string0.0786number[]0.0281
[Punctuation
bytesName.Othernumber[]0.2049any0.1780number0.0609string[]0.0430complex0.0296
[Punctuation
iName.Othernumber0.9901any0.0059string0.0035boolean0.0001complex0.0000
]Punctuation
 Text.Whitespace
&Operator
 Text.Whitespace
maskName.Othernumber0.6995any0.1857string0.1080boolean0.0005void0.0004
]Punctuation
 Text.Whitespace
||Operator
 Text.Whitespace
''Literal.String.Single
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
idName.Otherstring0.8449any0.0828number0.0564string[]0.0054number[]0.0028
.Punctuation
lengthName.Othernumber0.9759any0.0212string0.0022complex0.0002void0.0001
 Text.Whitespace
===Operator
 Text.Whitespace
sizeName.Othernumber0.9397string0.0345any0.0239complex0.0007number[]0.0002
)Punctuation
 Text.Whitespace
returnKeyword
 Text.Whitespace
idName.Othernumber0.5881string0.2846any0.1208complex0.0013void0.0008
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
/* c8 ignore next */Comment.Multiline
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
tickName.Otherany0.5530number0.1030Promise<number>0.0864Promise<any>0.0820Promise<{}>0.0429
(Punctuation
idName.Othernumber0.5839string0.3457any0.0642complex0.0022number[]0.0007
,Punctuation
 Text.Whitespace
sizeName.Othernumber0.9119string0.0622any0.0228complex0.0013number[]0.0004
)Punctuation
\n    Text.Whitespace
}Punctuation
)Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
sizeName.Othernumber0.7013any0.1548string0.1351number[]0.0009Promise<any>0.0008
 Text.Whitespace
=>Punctuation
 Text.Whitespace
tickName.Otherany0.6755number0.0845Promise<any>0.0639Promise<number>0.0339Promise<{}>0.0249
(Punctuation
''Literal.String.Single
,Punctuation
 Text.Whitespace
sizeName.Othernumber0.9741string0.0163any0.0079complex0.0004number[]0.0003
)Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
nanoidName.Othernumber0.6500any0.1602string0.0352Promise<any>0.0308Promise<string>0.0088
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
sizeName.Othernumber0.9899any0.0052string0.0039boolean0.0002number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
21Literal.Number.Float
)Punctuation
 Text.Whitespace
=>Punctuation
\n  Text.Whitespace
randomName.Otherany0.6872number0.0897Promise<any>0.0842Promise<void>0.0147Promise<number>0.0104
(Punctuation
sizeName.Othernumber0.8720string0.1036any0.0202boolean0.0007Promise<any>0.0003
)Punctuation
.Punctuation
thenName.Otherany0.9886complex0.0056number0.0022Promise<any>0.0006void0.0005
(Punctuation
bytesName.Otherany0.2338number0.1808number[]0.0279any[]0.0237complex0.0182
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
idName.Otherstring0.8967number0.0680any0.0322complex0.0011boolean0.0010
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
\n    Text.Whitespace
// A compact alternative for `for (var i = 0; i < step; i++)`.Comment.Single
\n    Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
sizeName.Othernumber0.9879any0.0092string0.0020boolean0.0003complex0.0001
--Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
// It is incorrect to use bytes exceeding the alphabet size.Comment.Single
\n      Text.Whitespace
// The following mask reduces the random byte in the 0-255 valueComment.Single
\n      Text.Whitespace
// range to the 0-63 value range. Therefore, adding hacks, suchComment.Single
\n      Text.Whitespace
// as empty string fallback or magic numbers, is unneccessary becauseComment.Single
\n      Text.Whitespace
// the bitmask trims bytes down to the alphabet size.Comment.Single
\n      Text.Whitespace
idName.Otherstring0.5725number0.3686any0.0556complex0.0011boolean0.0007
 Text.Whitespace
+=Operator
 Text.Whitespace
urlAlphabetName.Otherany0.2606number0.2535string0.1451complex0.0936string[]0.0526
[Punctuation
bytesName.Otherany0.2932number[]0.1657number0.1036complex0.0562string[]0.0248
[Punctuation
sizeName.Othernumber0.9197string0.0661any0.0126complex0.0003boolean0.0002
]Punctuation
 Text.Whitespace
&Operator
 Text.Whitespace
63Literal.Number.Float
]Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
idName.Otherstring0.5556number0.3495any0.0835complex0.0036boolean0.0009
\n  Text.Whitespace
}Punctuation
)Punctuation
\nText.Whitespace
