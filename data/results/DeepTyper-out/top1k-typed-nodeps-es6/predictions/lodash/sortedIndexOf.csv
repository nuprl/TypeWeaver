importKeyword
 Text.Whitespace
baseSortedIndexName.Otherany0.2819boolean0.0481complex0.0256string0.0239void0.0146
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./.internal/baseSortedIndex.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
eqName.Otherany0.5793boolean0.1021number0.0525string0.0187void0.0125
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./eq.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * This method is like `indexOf` except that it performs a binary\n * search on a sorted `array`.\n *\n * @since 4.0.0\n * @category Array\n * @param {Array} array The array to inspect.\n * @param {*} value The value to search for.\n * @returns {number} Returns the index of the matched value, else `-1`.\n * @example\n *\n * sortedIndexOf([4, 5, 5, 5, 6], 5)\n * // => 1\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
sortedIndexOfName.Otherstring0.3044any0.2946complex0.0579number0.0537boolean0.0508
(Punctuation
arrayName.Otherany0.5478string0.0959any[]0.0846string[]0.0427number0.0237
,Punctuation
 Text.Whitespace
valueName.Otherany0.5991string0.3060number0.0432string[]0.0046boolean0.0043
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
lengthName.Othernumber0.5955any0.3832string0.0162boolean0.0020complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
arrayName.Otherany0.7428number0.0707any[]0.0517number[]0.0303string0.0202
 Text.Whitespace
==Operator
 Text.Whitespace
nullKeyword.Constant
 Text.Whitespace
?Operator
 Text.Whitespace
0Name.Other
 Text.Whitespace
:Operator
 Text.Whitespace
array.lengthKeyword.Type
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
lengthName.Othernumber0.8805any0.1143string0.0032boolean0.0009void0.0002
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
indexName.Othernumber0.8188any0.1575string0.0161boolean0.0034complex0.0014
 Text.Whitespace
=Operator
 Text.Whitespace
baseSortedIndexName.Othernumber0.5707any0.3191string0.0574complex0.0170boolean0.0133
(Punctuation
arrayName.Otherany0.4816any[]0.1777number0.0653string[]0.0642string0.0640
,Punctuation
 Text.Whitespace
valueName.Otherany0.5341string0.3244number0.1157complex0.0061boolean0.0030
)Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
indexName.Othernumber0.8243any0.1658string0.0061boolean0.0017complex0.0004
 Text.Whitespace
<Operator
 Text.Whitespace
lengthName.Othernumber0.8230any0.1683string0.0062boolean0.0012complex0.0003
 Text.Whitespace
&&Operator
 Text.Whitespace
eqName.Otherany0.6643number0.1822boolean0.1253string0.0074void0.0024
(Punctuation
arrayName.Otherany0.6217any[]0.1402string[]0.0981number[]0.0273complex0.0217
[Punctuation
indexName.Othernumber0.8241any0.1629string0.0101complex0.0009boolean0.0003
]Punctuation
,Punctuation
 Text.Whitespace
valueName.Otherany0.6880string0.1795number0.1096boolean0.0026complex0.0026
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
returnKeyword
 Text.Whitespace
indexName.Othernumber0.8382any0.1515string0.0068boolean0.0010complex0.0006
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
-Operator
1Literal.Number.Float
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
sortedIndexOfName.Otherany0.4564number0.0442string0.0421complex0.0167boolean0.0124
\nText.Whitespace
