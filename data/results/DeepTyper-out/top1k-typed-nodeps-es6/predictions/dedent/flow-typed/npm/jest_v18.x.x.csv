Text
// flow-typed signature: e49570b0f5e396c7206dda452bd6f004Comment.Single
\nText.Whitespace
// flow-typed version: 1590d813f4/jest_v18.x.x/flow_>=v0.33.xComment.Single
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestMockFnName.Otherany0.9948complex0.0025string0.0009symbol0.0002number0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
(Punctuation
...argsName.Other
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9997Array0.0001Type0.0000FunctionConstructor0.0000PromiseConstructor0.0000
<Operator
anyName.Other
>Operator
)Punctuation
:Operator
 Text.Whitespace
anyName.Other
,Punctuation
\n  Text.Whitespace
/**\n   * An object for introspecting mock calls\n   */Comment.Multiline
\n  Text.Whitespace
mockName.Othercomplex0.9903any[]0.0024any0.0019void0.0005any[][]0.0005
:Operator
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
/**\n     * An array that represents all calls that have been made into this mock\n     * function. Each call is represented by an array of arguments that were\n     * passed during the call.\n     */Comment.Multiline
\n    Text.Whitespace
callsName.Othercomplex0.4966any[][]0.2719any[]0.1560number[]0.0173string[]0.0137
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9999Array0.0000PromiseConstructor0.0000any[]0.0000any0.0000
<Operator
ArrayName.BuiltinArrayConstructor0.9996Array0.0001any[]0.0000FunctionConstructor0.0000complex0.0000
<Operator
anyName.Other
>>Operator
,Punctuation
\n    Text.Whitespace
/**\n     * An array that contains all the object instances that have been\n     * instantiated from this mock function.\n     */Comment.Multiline
\n    Text.Whitespace
instancesName.Otherany0.6792complex0.1819number0.0442any[]0.0353void0.0083
:Operator
 Text.Whitespace
mixedKeyword.Typeany0.6867complex0.1369number0.0617void0.0415any[]0.0205
,Punctuation
\n  Text.Whitespace
}Punctuation
,Punctuation
\n  Text.Whitespace
/**\n   * Resets all information stored in the mockFn.mock.calls and\n   * mockFn.mock.instances arrays. Often this is useful when you want to clean\n   * up a mock's usage data between two assertions.\n   */Comment.Multiline
\n  Text.Whitespace
mockClearName.OtherFunction0.5505void0.1129complex0.0581any0.0318Function[]0.0213
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
FunctionName.BuiltinFunctionConstructor0.9988Function0.0010Function[]0.0000DateConstructor0.0000any0.0000
,Punctuation
\n  Text.Whitespace
/**\n   * Resets all information stored in the mock. This is useful when you want to\n   * completely restore a mock back to its initial state.\n   */Comment.Multiline
\n  Text.Whitespace
mockResetName.OtherFunction0.9304FunctionConstructor0.0155any0.0154Function[]0.0129Object0.0066
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
FunctionName.BuiltinFunctionConstructor0.9991Function0.0007Function[]0.0000DateConstructor0.0000any0.0000
,Punctuation
\n  Text.Whitespace
/**\n   * Accepts a function that should be used as the implementation of the mock.\n   * The mock itself will still record all calls that go into and instances\n   * that come from itself -- the only difference is that the implementation\n   * will also be executed when the mock is called.\n   */Comment.Multiline
\n  Text.Whitespace
mockImplementationName.OtherFunction0.5395any0.3762void0.0278complex0.0234Function[]0.0056
(Punctuation
fnName.OtherFunction0.9920Object0.0024Function[]0.0014any0.0010FunctionConstructor0.0007
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9991Function0.0007DateConstructor0.0000Function[]0.0000any0.0000
)Punctuation
:Operator
 Text.Whitespace
JestMockFnName.Otherany0.9546Function0.0166void0.0087number0.0071string0.0035
,Punctuation
\n  Text.Whitespace
/**\n   * Accepts a function that will be used as an implementation of the mock for\n   * one call to the mocked function. Can be chained so that multiple function\n   * calls produce different results.\n   */Comment.Multiline
\n  Text.Whitespace
mockImplementationOnceName.Otherany0.9442complex0.0198Function0.0046void0.0024any[]0.0023
(Punctuation
fnName.OtherFunction0.9818Object0.0075Function[]0.0033any0.0013FunctionConstructor0.0007
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9990Function0.0007Function[]0.0001DateConstructor0.0000any0.0000
)Punctuation
:Operator
 Text.Whitespace
JestMockFnName.Otherany0.9319void0.0285number0.0079Function0.0077string0.0062
,Punctuation
\n  Text.Whitespace
/**\n   * Just a simple sugar function for returning `this`\n   */Comment.Multiline
\n  Text.Whitespace
mockReturnThisName.Othervoid0.8917complex0.0198Function0.0190boolean0.0152any0.0127
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Deprecated: use jest.fn(() => value) instead\n   */Comment.Multiline
\n  Text.Whitespace
mockReturnValueName.Otherany0.9476void0.0136string0.0063Function0.0055Promise<any>0.0044
(Punctuation
valueName.Otherany0.9692string0.0162number0.0057any[]0.0023complex0.0008
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestMockFnName.Otherany0.9689string0.0100number0.0067void0.0059boolean0.0014
,Punctuation
\n  Text.Whitespace
/**\n   * Sugar for only returning a value once inside your mock\n   */Comment.Multiline
\n  Text.Whitespace
mockReturnValueOnceName.Otherany0.9362complex0.0042Function0.0029void0.0018Promise<any>0.0017
(Punctuation
valueName.Otherany0.9810string0.0096number0.0029any[]0.0012Function0.0007
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestMockFnName.Otherany0.9233void0.0150complex0.0125string0.0112number0.0107
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestAsymmetricEqualityTypeName.Otherany0.9975complex0.0015string0.0003number0.0001boolean0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
/**\n   * A custom Jasmine equality tester\n   */Comment.Multiline
\n  Text.Whitespace
asymmetricMatchName.Otherboolean0.7786void0.0746complex0.0387any0.0295string0.0225
(Punctuation
valueName.Otherstring0.4783any0.2396boolean0.1576number0.0670Function0.0138
:Operator
 Text.Whitespace
mixedKeyword.Typeany0.8806boolean0.0677string0.0225number0.0206complex0.0017
)Punctuation
:Operator
 Text.Whitespace
booleanKeyword.Type
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestCallsTypeName.Otherany0.9985complex0.0008string0.0003boolean0.0001number0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
allArgsName.Otherany0.4690complex0.1085boolean0.0773any[]0.0409void0.0352
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
mixedName.Otherany0.9651boolean0.0118string0.0083void0.0035number0.0032
,Punctuation
\n  Text.Whitespace
allName.Otherboolean0.6230any0.1823any[]0.0449complex0.0167Promise<boolean>0.0154
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
mixedName.Otherany0.9576boolean0.0230string0.0062number0.0045any[]0.0023
,Punctuation
\n  Text.Whitespace
anyName.Other
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
booleanKeyword.Type
,Punctuation
\n  Text.Whitespace
countName.Othernumber0.9838any0.0053complex0.0038number[]0.0014boolean0.0014
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
numberKeyword.Type
,Punctuation
\n  Text.Whitespace
firstName.Otherany0.6578complex0.2201Promise<any>0.0106Function0.0096void0.0091
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
mixedName.Otherany0.9761number0.0082void0.0054string0.0037boolean0.0024
,Punctuation
\n  Text.Whitespace
mostRecentName.Otherany0.3560number0.1439complex0.1134Function0.0527void0.0430
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
mixedName.Otherany0.9789void0.0097string0.0035number0.0026complex0.0015
,Punctuation
\n  Text.Whitespace
resetName.Othervoid0.9840Promise<void>0.0103complex0.0011Function0.0009any0.0005
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestClockTypeName.Otherany0.9974complex0.0016void0.0003string0.0002number0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
installName.Othervoid0.9896complex0.0029Promise<void>0.0020Function0.0016any0.0007
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
mockDateName.Othervoid0.9351complex0.0093Promise<void>0.0074number0.0070boolean0.0056
(Punctuation
dateName.OtherDate0.9292number0.0470boolean0.0021any0.0019Object0.0013
:Operator
 Text.Whitespace
DateKeyword.TypeDateConstructor0.9994FunctionConstructor0.0002Date0.0002Date[]0.0000ObjectConstructor0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
tickName.Othervoid0.9946Promise<void>0.0022complex0.0005boolean0.0005number0.0004
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
uninstallName.Othervoid0.9857Promise<void>0.0032complex0.0030any0.0014boolean0.0012
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestMatcherResultName.Otherany0.9990complex0.0005string0.0003number0.0001void0.0000
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
message?Name.Other
:Operator
 Text.Whitespace
stringKeyword.Type
 Text.Whitespace
|Operator
 Text.Whitespace
(Punctuation
)Punctuation
=>Punctuation
stringKeyword.Type
,Punctuation
\n  Text.Whitespace
passName.Otherboolean0.9992string0.0002false0.0001Boolean0.0001any0.0001
:Operator
 Text.Whitespace
booleanKeyword.Type
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestMatcherName.Otherany0.9983string0.0008complex0.0003void0.0003boolean0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
actualName.Otherany0.9935string0.0043number0.0007complex0.0005void0.0001
:Operator
 Text.Whitespace
anyKeyword.Type
,Punctuation
 Text.Whitespace
expectedName.Otherany0.9899string0.0078number0.0012complex0.0002any[]0.0002
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
JestMatcherResultName.Otherany0.9722void0.0079string0.0049complex0.0047number0.0030
;Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestExpectTypeName.Otherany0.9980complex0.0011string0.0003number0.0001void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
notName.Otherany0.3731void0.2939string0.0732number0.0655complex0.0224
:Operator
 Text.Whitespace
JestExpectTypeKeyword.Typeany0.9717string0.0081void0.0065complex0.0045number0.0035
,Punctuation
\n  Text.Whitespace
/**\n   * If you have a mock function, you can use .lastCalledWith to test what\n   * arguments it was last called with.\n   */Comment.Multiline
\n  Text.Whitespace
lastCalledWithName.Othervoid0.8809any0.0434complex0.0356boolean0.0127number0.0050
(Punctuation
...argsName.Other
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9996Array0.0001PromiseConstructor0.0000Type0.0000FunctionConstructor0.0000
<Operator
anyName.Other
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * toBe just checks that a value is what you expect. It uses === to check\n   * strict equality.\n   */Comment.Multiline
\n  Text.Whitespace
toBeName.Otherany0.9634void0.0164complex0.0056boolean0.0043any[]0.0021
(Punctuation
valueName.Otherany0.9492number0.0344string0.0048any[]0.0023void0.0022
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toHaveBeenCalled to ensure that a mock function got called.\n   */Comment.Multiline
\n  Text.Whitespace
toBeCalledName.Othervoid0.9167complex0.0453Promise<void>0.0052void)[]0.0042any0.0032
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeCalledWith to ensure that a mock function was called with\n   * specific arguments.\n   */Comment.Multiline
\n  Text.Whitespace
toBeCalledWithName.Othervoid0.5938any0.3778complex0.0054number0.0030any[]0.0028
(Punctuation
...argsName.Other
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9996Array0.0002FunctionConstructor0.0000Math0.0000any0.0000
<Operator
anyName.Other
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Using exact equality with floating point numbers is a bad idea. Rounding\n   * means that intuitive things fail.\n   */Comment.Multiline
\n  Text.Whitespace
toBeCloseToName.Otherany0.9822void0.0049number0.0041string0.0025complex0.0020
(Punctuation
numName.Othernumber0.9989string0.0003any0.0003boolean0.0003number[]0.0001
:Operator
 Text.Whitespace
numberKeyword.Type
,Punctuation
 Text.Whitespace
deltaName.Otherany0.6093number0.3674void0.0123string0.0049boolean0.0034
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeDefined to check that a variable is not undefined.\n   */Comment.Multiline
\n  Text.Whitespace
toBeDefinedName.Othervoid0.9146boolean0.0520complex0.0169any0.0029Promise<void>0.0025
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeFalsy when you don't care what a value is, you just want to\n   * ensure a value is false in a boolean context.\n   */Comment.Multiline
\n  Text.Whitespace
toBeFalsyName.Othervoid0.9649complex0.0129any0.0099boolean0.0022Promise<void>0.0016
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * To compare floating point numbers, you can use toBeGreaterThan.\n   */Comment.Multiline
\n  Text.Whitespace
toBeGreaterThanName.Othercomplex0.4775any0.3692void0.0952number0.0133any[]0.0034
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * To compare floating point numbers, you can use toBeGreaterThanOrEqual.\n   */Comment.Multiline
\n  Text.Whitespace
toBeGreaterThanOrEqualName.Othervoid0.4263complex0.2682any0.0819Promise<void>0.0099Object0.0086
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * To compare floating point numbers, you can use toBeLessThan.\n   */Comment.Multiline
\n  Text.Whitespace
toBeLessThanName.Otherany0.7787void0.1222complex0.0878number0.0037Object0.0017
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * To compare floating point numbers, you can use toBeLessThanOrEqual.\n   */Comment.Multiline
\n  Text.Whitespace
toBeLessThanOrEqualName.Othervoid0.8791any0.0470complex0.0408number0.0129Promise<void>0.0040
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeInstanceOf(Class) to check that an object is an instance of a\n   * class.\n   */Comment.Multiline
\n  Text.Whitespace
toBeInstanceOfName.Othervoid0.5665any0.2152complex0.1103number0.0575Function0.0103
(Punctuation
clsName.Otherany0.6221complex0.1117number0.0605void0.0411number[]0.0122
:Operator
 Text.Whitespace
ClassKeyword.Typeany0.6774complex0.0273Type0.0131Array0.0110Object0.0106
<Operator
*Operator
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * .toBeNull() is the same as .toBe(null) but the error messages are a bit\n   * nicer.\n   */Comment.Multiline
\n  Text.Whitespace
toBeNullName.Othervoid0.9806complex0.0107Promise<void>0.0036any0.0016boolean0.0003
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeTruthy when you don't care what a value is, you just want to\n   * ensure a value is true in a boolean context.\n   */Comment.Multiline
\n  Text.Whitespace
toBeTruthyName.Othervoid0.8911complex0.0590Promise<void>0.0139any0.0134boolean0.0058
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toBeUndefined to check that a variable is undefined.\n   */Comment.Multiline
\n  Text.Whitespace
toBeUndefinedName.Othervoid0.9000complex0.0597any0.0299boolean0.0047Promise<void>0.0013
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toContain when you want to check that an item is in a list. For\n   * testing the items in the list, this uses ===, a strict equality check.\n   */Comment.Multiline
\n  Text.Whitespace
toContainName.Othervoid0.4931any0.3151complex0.0856any[]0.0331number0.0137
(Punctuation
itemName.Otherany0.9571void0.0160number0.0150string0.0045complex0.0017
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toContainEqual when you want to check that an item is in a list. For\n   * testing the items in the list, this matcher recursively checks the\n   * equality of all fields, rather than checking for object identity.\n   */Comment.Multiline
\n  Text.Whitespace
toContainEqualName.Othervoid0.9719any0.0135complex0.0074Promise<void>0.0022number0.0011
(Punctuation
itemName.Otherany0.9646number0.0148void0.0118string0.0033complex0.0014
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toEqual when you want to check that two objects have the same value.\n   * This matcher recursively checks the equality of all fields, rather than\n   * checking for object identity.\n   */Comment.Multiline
\n  Text.Whitespace
toEqualName.Otherany0.9850complex0.0054void0.0050boolean0.0017any[]0.0008
(Punctuation
valueName.Otherany0.9631number0.0291string0.0030complex0.0011any[]0.0010
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toHaveBeenCalled to ensure that a mock function got called.\n   */Comment.Multiline
\n  Text.Whitespace
toHaveBeenCalledName.Othervoid0.9690complex0.0189any0.0029Promise<void>0.0028Function0.0010
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toHaveBeenCalledTimes to ensure that a mock function got called exact\n   * number of times.\n   */Comment.Multiline
\n  Text.Whitespace
toHaveBeenCalledTimesName.Otherany0.8293void0.1399complex0.0197any[]0.0018string0.0014
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toHaveBeenCalledWith to ensure that a mock function was called with\n   * specific arguments.\n   */Comment.Multiline
\n  Text.Whitespace
toHaveBeenCalledWithName.Otherany0.6923void0.2336complex0.0142string0.0127boolean0.0108
(Punctuation
...argsName.Other
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9995Array0.0002FunctionConstructor0.0000PromiseConstructor0.0000Math0.0000
<Operator
anyName.Other
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Check that an object has a .length property and it is set to a certain\n   * numeric value.\n   */Comment.Multiline
\n  Text.Whitespace
toHaveLengthName.Otherany0.6983void0.1259complex0.1228any[]0.0142string0.0051
(Punctuation
numberKeyword.Type
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   *\n   */Comment.Multiline
\n  Text.Whitespace
toHavePropertyName.Otherany0.5568complex0.1975void0.1923string0.0105number0.0073
(Punctuation
propPathName.Otherstring0.9975any0.0014number0.0005boolean0.0002string[]0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
value?Name.Other
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toMatch to check that a string matches a regular expression.\n   */Comment.Multiline
\n  Text.Whitespace
toMatchName.Othervoid0.7545complex0.1710any0.0483boolean0.0051string0.0040
(Punctuation
regexpName.OtherRegExp0.9691RegExp[]0.0022boolean0.0022HTMLElement0.0011Date0.0009
:Operator
 Text.Whitespace
RegExpKeyword.TypeRegExpConstructor0.9975RegExp0.0003RegExp[]0.0000BooleanConstructor0.0000Set<number>0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toMatchObject to check that a javascript object matches a subset of the properties of an object.\n   */Comment.Multiline
\n  Text.Whitespace
toMatchObjectName.Othervoid0.3784any0.3621complex0.1234any[]0.0313Object0.0166
(Punctuation
objectName.OtherObject0.8784Object[]0.0091complex0.0087object0.0063ObjectConstructor0.0059
:Operator
 Text.Whitespace
ObjectKeyword.TypeObjectConstructor0.9996Object0.0003FunctionConstructor0.0000Object[]0.0000number0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * This ensures that a React component matches the most recent snapshot.\n   */Comment.Multiline
\n  Text.Whitespace
toMatchSnapshotName.Othervoid0.6631complex0.2258any0.0911Promise<void>0.0047string0.0024
(Punctuation
name?Name.Other
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toThrow to test that a function throws when it is called.\n   */Comment.Multiline
\n  Text.Whitespace
toThrowName.Otherany0.3815void0.3396complex0.2004string0.0113boolean0.0040
(Punctuation
message?Name.Other
:Operator
 Text.Whitespace
stringKeyword.Type
 Text.Whitespace
|Operator
 Text.Whitespace
ErrorName.ExceptionErrorConstructor0.9989Error0.0003complex0.0001any0.0001void0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toThrowError to test that a function throws a specific error when it\n   * is called. The argument can be a string for the error message, a class for\n   * the error, or a regex that should match the error.\n   */Comment.Multiline
\n  Text.Whitespace
toThrowErrorName.Otherany0.8341void0.0834complex0.0721Object0.0018this0.0018
(Punctuation
message?Name.Other
:Operator
 Text.Whitespace
stringKeyword.Type
 Text.Whitespace
|Operator
 Text.Whitespace
ErrorName.ExceptionErrorConstructor0.9932complex0.0012Error0.0006any0.0006void0.0002
 Text.Whitespace
|Operator
 Text.Whitespace
RegExpName.BuiltinRegExpConstructor0.9981RegExp0.0002RegExp[]0.0000BooleanConstructor0.0000FunctionConstructor0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Use .toThrowErrorMatchingSnapshot to test that a function throws a error\n   * matching the most recent snapshot when it is called.\n   */Comment.Multiline
\n  Text.Whitespace
toThrowErrorMatchingSnapshotName.Othervoid0.9765complex0.0080Promise<void>0.0050any0.0020Function0.0009
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestObjectTypeName.Otherany0.9959complex0.0019string0.0012number0.0002void0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
/**\n   *  Disables automatic mocking in the module loader.\n   *\n   *  After this method is called, all `require()`s will return the real\n   *  versions of each module (rather than a mocked version).\n   */Comment.Multiline
\n  Text.Whitespace
disableAutomockName.Otherany0.5704complex0.1232void0.0685string0.0346Function0.0218
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9471string0.0213void0.0096complex0.0043number0.0042
,Punctuation
\n  Text.Whitespace
/**\n   * An un-hoisted version of disableAutomock\n   */Comment.Multiline
\n  Text.Whitespace
autoMockOffName.Otherany0.5514complex0.1163void0.0582Function0.0231string0.0148
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.8740string0.0374void0.0257number0.0122boolean0.0080
,Punctuation
\n  Text.Whitespace
/**\n   * Enables automatic mocking in the module loader.\n   */Comment.Multiline
\n  Text.Whitespace
enableAutomockName.Otherany0.5125complex0.1232void0.0614Function0.0214string0.0165
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.8468string0.0377void0.0353number0.0144boolean0.0095
,Punctuation
\n  Text.Whitespace
/**\n   * An un-hoisted version of enableAutomock\n   */Comment.Multiline
\n  Text.Whitespace
autoMockOnName.Otherany0.5025complex0.1389void0.0773Function0.0184string0.0145
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.8404void0.0452string0.0330number0.0144boolean0.0102
,Punctuation
\n  Text.Whitespace
/**\n   * Resets the state of all mocks. Equivalent to calling .mockReset() on every\n   * mocked function.\n   */Comment.Multiline
\n  Text.Whitespace
resetAllMocksName.Otherany0.4210void0.1321complex0.1298Promise<void>0.0202Function0.0166
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.7566void0.0911string0.0424number0.0173boolean0.0134
,Punctuation
\n  Text.Whitespace
/**\n   * Removes any pending timers from the timer system.\n   */Comment.Multiline
\n  Text.Whitespace
clearAllTimersName.Othervoid0.9499complex0.0111Promise<void>0.0089any0.0040boolean0.0040
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * The same as `mock` but not moved to the top of the expectation by\n   * babel-jest.\n   */Comment.Multiline
\n  Text.Whitespace
doMockName.Otherany0.4339complex0.2089string0.1445void0.1017boolean0.0149
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9978any0.0014number0.0002boolean0.0001complex0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
moduleKeyword.Reserved
Factory?Name.Other
:Operator
 Text.Whitespace
anyName.Other
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9427string0.0172void0.0070complex0.0066number0.0042
,Punctuation
\n  Text.Whitespace
/**\n   * The same as `unmock` but not moved to the top of the expectation by\n   * babel-jest.\n   */Comment.Multiline
\n  Text.Whitespace
dontMockName.Otherany0.2829complex0.2302string0.1818void0.0859boolean0.0558
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9967any0.0019number0.0002boolean0.0001RegExp0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9519string0.0270void0.0085Function0.0027number0.0022
,Punctuation
\n  Text.Whitespace
/**\n   * Returns a new, unused mock function. Optionally takes a mock\n   * implementation.\n   */Comment.Multiline
\n  Text.Whitespace
fnName.OtherFunction0.9346void0.0130complex0.0125any0.0086boolean0.0055
(Punctuation
implementation?Name.Other
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9993Function0.0005any0.0000Function[]0.0000DateConstructor0.0000
)Punctuation
:Operator
 Text.Whitespace
JestMockFnName.Otherany0.9407Function0.0212number0.0078complex0.0044string0.0039
,Punctuation
\n  Text.Whitespace
/**\n   * Determines if the given function is a mocked function.\n   */Comment.Multiline
\n  Text.Whitespace
isMockFunctionName.OtherFunction0.3432boolean0.2622complex0.1532any0.0762void0.0507
(Punctuation
fnName.OtherFunction0.9714Object0.0062boolean0.0058any0.0027FunctionConstructor0.0022
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9992Function0.0005DateConstructor0.0001Function[]0.0000any0.0000
)Punctuation
:Operator
 Text.Whitespace
booleanKeyword.Type
,Punctuation
\n  Text.Whitespace
/**\n   * Given the name of a module, use the automatic mocking system to generate a\n   * mocked version of the module for you.\n   */Comment.Multiline
\n  Text.Whitespace
genMockFromModuleName.Otherany0.5898complex0.2204string0.1145boolean0.0250void0.0145
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9959any0.0029number0.0003boolean0.0002complex0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
anyName.Other
,Punctuation
\n  Text.Whitespace
/**\n   * Mocks a module with an auto-mocked version when it is being required.\n   *\n   * The second argument can be used to specify an explicit module factory that\n   * is being run instead of using Jest's automocking feature.\n   *\n   * The third argument can be used to create virtual mocks -- mocks of modules\n   * that don't exist anywhere in the system.\n   */Comment.Multiline
\n  Text.Whitespace
mockName.Othercomplex0.6647void0.2333any0.0583string0.0043Function0.0036
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9981any0.0010number0.0003boolean0.0001complex0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
moduleKeyword.Reserved
Factory?Name.Other
:Operator
 Text.Whitespace
anyName.Other
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9024void0.0533string0.0109number0.0070complex0.0062
,Punctuation
\n  Text.Whitespace
/**\n   * Resets the module registry - the cache of all required modules. This is\n   * useful to isolate modules where local state might conflict between tests.\n   */Comment.Multiline
\n  Text.Whitespace
resetModulesName.Othervoid0.3460any0.2702complex0.0955Function0.0529Promise<void>0.0246
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9670void0.0127string0.0072number0.0039boolean0.0029
,Punctuation
\n  Text.Whitespace
/**\n   * Exhausts the micro-task queue (usually interfaced in node via\n   * process.nextTick).\n   */Comment.Multiline
\n  Text.Whitespace
runAllTicksName.Othervoid0.9908Promise<void>0.0027complex0.0017boolean0.0011Function0.0010
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Exhausts the macro-task queue (i.e., all tasks queued by setTimeout(),\n   * setInterval(), and setImmediate()).\n   */Comment.Multiline
\n  Text.Whitespace
runAllTimersName.Othervoid0.9949Promise<void>0.0015complex0.0014any0.0005Function0.0004
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Exhausts all tasks queued by setImmediate().\n   */Comment.Multiline
\n  Text.Whitespace
runAllImmediatesName.Othervoid0.9907complex0.0040Promise<void>0.0022any0.0007Function0.0005
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Executes only the macro task queue (i.e. all tasks queued by setTimeout()\n   * or setInterval() and setImmediate()).\n   */Comment.Multiline
\n  Text.Whitespace
runTimersToTimeName.Othervoid0.9577complex0.0112number0.0092any0.0087Promise<void>0.0042
(Punctuation
msToRunName.Othernumber0.9957any0.0013boolean0.0010string0.0009void0.0003
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Executes only the macro-tasks that are currently pending (i.e., only the\n   * tasks that have been queued by setTimeout() or setInterval() up to this\n   * point)\n   */Comment.Multiline
\n  Text.Whitespace
runOnlyPendingTimersName.Othervoid0.9760complex0.0070Promise<void>0.0066any0.0025Function0.0019
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
/**\n   * Explicitly supplies the mock object that the module system should return\n   * for the specified module. Note: It is recommended to use jest.mock()\n   * instead.\n   */Comment.Multiline
\n  Text.Whitespace
setMockName.Otherany0.3997complex0.2201void0.1437string0.1285Promise<void>0.0184
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9981any0.0011number0.0003boolean0.0001complex0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
moduleKeyword.Reserved
ExportsName.Otherany0.9754string0.0149number0.0020complex0.0012Function0.0010
:Operator
 Text.Whitespace
anyName.Other
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9479string0.0157complex0.0068void0.0063number0.0039
,Punctuation
\n  Text.Whitespace
/**\n   * Indicates that the module system should never return a mocked version of\n   * the specified module from require() (e.g. that it should always return the\n   * real module).\n   */Comment.Multiline
\n  Text.Whitespace
unmockName.Otherany0.4093complex0.1654string0.1636void0.0716Promise<void>0.0225
(Punctuation
moduleKeyword.Reserved
NameName.Otherstring0.9970any0.0019number0.0002string[]0.0001complex0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9893string0.0055void0.0024complex0.0009number0.0006
,Punctuation
\n  Text.Whitespace
/**\n   * Instructs Jest to use fake versions of the standard timer functions\n   * (setTimeout, setInterval, clearTimeout, clearInterval, nextTick,\n   * setImmediate and clearImmediate).\n   */Comment.Multiline
\n  Text.Whitespace
useFakeTimersName.Otherany0.7182void0.0400Function0.0283Promise<any>0.0161string0.0122
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9710string0.0135number0.0042void0.0034complex0.0027
,Punctuation
\n  Text.Whitespace
/**\n   * Instructs Jest to use the real versions of the standard timer functions.\n   */Comment.Multiline
\n  Text.Whitespace
useRealTimersName.Otherany0.4367Function0.0704void0.0319Promise<any>0.0294Promise<void>0.0246
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestObjectTypeName.Otherany0.9792string0.0087number0.0029complex0.0027void0.0025
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
typeKeyword.Reserved
 Text.Whitespace
JestSpyTypeName.Otherany0.9974complex0.0014string0.0007number0.0001void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
callsName.Othercomplex0.6863any0.1364number0.0374Promise<void>0.0331void0.0142
:Operator
 Text.Whitespace
JestCallsTypeKeyword.Typeany0.9318complex0.0305number0.0126void0.0068string0.0060
,Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/** Runs this function after every test inside this context */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
afterEachName.OtherFunction0.4878void0.2322any0.1113complex0.0787string0.0287
(Punctuation
fnName.OtherFunction0.9787Object0.0077FunctionConstructor0.0033any0.0014Function[]0.0010
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9996Function0.0004DateConstructor0.0000any0.0000Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
;Punctuation
\nText.Whitespace
/** Runs this function before every test inside this context */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
beforeEachName.OtherFunction0.5088void0.2209any0.1025complex0.0776boolean0.0356
(Punctuation
fnName.OtherFunction0.9875Object0.0048FunctionConstructor0.0016any0.0012Function[]0.0010
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9994Function0.0004DateConstructor0.0000any0.0000Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
;Punctuation
\nText.Whitespace
/** Runs this function after all tests have finished inside this context */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
afterAllName.OtherFunction0.3692any0.3174void0.1146Object0.0393boolean0.0115
(Punctuation
fnName.OtherFunction0.9758Object0.0129Function[]0.0019any0.0017FunctionConstructor0.0011
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9995Function0.0004DateConstructor0.0000any0.0000Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
;Punctuation
\nText.Whitespace
/** Runs this function before any tests have started inside this context */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
beforeAllName.OtherFunction0.0549any0.0546void0.0281boolean0.0088Lifecycle0.0087
(Punctuation
fnName.OtherFunction0.9809Object0.0063FunctionConstructor0.0022Function[]0.0012any0.0011
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9994Function0.0005DateConstructor0.0000any0.0000Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
;Punctuation
\nText.Whitespace
/** A context for grouping tests together */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
describeName.Otherany0.7053Function0.1394complex0.1239void0.0089Object0.0024
(Punctuation
nameName.Otherstring0.9995number0.0002any0.0001boolean0.0001string[]0.0000
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fnName.OtherFunction0.9781Object0.0099Function[]0.0025any0.0012boolean0.0011
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9993Function0.0005DateConstructor0.0000any0.0000Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
;Punctuation
\n\nText.Whitespace
/** An individual test unit */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
itName.Othercomplex0.9938any0.0024Object0.0004Function0.0002object0.0002
:Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
/**\n   * An individual test unit\n   *\n   * @param {string} Name of Test\n   * @param {Function} Test\n   */Comment.Multiline
\n  Text.Whitespace
(Punctuation
nameName.Otherstring0.9994number0.0002any0.0001string[]0.0001boolean0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fn?Name.Other
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9990Function0.0006DateConstructor0.0001Function[]0.0000Object0.0000
)Punctuation
:Operator
 Text.Whitespace
?Operator
PromiseName.BuiltinPromiseConstructor0.9979any0.0015complex0.0002Promise<any>0.0001Promise<void>0.0000
<Operator
voidOperator.Word
>Operator
,Punctuation
\n  Text.Whitespace
/**\n   * Only run this test\n   *\n   * @param {string} Name of Test\n   * @param {Function} Test\n   */Comment.Multiline
\n  Text.Whitespace
onlyName.OtherPromise<void>0.5719complex0.1871void0.0525Promise<string>0.0316any0.0272
(Punctuation
nameName.Otherstring0.9993any0.0001number0.0001string[]0.0001boolean0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fn?Name.Other
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9990Function0.0005DateConstructor0.0001Function[]0.0000Object0.0000
)Punctuation
:Operator
 Text.Whitespace
?Operator
PromiseName.BuiltinPromiseConstructor0.9974any0.0019complex0.0002Promise<any>0.0001Promise<void>0.0000
<Operator
voidOperator.Word
>Operator
,Punctuation
\n  Text.Whitespace
/**\n   * Skip running this test\n   *\n   * @param {string} Name of Test\n   * @param {Function} Test\n   */Comment.Multiline
\n  Text.Whitespace
skipName.Othervoid0.3507Promise<void>0.1587any0.1017complex0.0918Function0.0254
(Punctuation
nameName.Otherstring0.9993any0.0002number0.0002string[]0.0001boolean0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fn?Name.Other
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9990Function0.0006DateConstructor0.0001Function[]0.0000Object0.0000
)Punctuation
:Operator
 Text.Whitespace
?Operator
PromiseName.BuiltinPromiseConstructor0.9974any0.0018complex0.0002Promise<any>0.0001Promise<T>0.0000
<Operator
voidOperator.Word
>Operator
,Punctuation
\n  Text.Whitespace
/**\n   * Run the test concurrently\n   *\n   * @param {string} Name of Test\n   * @param {Function} Test\n   */Comment.Multiline
\n  Text.Whitespace
concurrentName.Othernumber0.4107void0.2710Promise<void>0.1580any0.0381complex0.0204
(Punctuation
nameName.Otherstring0.9992number0.0002any0.0001boolean0.0001string[]0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fn?Name.Other
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9987Function0.0008DateConstructor0.0001Function[]0.0000Object0.0000
)Punctuation
:Operator
 Text.Whitespace
?Operator
PromiseName.BuiltinPromiseConstructor0.9976any0.0015complex0.0002Promise<any>0.0001Promise<T>0.0000
<Operator
voidOperator.Word
>Operator
,Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
fitName.Otherany0.2485string0.2093Promise<any>0.1643complex0.0514void0.0455
(Punctuation
nameName.Otherstring0.9995number0.0002any0.0001boolean0.0001string[]0.0000
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
fnName.OtherFunction0.9266Object0.0298string0.0132boolean0.0086any0.0083
:Operator
 Text.Whitespace
FunctionKeyword.TypeFunctionConstructor0.9988Function0.0007DateConstructor0.0001any0.0001Function[]0.0000
)Punctuation
:Operator
 Text.Whitespace
?Operator
PromiseName.BuiltinPromiseConstructor0.9976any0.0018complex0.0001Promise<any>0.0001Promise<void>0.0000
<Operator
voidOperator.Word
>Operator
;Punctuation
\nText.Whitespace
/** An individual test unit */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
testName.Otherany0.9713number0.0086string0.0044complex0.0025boolean0.0017
:Operator
 Text.Whitespace
typeofKeyword.Type
 Text.Whitespace
itName.Otherany0.6176complex0.3613Object0.0038any[]0.0034number0.0019
;Punctuation
\nText.Whitespace
/** A disabled group of tests */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
xdescribeName.Otherany0.9574string0.0278number0.0060complex0.0029boolean0.0007
:Operator
 Text.Whitespace
typeofKeyword.Type
 Text.Whitespace
describeName.Otherany0.8478complex0.1298Function0.0080Object0.0040number0.0027
;Punctuation
\nText.Whitespace
/** A focused group of tests */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
fdescribeName.Otherany0.9174complex0.0284string0.0193Object0.0070number0.0029
:Operator
 Text.Whitespace
typeofKeyword.Type
 Text.Whitespace
describeName.Otherany0.8437complex0.1242Function0.0136Object0.0060number0.0023
;Punctuation
\nText.Whitespace
/** A disabled individual test */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
xitName.Otherany0.9632number0.0130string0.0066complex0.0014Promise<any>0.0014
:Operator
 Text.Whitespace
typeofKeyword.Type
 Text.Whitespace
itName.Otherany0.7037complex0.2727Object0.0054number0.0032any[]0.0026
;Punctuation
\nText.Whitespace
/** A disabled individual test */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
xtestName.Otherany0.9815number0.0054string0.0032complex0.0020Function0.0011
:Operator
 Text.Whitespace
typeofKeyword.Type
 Text.Whitespace
itName.Otherany0.6949complex0.2803Object0.0051any[]0.0026number0.0025
;Punctuation
\n\nText.Whitespace
/** The expect function is used every time you want to test a value */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
expectName.Othercomplex0.9969any0.0017{}0.0001Object0.0001any[]0.0001
:Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
/** The object that you want to make assertions against */Comment.Multiline
\n  Text.Whitespace
(Punctuation
valueName.Otherany0.9548string0.0144number0.0140Object0.0035Function0.0016
:Operator
 Text.Whitespace
anyKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestExpectTypeName.Otherany0.9891void0.0034number0.0020string0.0019complex0.0010
,Punctuation
\n  Text.Whitespace
/** Add additional Jasmine matchers to Jest's roster */Comment.Multiline
\n  Text.Whitespace
extendName.Otherany0.3394void0.1172Function0.0946number0.0717complex0.0532
(Punctuation
matchersName.Othercomplex0.9986any0.0007any[]0.0003void0.0000{}0.0000
:Operator
 Text.Whitespace
{Punctuation
[Punctuation
nameName.Otherstring0.9990number0.0004any0.0002boolean0.0001string[]0.0001
:Operator
stringKeyword.Type
]Punctuation
:Operator
 Text.Whitespace
JestMatcherName.Otherany0.9694number0.0123string0.0077void0.0064complex0.0013
}Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
assertionsName.Othervoid0.7373complex0.1317any0.0161Promise<void>0.0154number0.0066
(Punctuation
expectedAssertionsName.Othernumber0.9959any0.0012boolean0.0011string0.0006void0.0004
:Operator
 Text.Whitespace
numberKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
anyName.Other
(Punctuation
valueName.Otherany0.7928string0.0778number0.0386complex0.0350any[]0.0163
:Operator
 Text.Whitespace
mixedKeyword.Typeany0.9730void0.0064complex0.0061number0.0054string0.0043
)Punctuation
:Operator
 Text.Whitespace
JestAsymmetricEqualityTypeName.Otherany0.8240void0.1118number0.0199string0.0120complex0.0067
,Punctuation
\n  Text.Whitespace
anythingName.Othervoid0.9868Promise<void>0.0049complex0.0024any0.0011boolean0.0008
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
arrayContainingName.Othervoid0.9685complex0.0082Promise<void>0.0071any0.0071number0.0012
(Punctuation
valueName.Otherany0.6794complex0.1297any[]0.0699Object0.0367number0.0178
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9997Array0.0001FunctionConstructor0.0000PromiseConstructor0.0000Math0.0000
<Operator
mixedName.Otherany0.9961number0.0022complex0.0005symbol0.0002string0.0002
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
objectContainingName.Othervoid0.9557any0.0197complex0.0074Promise<void>0.0019string0.0016
(Punctuation
valueName.OtherObject0.8297number0.0432any0.0369string0.0100object0.0080
:Operator
 Text.Whitespace
ObjectKeyword.TypeObjectConstructor0.9988Object0.0009Object[]0.0000FunctionConstructor0.0000DateConstructor0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
stringMatchingName.Othervoid0.4089any0.2290complex0.0789Object0.0170string0.0162
(Punctuation
valueName.Otherstring0.9926number0.0029any0.0023Object0.0004boolean0.0003
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
// TODO handle return typeComment.Single
\nText.Whitespace
// http://jasmine.github.io/2.4/introduction.html#section-SpiesComment.Single
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
spyOnName.Otherany0.9829complex0.0049string0.0011Function0.0008Object0.0007
(Punctuation
valueName.Otherany0.8367string0.0789number0.0228Object0.0148complex0.0101
:Operator
 Text.Whitespace
mixedKeyword.Typeany0.9874string0.0052number0.0027complex0.0014boolean0.0010
,Punctuation
 Text.Whitespace
methodName.Otherstring0.9761boolean0.0047Object0.0040any0.0030number0.0027
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
ObjectName.BuiltinObjectConstructor0.9968Object0.0028Object[]0.0001any0.0000number0.0000
;Punctuation
\n\nText.Whitespace
/** Holds all functions related to manipulating test runner */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
jestName.Otherany0.9477string0.0105number0.0024Function0.0021boolean0.0019
:Operator
 Text.Whitespace
JestObjectTypeKeyword.Typeany0.9992complex0.0003string0.0001number0.0001void0.0001
\n\nText.Whitespace
Text
/**\n * The global Jamine object, this is generally not exposed as the public API,\n * using features inside here could break in later versions of Jest.\n */Comment.Multiline
\nText.Whitespace
declareKeyword.Reserved
 Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
jasmineName.Othercomplex0.9978any0.0013Object0.0002{}0.0001any[]0.0001
:Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
DEFAULT_TIMEOUT_INTERVALName.Othernumber0.9971string0.0012any0.0011boolean0.0003number[]0.0001
:Operator
 Text.Whitespace
numberKeyword.Type
,Punctuation
\n  Text.Whitespace
anyName.Other
(Punctuation
valueName.Otherany0.7605number0.0825string0.0793complex0.0238Object0.0071
:Operator
 Text.Whitespace
mixedKeyword.Typeany0.9798number0.0070complex0.0046string0.0038boolean0.0015
)Punctuation
:Operator
 Text.Whitespace
JestAsymmetricEqualityTypeName.Otherany0.9554void0.0166number0.0098string0.0065complex0.0039
,Punctuation
\n  Text.Whitespace
anythingName.Othervoid0.9771complex0.0055Promise<void>0.0047boolean0.0031any0.0026
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
arrayContainingName.Othervoid0.9571any0.0117complex0.0112Promise<void>0.0073boolean0.0020
(Punctuation
valueName.Otherany0.5301complex0.2452any[]0.0902Object0.0328number[]0.0217
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9998Array0.0001PromiseConstructor0.0000FunctionConstructor0.0000ObjectConstructor0.0000
<Operator
mixedName.Otherany0.9968number0.0018complex0.0005symbol0.0003string0.0002
>Operator
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
clockName.Otherany0.8293void0.0078complex0.0065number0.0059string0.0047
(Punctuation
)Punctuation
:Operator
 Text.Whitespace
JestClockTypeName.Otherany0.9965complex0.0012string0.0011number0.0005void0.0004
,Punctuation
\n  Text.Whitespace
createSpyName.Otherany0.8644complex0.0616void0.0388number0.0098boolean0.0069
(Punctuation
nameName.Otherstring0.9987any0.0008number0.0002string[]0.0000boolean0.0000
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
JestSpyTypeName.Otherany0.9939string0.0029void0.0010number0.0009complex0.0006
,Punctuation
\n  Text.Whitespace
createSpyObjName.Otherany0.8095complex0.0262void0.0228Promise<any>0.0192number0.0110
(Punctuation
baseNameName.Otherstring0.9989any0.0006number0.0003string[]0.0000complex0.0000
:Operator
 Text.Whitespace
stringKeyword.Type
,Punctuation
 Text.Whitespace
methodNamesName.Otherstring[]0.9264string[][]0.0135complex0.0098T[]0.0039any[]0.0027
:Operator
 Text.Whitespace
ArrayKeyword.TypeArrayConstructor0.9999Array0.0000any0.0000complex0.0000Map0.0000
<Operator
stringKeyword.Type
>Operator
)Punctuation
:Operator
 Text.Whitespace
{Punctuation
[Punctuation
methodNameName.Otherstring0.9988string[]0.0003any0.0003complex0.0003number0.0001
:Operator
 Text.Whitespace
stringKeyword.Type
]Punctuation
:Operator
 Text.Whitespace
JestSpyTypeName.Otherany0.9953string0.0031void0.0006complex0.0004number0.0003
}Punctuation
,Punctuation
\n  Text.Whitespace
objectContainingName.Othervoid0.9077any0.0532complex0.0136string0.0048Object0.0028
(Punctuation
valueName.OtherObject0.8544any0.0387string0.0266number0.0263object0.0074
:Operator
 Text.Whitespace
ObjectKeyword.TypeObjectConstructor0.9990Object0.0008Object[]0.0000FunctionConstructor0.0000DateConstructor0.0000
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\n  Text.Whitespace
stringMatchingName.Othervoid0.3880any0.3262complex0.0848string0.0205Object0.0111
(Punctuation
valueName.Otherstring0.9952any0.0016number0.0014string[]0.0005boolean0.0003
:Operator
 Text.Whitespace
stringKeyword.Type
)Punctuation
:Operator
 Text.Whitespace
voidOperator.Word
,Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
