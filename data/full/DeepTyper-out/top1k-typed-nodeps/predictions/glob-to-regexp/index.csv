moduleKeyword.Reserved
.exportsName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
(Punctuation
globName.Otherstring0.5524any0.3786string[]0.0214complex0.0070number0.0052
,Punctuation
 Text.Whitespace
optsName.Otherany0.8891complex0.0166string0.0062Options0.0061Object0.0052
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
globName.Otherstring0.4285any0.4222complex0.0469string[]0.0385boolean0.0182
 Text.Whitespace
!==Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
throwKeywordany0.4705complex0.2596boolean0.0824{}0.0481Error0.0417
 Text.Whitespace
newOperator.Wordany0.4215complex0.1313string0.0937boolean0.0868{}0.0460
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9919ErrorConstructor0.0013BooleanConstructor0.0002MapConstructor0.0001NumberConstructor0.0001
(Punctuation
'Expected a string'Literal.String.Single
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
strName.Otherstring0.8627any0.0915complex0.0131string[]0.0123String0.0055
 Text.Whitespace
=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9990String0.0008string0.0000NumberConstructor0.0000complex0.0000
(Punctuation
globName.Otherstring0.8372any0.1074number0.0139string[]0.0129complex0.0084
)Punctuation
;Punctuation
\n\n  Text.Whitespace
// The regexp we are building, as a string.Comment.Single
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
reStrName.Otherstring0.9062RegExp0.0697any0.0135boolean0.0052number0.0022
 Text.Whitespace
=Operator
 Text.Whitespace
""Literal.String.Double
;Punctuation
\n\n  Text.Whitespace
// Whether we are matching so called "extended" globs (like bash) and shouldComment.Single
\n  Text.Whitespace
// support single character matching, matching ranges of characters, groupComment.Single
\n  Text.Whitespace
// matching, etc.Comment.Single
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
extendedName.Otherboolean0.6623any0.2767number0.0261string0.0214complex0.0032
 Text.Whitespace
=Operator
 Text.Whitespace
optsName.Otherany0.6883boolean0.1956complex0.0244number0.0131string0.0067
 Text.Whitespace
?Operator
 Text.Whitespace
!Operator
!Operator
opts.extendedName.Other
 Text.Whitespace
:Operator
 Text.Whitespace
falseKeyword.Type
;Punctuation
\n\n  Text.Whitespace
// When globstar is _false_ (default), '/foo/*' is translated a regexp likeComment.Single
\n  Text.Whitespace
// '^\/foo\/.*$' which will match any string beginning with '/foo/'Comment.Single
\n  Text.Whitespace
// When globstar is _true_, '/foo/*' is translated to regexp likeComment.Single
\n  Text.Whitespace
// '^\/foo\/[^/]*$' which will match any string beginning with '/foo/' BUTComment.Single
\n  Text.Whitespace
// which does not have a '/' to the right of it.Comment.Single
\n  Text.Whitespace
// E.g. with '/foo/*' these will match: '/foo/bar', '/foo/bar.txt' butComment.Single
\n  Text.Whitespace
// these will not '/foo/bar/baz', '/foo/bar/baz.txt'Comment.Single
\n  Text.Whitespace
// Lastely, when globstar is _true_, '/foo/**' is equivelant to '/foo/*' whenComment.Single
\n  Text.Whitespace
// globstar is _false_Comment.Single
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
globstarName.Otherboolean0.9811any0.0135string0.0015complex0.0014false0.0005
 Text.Whitespace
=Operator
 Text.Whitespace
optsName.Otherany0.5910boolean0.2407complex0.1124Object0.0066Options0.0045
 Text.Whitespace
?Operator
 Text.Whitespace
!Operator
!Operator
opts.globstarName.Other
 Text.Whitespace
:Operator
 Text.Whitespace
falseKeyword.Type
;Punctuation
\n\n  Text.Whitespace
// If we are doing extended matching, this boolean is true when we are insideComment.Single
\n  Text.Whitespace
// a group (eg {*.html,*.js}), and false otherwise.Comment.Single
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
inGroupName.Otherboolean0.9950any0.0018number0.0011false0.0008string0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n\n  Text.Whitespace
// RegExp flags (eg "i" ) to pass in to RegExp constructor.Comment.Single
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
flagsName.Otherstring0.3486any0.3136number0.2231string[]0.0569complex0.0220
 Text.Whitespace
=Operator
 Text.Whitespace
optsName.Otherany0.7294complex0.1228boolean0.0370number0.0152Options0.0080
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
(Punctuation
 Text.Whitespace
optsName.Otherany0.7755complex0.0782Options0.0164number0.0071boolean0.0062
.Punctuation
flagsName.Otherany0.7028string0.1426number0.0712complex0.0441string[]0.0193
 Text.Whitespace
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
"string"Literal.String.Double
 Text.Whitespace
?Operator
 Text.Whitespace
optsName.Otherany0.7998complex0.0774Options0.0095number0.0074Object0.0045
.Punctuation
flagsName.Otherany0.5150string0.4644number0.0066string[]0.0052RegExp0.0025
 Text.Whitespace
:Operator
 Text.Whitespace
""Literal.String.Double
;Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
cName.Otherany0.5695string0.1974number0.1551void0.0306complex0.0129
;Punctuation
\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
varKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9954any0.0039string0.0004complex0.0001boolean0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
,Punctuation
 Text.Whitespace
lenName.Othernumber0.9074any0.0889string0.0020complex0.0005boolean0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
strName.Otherany0.3295string0.3233string[]0.1884any[]0.0946complex0.0303
.Punctuation
lengthName.Othernumber0.9435any0.0536string0.0017complex0.0005void0.0002
;Punctuation
 Text.Whitespace
iName.Othernumber0.9635any0.0348string0.0008void0.0003boolean0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
lenName.Othernumber0.8540any0.1433string0.0011complex0.0006boolean0.0003
;Punctuation
 Text.Whitespace
iName.Othernumber0.9722any0.0266string0.0006boolean0.0002void0.0002
++Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
cName.Otherstring0.4753any0.4491number0.0631complex0.0034boolean0.0019
 Text.Whitespace
=Operator
 Text.Whitespace
strName.Otherany0.3314string[]0.3000any[]0.1354string0.1206number[]0.0400
[Punctuation
iName.Othernumber0.9827any0.0145string0.0021void0.0002boolean0.0002
]Punctuation
;Punctuation
\n\n    Text.Whitespace
switchKeyword
 Text.Whitespace
(Punctuation
cName.Otherstring0.6639any0.2745number0.0365boolean0.0088void0.0058
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"/"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"$"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"^"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"+"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"."Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"("Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
")"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"="Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"!"Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"|"Literal.String.Double
:Operator
\n      Text.Whitespace
reStrName.Otherstring0.9352any0.0442number0.0145void0.0025boolean0.0021
 Text.Whitespace
+=Operator
 Text.Whitespace
"\\"Literal.String.Double
 Text.Whitespace
+Operator
 Text.Whitespace
cName.Otherany0.6146string0.2598number0.1154boolean0.0033void0.0024
;Punctuation
\n      Text.Whitespace
breakKeyword
;Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"?"Literal.String.Double
:Operator
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
extendedName.Otherboolean0.4904any0.3861string0.0563number0.0322complex0.0050
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
reStrName.Otherstring0.9320any0.0517number0.0077boolean0.0044void0.0017
 Text.Whitespace
+=Operator
 Text.Whitespace
"."Literal.String.Double
;Punctuation
\n\t    Text.Whitespace
breakKeyword
;Punctuation
\n      Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"["Literal.String.Double
:Operator
\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"]"Literal.String.Double
:Operator
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
extendedName.Otherboolean0.5979any0.2861string0.0402number0.0400complex0.0050
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
reStrName.Otherstring0.5798number0.3329any0.0522boolean0.0217void0.0073
 Text.Whitespace
+=Operator
 Text.Whitespace
cName.Otherany0.4323string0.3642number0.1774boolean0.0126void0.0052
;Punctuation
\n\t    Text.Whitespace
breakKeyword
;Punctuation
\n      Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"{"Literal.String.Double
:Operator
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
extendedName.Otherboolean0.5922any0.2924string0.0542number0.0294complex0.0050
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
inGroupName.Otherboolean0.9908any0.0038number0.0023string0.0016false0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
trueKeyword.Constant
;Punctuation
\n\t    Text.Whitespace
reStrName.Otherstring0.9243any0.0551number0.0081boolean0.0056void0.0035
 Text.Whitespace
+=Operator
 Text.Whitespace
"("Literal.String.Double
;Punctuation
\n\t    Text.Whitespace
breakKeyword
;Punctuation
\n      Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"}"Literal.String.Double
:Operator
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
extendedName.Otherboolean0.5587any0.3225string0.0555number0.0335complex0.0061
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
inGroupName.Otherboolean0.9891any0.0043number0.0027string0.0020false0.0009
 Text.Whitespace
=Operator
 Text.Whitespace
falseKeyword.Constant
;Punctuation
\n\t    Text.Whitespace
reStrName.Otherstring0.9468any0.0393number0.0061boolean0.0037void0.0023
 Text.Whitespace
+=Operator
 Text.Whitespace
")"Literal.String.Double
;Punctuation
\n\t    Text.Whitespace
breakKeyword
;Punctuation
\n      Text.Whitespace
}Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
","Literal.String.Double
:Operator
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
inGroupName.Otherboolean0.8168string0.0812any0.0618number0.0322false0.0023
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
reStrName.Otherstring0.9541any0.0361number0.0047boolean0.0020void0.0014
 Text.Whitespace
+=Operator
 Text.Whitespace
"|"Literal.String.Double
;Punctuation
\n\t    Text.Whitespace
breakKeyword
;Punctuation
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
reStrName.Otherstring0.9714any0.0170number0.0078boolean0.0016void0.0012
 Text.Whitespace
+=Operator
 Text.Whitespace
"\\"Literal.String.Double
 Text.Whitespace
+Operator
 Text.Whitespace
cName.Otherany0.5677string0.3167number0.1030void0.0041boolean0.0037
;Punctuation
\n      Text.Whitespace
breakKeyword
;Punctuation
\n\n    Text.Whitespace
caseKeyword
 Text.Whitespace
"*"Literal.String.Double
:Operator
\n      Text.Whitespace
// Move over all consecutive "*"'s.Comment.Single
\n      Text.Whitespace
// Also store the previous and next charactersComment.Single
\n      Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
prevCharName.Otherstring0.5913any0.1853number0.1721boolean0.0191complex0.0105
 Text.Whitespace
=Operator
 Text.Whitespace
strName.Otherstring[]0.3331any[]0.1707number[]0.1648any0.1525complex0.0980
[Punctuation
iName.Othernumber0.9362any0.0595string0.0032complex0.0005void0.0002
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
]Punctuation
;Punctuation
\n      Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
starCountName.Othernumber0.9791any0.0133string0.0034boolean0.0033void0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n      Text.Whitespace
whileKeyword
(Punctuation
strName.Otherany0.4646any[]0.1639string[]0.1198string0.0992number[]0.0641
[Punctuation
iName.Othernumber0.9539any0.0433string0.0019complex0.0003boolean0.0002
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
]Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
"*"Literal.String.Double
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
starCountName.Othernumber0.9815any0.0145string0.0022boolean0.0009void0.0003
++Operator
;Punctuation
\n        Text.Whitespace
iName.Othernumber0.9867any0.0123string0.0006boolean0.0002void0.0001
++Operator
;Punctuation
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
nextCharName.Otherany0.8081number0.1255string0.0496complex0.0107boolean0.0016
 Text.Whitespace
=Operator
 Text.Whitespace
strName.Otherany0.2982string[]0.2849any[]0.1538number[]0.1220complex0.0666
[Punctuation
iName.Othernumber0.9106any0.0857string0.0026complex0.0004void0.0002
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
]Punctuation
;Punctuation
\n\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
globstarName.Otherboolean0.9344any0.0521string0.0046complex0.0031false0.0008
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
// globstar is disabled, so treat any number of "*" as oneComment.Single
\n        Text.Whitespace
reStrName.Otherstring0.8793any0.0935number0.0159boolean0.0045complex0.0041
 Text.Whitespace
+=Operator
 Text.Whitespace
".*"Literal.String.Double
;Punctuation
\n      Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
// globstar is enabled, so determine if this is a globstar segmentComment.Single
\n        Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
isGlobstarName.Otherboolean0.6668number0.1697string0.0944any0.0616void0.0021
 Text.Whitespace
=Operator
 Text.Whitespace
starCountName.Othernumber0.7485any0.1315string0.0907boolean0.0260complex0.0012
 Text.Whitespace
>Operator
 Text.Whitespace
1Literal.Number.Float
                      Text.Whitespace
// multiple "*"'sComment.Single
\n          Text.Whitespace
&&Operator
 Text.Whitespace
(Punctuation
prevCharName.Otherstring0.7279any0.2255boolean0.0214number0.0176complex0.0022
 Text.Whitespace
===Operator
 Text.Whitespace
"/"Literal.String.Double
 Text.Whitespace
||Operator
 Text.Whitespace
prevCharName.Otherstring0.4811any0.2244boolean0.1810number0.1014void0.0036
 Text.Whitespace
===Operator
 Text.Whitespace
undefinedKeyword.Constant
)Punctuation
   Text.Whitespace
// from the start of the segmentComment.Single
\n          Text.Whitespace
&&Operator
 Text.Whitespace
(Punctuation
nextCharName.Otherany0.8359string0.0858number0.0479complex0.0177boolean0.0065
 Text.Whitespace
===Operator
 Text.Whitespace
"/"Literal.String.Double
 Text.Whitespace
||Operator
 Text.Whitespace
nextCharName.Otherany0.6493number0.2984string0.0352boolean0.0068complex0.0057
 Text.Whitespace
===Operator
 Text.Whitespace
undefinedKeyword.Constant
)Punctuation
   Text.Whitespace
// to the end of the segmentComment.Single
\n\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
isGlobstarName.Otherboolean0.7587string0.0969any0.0785number0.0592complex0.0016
)Punctuation
 Text.Whitespace
{Punctuation
\n          Text.Whitespace
// it's a globstar, so match zero or more path segmentsComment.Single
\n          Text.Whitespace
reStrName.Otherstring0.9306any0.0519number0.0128boolean0.0025complex0.0006
 Text.Whitespace
+=Operator
 Text.Whitespace
"((?:[^/]*(?:\/|$))*)"Literal.String.Double
;Punctuation
\n          Text.Whitespace
iName.Othernumber0.9798any0.0183string0.0016boolean0.0001void0.0001
++Operator
;Punctuation
 Text.Whitespace
// move over the "/"Comment.Single
\n        Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n          Text.Whitespace
// it's not a globstar, so only match one path segmentComment.Single
\n          Text.Whitespace
reStrName.Otherstring0.9485any0.0408number0.0073boolean0.0014void0.0007
 Text.Whitespace
+=Operator
 Text.Whitespace
"([^/]*)"Literal.String.Double
;Punctuation
\n        Text.Whitespace
}Punctuation
\n      Text.Whitespace
}Punctuation
\n      Text.Whitespace
breakKeyword
;Punctuation
\n\n    Text.Whitespace
defaultName.Other
:Operator
\n      Text.Whitespace
reStrKeyword.Typestring0.8328number0.0918any0.0689boolean0.0026void0.0014
 Text.Whitespace
+=Operator
 Text.Whitespace
cName.Otherstring0.6638any0.2738number0.0528boolean0.0026void0.0022
;Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
// When regexp 'g' flag is specified don'tComment.Single
\n  Text.Whitespace
// constrain the regular expression with ^ & $Comment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
flagsName.Otherstring0.5218any0.2394number0.0945string[]0.0848complex0.0221
 Text.Whitespace
||Operator
 Text.Whitespace
!Operator
~Operator
flagsName.Otherstring0.5712any0.3541string[]0.0473number0.0105RegExp0.0060
.Punctuation
indexOfName.Othernumber0.7444any0.2488string0.0034complex0.0021boolean0.0005
(Punctuation
'g'Literal.String.Single
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
reStrName.Otherstring0.9514any0.0409number0.0037boolean0.0012RegExp0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
"^"Literal.String.Double
 Text.Whitespace
+Operator
 Text.Whitespace
reStrName.Otherstring0.5152number0.2927any0.1800boolean0.0078complex0.0017
 Text.Whitespace
+Operator
 Text.Whitespace
"$"Literal.String.Double
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
newOperator.Wordstring0.2669any0.1562RegExp0.1317Date0.0277complex0.0268
 Text.Whitespace
RegExpName.BuiltinRegExpConstructor0.9996RegExp0.0000ErrorConstructor0.0000RegExp[]0.0000BooleanConstructor0.0000
(Punctuation
reStrName.Otherstring0.9424number0.0239any0.0168boolean0.0084RegExp0.0046
,Punctuation
 Text.Whitespace
flagsName.Otherstring0.8897any0.0394number0.0270string[]0.0247RegExp0.0078
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
