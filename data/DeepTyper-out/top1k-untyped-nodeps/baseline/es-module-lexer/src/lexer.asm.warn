Found multiple declarations; skipping rest of declarations.
	let asm: number, asmBuffer, allocSize = 2<<19, addr;
Found multiple declarations; skipping rest of declarations.
	let asm: number, asmBuffer, allocSize = 2<<19, addr;
Found multiple declarations; skipping rest of declarations.
	let asm: number, asmBuffer, allocSize = 2<<19, addr;
Found multiple declarations; skipping rest of declarations.
	let source: string, name;
Found optional parameters; skipping function.
	export function parse (_source, _name = '@') { source = _source; name = _name; /
Found multiple declarations; skipping rest of declarations.
	const imports: any[] = [], exports = [];
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.is(), e = asm.ie(), a = asm.ai(), d = asm.id(), ss = asm.ss()
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.is(), e = asm.ie(), a = asm.ai(), d = asm.id(), ss = asm.ss()
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.is(), e = asm.ie(), a = asm.ai(), d = asm.id(), ss = asm.ss()
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.is(), e = asm.ie(), a = asm.ai(), d = asm.id(), ss = asm.ss()
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.is(), e = asm.ie(), a = asm.ai(), d = asm.id(), ss = asm.ss()
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.es(), e = asm.ee(), ls = asm.els(), le = asm.ele();
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.es(), e = asm.ee(), ls = asm.els(), le = asm.ele();
Found multiple declarations; skipping rest of declarations.
	const s: any = asm.es(), e = asm.ee(), ls = asm.els(), le = asm.ele();
Found multiple declarations; skipping rest of declarations.
	let out: string = '', chunkStart = acornPos;
Found multiple declarations; skipping rest of declarations.
	let total: number = 0, lastCode = 0;
Found multiple declarations; skipping rest of declarations.
	let code: number = source.charCodeAt(acornPos), val;

