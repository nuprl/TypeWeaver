importKeyword
 Text.Whitespace
retryName.Othervoid0.2296any0.1056complex0.0638T[]0.0556T0.0441
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./retry.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
initialParamsName.Othervoid0.2956any0.1191complex0.0958Promise<void>0.0434boolean0.0232
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/initialParams.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
{Punctuation
defaultKeyword
 Text.Whitespace
asKeyword.Reserved
 Text.Whitespace
wrapAsyncName.Otherany0.3710void0.1732number0.1089complex0.0865boolean0.0591
,Punctuation
 Text.Whitespace
isAsyncName.Otherboolean0.8273any0.1144complex0.0303void0.0120number0.0037
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/wrapAsync.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
promiseCallbackName.Otherany0.3100void0.2830complex0.0870boolean0.0346number0.0339
,Punctuation
 Text.Whitespace
PROMISE_SYMBOLName.Otherany0.3040void0.2662complex0.1020boolean0.0655number0.0413
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/promiseCallback.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * A close relative of [`retry`]{@link module:ControlFlow.retry}.  This method\n * wraps a task and makes it retryable, rather than immediately calling it\n * with retries.\n *\n * @name retryable\n * @static\n * @memberOf module:ControlFlow\n * @method\n * @see [async.retry]{@link module:ControlFlow.retry}\n * @category Control Flow\n * @param {Object|number} [opts = {times: 5, interval: 0}| 5] - optional\n * options, exactly the same as from `retry`, except for a `opts.arity` that\n * is the arity of the `task` function, defaulting to `task.length`\n * @param {AsyncFunction} task - the asynchronous function to wrap.\n * This function will be passed any arguments passed to the returned wrapper.\n * Invoked with (...args, callback).\n * @returns {AsyncFunction} The wrapped function, which when invoked, will\n * retry on an error, based on the parameters specified in `opts`.\n * This function will accept the same parameters as `task`.\n * @example\n *\n * async.auto({\n *     dep1: async.retryable(3, getFromFlakyService),\n *     process: ["dep1", async.retryable(3, function (results, cb) {\n *         maybeProcessData(results.dep1, cb);\n *     })]\n * }, callback);\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
retryableName.Othervoid0.6330any0.0780complex0.0492string0.0329number0.0255
 Text.Whitespace
(Punctuation
optsName.Otherany0.4512Options0.0153string0.0051complex0.0048number0.0044
,Punctuation
 Text.Whitespace
taskName.Otherany0.2071string0.0508Task0.0294number0.0261boolean0.0186
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
taskName.Otherany0.4128string0.0600boolean0.0384Task0.0338number0.0231
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
taskName.Otherany0.6289string0.0882number0.0250boolean0.0166Task0.0149
 Text.Whitespace
=Operator
 Text.Whitespace
optsName.Otherany0.7604string0.0248complex0.0167number0.0105boolean0.0094
;Punctuation
\n        Text.Whitespace
optsName.Otherany0.8821complex0.0058number0.0051Options0.0040{}0.0032
 Text.Whitespace
=Operator
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
arityName.Otherany0.5633boolean0.1388string0.1272number0.0834void0.0443
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
optsName.Otherany0.7250Options0.0181complex0.0156number0.0103boolean0.0054
 Text.Whitespace
&&Operator
 Text.Whitespace
optsName.Otherany0.6625Options0.0298complex0.0290number0.0063{}0.0047
.Punctuation
arityName.Otherany0.6117string0.1476boolean0.0926number0.0870complex0.0110
)Punctuation
 Text.Whitespace
||Operator
 Text.Whitespace
taskName.Otherany0.4266string0.0302Task0.0209Task[]0.0088string[]0.0053
.Punctuation
lengthName.Otherany0.5647number0.4210string0.0040complex0.0034void0.0019
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
isAsyncName.Otherboolean0.7840any0.1763complex0.0193number0.0081string0.0056
(Punctuation
taskName.Otherany0.4946string0.0733number0.0635boolean0.0267Task0.0219
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
arityName.Othernumber0.8688any0.0977string0.0205void0.0062boolean0.0025
 Text.Whitespace
+=Operator
 Text.Whitespace
1Literal.Number.Float
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
_taskName.Otherany0.8120number0.0224void0.0174complex0.0169boolean0.0062
 Text.Whitespace
=Operator
 Text.Whitespace
wrapAsyncName.Otherany0.6014void0.0546complex0.0494number0.0393string0.0292
(Punctuation
taskName.Otherany0.6154string0.0647number0.0451Task0.0219Function0.0088
)Punctuation
;Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
initialParamsName.Otherany0.3933void0.3514complex0.1270boolean0.0181number0.0145
(Punctuation
(Punctuation
argsName.Otherany0.8358any[]0.0799string[]0.0292string0.0136IArguments0.0034
,Punctuation
 Text.Whitespace
callbackName.Otherany0.8264Function0.0949void0.0130number0.0081string0.0058
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
argsName.Otherany0.4646any[]0.3039string[]0.1579string0.0110complex0.0065
.Punctuation
lengthName.Othernumber0.5723any0.4194void0.0020complex0.0019string0.0017
 Text.Whitespace
<Operator
 Text.Whitespace
arityName.Othernumber0.6255any0.3668string0.0031void0.0018complex0.0011
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
 Text.Whitespace
||Operator
 Text.Whitespace
callbackName.Otherany0.7367void0.0944Function0.0565number0.0438string0.0144
 Text.Whitespace
==Operator
 Text.Whitespace
nullKeyword.Constant
)Punctuation
 Text.Whitespace
{Punctuation
\n            Text.Whitespace
argsName.Otherany[]0.5849any0.2194string[]0.1008IArguments0.0094number[]0.0035
.Punctuation
pushName.Othernumber0.9100any0.0832void0.0029string0.0013boolean0.0010
(Punctuation
callbackName.Otherany0.6517Function0.1476void0.0821number0.0265string0.0160
)Punctuation
\n            Text.Whitespace
callbackName.Otherany0.5843void0.1477Function0.1093number0.0288string0.0155
 Text.Whitespace
=Operator
 Text.Whitespace
promiseCallbackName.Otherany0.4956void0.2351number0.0492Function0.0448string0.0424
(Punctuation
)Punctuation
\n        Text.Whitespace
}Punctuation
\n        Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
taskFnName.Othervoid0.8540any0.0990complex0.0107string0.0064boolean0.0041
(Punctuation
cbName.Otherany0.7628Function0.1477void0.0258number0.0181string0.0145
)Punctuation
 Text.Whitespace
{Punctuation
\n            Text.Whitespace
_taskName.Otherany0.7993void0.0813complex0.0236Function0.0144number0.0072
(Punctuation
...Punctuation
argsName.Otherany[]0.7742any0.1177string[]0.0694IArguments0.0031complex0.0024
,Punctuation
 Text.Whitespace
cbName.Otherany0.8550void0.0670Function0.0492number0.0062string0.0050
)Punctuation
;Punctuation
\n        Text.Whitespace
}Punctuation
\n\n        Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
optsName.Otherany0.8077{}0.0129complex0.0116Options0.0053boolean0.0042
)Punctuation
 Text.Whitespace
retryName.Othervoid0.7151any0.1579complex0.0264number0.0115boolean0.0062
(Punctuation
optsName.Otherany0.7536{}0.0123complex0.0099Options0.0067number0.0059
,Punctuation
 Text.Whitespace
taskFnName.Otherany0.5531number0.1175void0.0879string0.0802boolean0.0476
,Punctuation
 Text.Whitespace
callbackName.Otherany0.6285void0.2175Function0.0577number0.0102boolean0.0098
)Punctuation
;Punctuation
\n        Text.Whitespace
elseKeyword
 Text.Whitespace
retryName.Othervoid0.8801any0.0578complex0.0119Promise<void>0.0045Function0.0021
(Punctuation
taskFnName.Otherany0.5302void0.1768string0.1052number0.0567complex0.0202
,Punctuation
 Text.Whitespace
callbackName.Otherany0.7275void0.1140Function0.0526number0.0072boolean0.0069
)Punctuation
;Punctuation
\n\n        Text.Whitespace
returnKeyword
 Text.Whitespace
callbackName.Otherany0.6856void0.0418Function0.0299{}0.0267complex0.0092
[Punctuation
PROMISE_SYMBOLName.Otherany0.2937string0.2655number0.2531void0.0491complex0.0195
]Punctuation
\n    Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
