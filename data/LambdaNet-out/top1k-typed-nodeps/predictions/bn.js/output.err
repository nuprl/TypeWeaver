ammonite.ops.ShelloutException: CommandResult 1
Failure occurred at line 126: fixture.as2 = fixture.a2 * fixture.a2 + 0x2adbeefn;
Error message: Unknown expression category: BigIntLiteral. Text: 0x2adbeefn
Failure occurred at line 100: {
  var fixture = {};
  fixtures.push(fixture);

  var a = prng.randomBytes(32).toString('hex');
  var b = prng.randomBytes(32).toString('hex');
  var aj = prng.randomBytes(768).toString('hex');
  var bj = prng.randomBytes(768).toString('hex');

  fixture.a10base = new bn(a, 16).toString(10);
  fixture.a16base = new bn(a, 16).toString(16);

  // BN
  fixture.a1 = new bn(a, 16);
  fixture.b1 = new bn(b, 16);
  fixture.a1j = new bn(aj, 16);
  fixture.b1j = new bn(bj, 16);
  fixture.as1 = fixture.a1.mul(fixture.a1).iaddn(0x2adbeef);
  fixture.am1 = fixture.a1.toRed(bn.red('k256'));
  fixture.pow1 = fixture.am1.fromRed();

  // BigInt
  fixture.a2 = BigInt(fixture.a1.toString(10));
  fixture.b2 = BigInt(fixture.b1.toString(10));
  fixture.a2j = BigInt(fixture.a1j.toString(10));
  fixture.b2j = BigInt(fixture.b1j.toString(10));
  fixture.as2 = fixture.a2 * fixture.a2 + 0x2adbeefn;

  // bignum
  if (bignum) {
    fixture.a3 = new bignum(a, 16);
    fixture.b3 = new bignum(b, 16);
    fixture.a3j = new bignum(aj, 16);
    fixture.b3j = new bignum(bj, 16);
    fixture.as3 = fixture.a3.mul(fixture.a3).add(0x2adbeef);
  }

  // bigi
  fixture.a4 = new bigi(a, 16);
  fixture.b4 = new bigi(b, 16);
  fixture.a4j = new bigi(aj, 16);
  fixture.b4j = new bigi(bj, 16);
  fixture.as4 = fixture.a4.multiply(fixture.a4).add(bigi.valueOf(0x2adbeef));

  // sjcl
  fixture.a5 = new sjcl(a, 16);
  fixture.b5 = new sjcl(b, 16);
  fixture.a5j = new sjcl(aj, 16);
  fixture.b5j = new sjcl(bj, 16);
  // fixture.as5 = fixture.a5.mul(fixture.a5).add(0x2adbeef);
  fixture.am5 = new sjcl.prime.p256k(fixture.a5);

  // BigInteger
  fixture.a6 = new BigInteger(a, 16);
  fixture.b6 = new BigInteger(b, 16);
  fixture.a6j = new BigInteger(aj, 16);
  fixture.b6j = new BigInteger(bj, 16);
  fixture.as6 = fixture.a6.multiply(fixture.a6).add(
    new BigInteger('2adbeef', 16));

  // SilentMattBigInteger
  fixture.a7 = SilentMattBigInteger.parse(a, 16);
  fixture.b7 = SilentMattBigInteger.parse(b, 16);
  fixture.a7j = SilentMattBigInteger.parse(aj, 16);
  fixture.b7j = SilentMattBigInteger.parse(aj, 16);
  fixture.as7 = fixture.a7.multiply(fixture.a7).add(
    SilentMattBigInteger.parse('2adbeef', 16));
}
Error message: Unknown expression category: BigIntLiteral. Text: 0x2adbeefn
Failure occurred at line 100: while (fixtures.length < 25) {
  var fixture = {};
  fixtures.push(fixture);

  var a = prng.randomBytes(32).toString('hex');
  var b = prng.randomBytes(32).toString('hex');
  var aj = prng.randomBytes(768).toString('hex');
  var bj = prng.randomBytes(768).toString('hex');

  fixture.a10base = new bn(a, 16).toString(10);
  fixture.a16base = new bn(a, 16).toString(16);

  // BN
  fixture.a1 = new bn(a, 16);
  fixture.b1 = new bn(b, 16);
  fixture.a1j = new bn(aj, 16);
  fixture.b1j = new bn(bj, 16);
  fixture.as1 = fixture.a1.mul(fixture.a1).iaddn(0x2adbeef);
  fixture.am1 = fixture.a1.toRed(bn.red('k256'));
  fixture.pow1 = fixture.am1.fromRed();

  // BigInt
  fixture.a2 = BigInt(fixture.a1.toString(10));
  fixture.b2 = BigInt(fixture.b1.toString(10));
  fixture.a2j = BigInt(fixture.a1j.toString(10));
  fixture.b2j = BigInt(fixture.b1j.toString(10));
  fixture.as2 = fixture.a2 * fixture.a2 + 0x2adbeefn;

  // bignum
  if (bignum) {
    fixture.a3 = new bignum(a, 16);
    fixture.b3 = new bignum(b, 16);
    fixture.a3j = new bignum(aj, 16);
    fixture.b3j = new bignum(bj, 16);
    fixture.as3 = fixture.a3.mul(fixture.a3).add(0x2adbeef);
  }

  // bigi
  fixture.a4 = new bigi(a, 16);
  fixture.b4 = new bigi(b, 16);
  fixture.a4j = new bigi(aj, 16);
  fixture.b4j = new bigi(bj, 16);
  fixture.as4 = fixture.a4.multiply(fixture.a4).add(bigi.valueOf(0x2adbeef));

  // sjcl
  fixture.a5 = new sjcl(a, 16);
  fixture.b5 = new sjcl(b, 16);
  fixture.a5j = new sjcl(aj, 16);
  fixture.b5j = new sjcl(bj, 16);
  // fixture.as5 = fixture.a5.mul(fixture.a5).add(0x2adbeef);
  fixture.am5 = new sjcl.prime.p256k(fixture.a5);

  // BigInteger
  fixture.a6 = new BigInteger(a, 16);
  fixture.b6 = new BigInteger(b, 16);
  fixture.a6j = new BigInteger(aj, 16);
  fixture.b6j = new BigInteger(bj, 16);
  fixture.as6 = fixture.a6.multiply(fixture.a6).add(
    new BigInteger('2adbeef', 16));

  // SilentMattBigInteger
  fixture.a7 = SilentMattBigInteger.parse(a, 16);
  fixture.b7 = SilentMattBigInteger.parse(b, 16);
  fixture.a7j = SilentMattBigInteger.parse(aj, 16);
  fixture.b7j = SilentMattBigInteger.parse(aj, 16);
  fixture.as7 = fixture.a7.multiply(fixture.a7).add(
    SilentMattBigInteger.parse('2adbeef', 16));
}
Error message: Unknown expression category: BigIntLiteral. Text: 0x2adbeefn
Parsing failed for file: benchmarks/index.js

/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:690
        throw new Error("Unknown expression category: " + ts.SyntaxKind[node.kind]
              ^
Error: Unknown expression category: BigIntLiteral. Text: 0x2adbeefn
    at rec (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:690:15)
    at rec (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:619:17)
    at parseExpr (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:709:10)
    at ExprProcessor.processExpr (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:777:16)
    at /work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:938:28
    at handleError (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:1435:12)
    at rec (/work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:863:14)
    at /work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:978:63
    at /work/arjunguha-research-group/mhyee/not-type-inference/LambdaNet/scripts/ts/parsing.ts:1367:51
    at Array.reduce (<anonymous>)

	at ammonite.ops.Shellout$.executeStream(Shellout.scala:101)
	at ammonite.ops.Shellout$.$anonfun$$percent$percent$1(Shellout.scala:15)
	at ammonite.ops.Command.applyDynamic(Shellout.scala:118)
	at lambdanet.utils.ProgramParsing$.$anonfun$parseGModulesFromFiles$2(ProgramParsing.scala:216)
	at funcdiff.SimpleMath$.withErrorMessage(SimpleMath.scala:483)
	at lambdanet.utils.ProgramParsing$.parseGModulesFromFiles(ProgramParsing.scala:208)
	at lambdanet.utils.ProgramParsing$.parseGProjectFromRoot(ProgramParsing.scala:168)
	at lambdanet.PrepareRepos$.$anonfun$parseProject$2(PrepareRepos.scala:607)
	at funcdiff.SimpleMath$.withErrorMessage(SimpleMath.scala:483)
	at lambdanet.PrepareRepos$.parseProject(PrepareRepos.scala:602)
	at lambdanet.Model$PredictionService.predictOnProject(Model.scala:247)
	at lambdanet.TypeInferenceService$.$anonfun$main$1(TypeInferenceService.scala:119)
	at scala.concurrent.Future$.$anonfun$apply$1(Future.scala:659)
	at scala.util.Success.$anonfun$map$1(Try.scala:255)
	at scala.util.Success.map(Try.scala:213)
	at scala.concurrent.Future.$anonfun$map$1(Future.scala:292)
	at scala.concurrent.impl.Promise.liftedTree1$1(Promise.scala:33)
	at scala.concurrent.impl.Promise.$anonfun$transform$1(Promise.scala:33)
	at scala.concurrent.impl.CallbackRunnable.run(Promise.scala:64)
	at java.base/java.util.concurrent.ForkJoinTask$RunnableExecuteAction.exec(ForkJoinTask.java:1426)
	at java.base/java.util.concurrent.ForkJoinTask.doExec(ForkJoinTask.java:290)
	at java.base/java.util.concurrent.ForkJoinPool$WorkQueue.topLevelExec(ForkJoinPool.java:1020)
	at java.base/java.util.concurrent.ForkJoinPool.scan(ForkJoinPool.java:1656)
	at java.base/java.util.concurrent.ForkJoinPool.runWorker(ForkJoinPool.java:1594)
	at java.base/java.util.concurrent.ForkJoinWorkerThread.run(ForkJoinWorkerThread.java:183)
