importKeyword
 Text.Whitespace
EnumeratorName.Otherany0.9864complex0.0113void0.0007string0.0005boolean0.0001
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'../enumerator'Literal.String.Single
;Punctuation
\n\nText.Whitespace
/**\n  `Promise.all` accepts an array of promises, and returns a new promise which\n  is fulfilled with an array of fulfillment values for the passed promises, or\n  rejected with the reason of the first passed promise to be rejected. It casts all\n  elements of the passed iterable to promises as it runs this algorithm.\n\n  Example:\n\n  ```javascript\n  import Promise, { resolve } from 'rsvp';\n\n  let promise1 = resolve(1);\n  let promise2 = resolve(2);\n  let promise3 = resolve(3);\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // The array here would be [ 1, 2, 3 ];\n  });\n  ```\n\n  If any of the `promises` given to `RSVP.all` are rejected, the first promise\n  that is rejected will be given as an argument to the returned promises's\n  rejection handler. For example:\n\n  Example:\n\n  ```javascript\n  import Promise, { resolve, reject } from 'rsvp';\n\n  let promise1 = resolve(1);\n  let promise2 = reject(new Error("2"));\n  let promise3 = reject(new Error("3"));\n  let promises = [ promise1, promise2, promise3 ];\n\n  Promise.all(promises).then(function(array){\n    // Code here never runs because there are rejected promises!\n  }, function(error) {\n    // error.message === "2"\n  });\n  ```\n\n  @method all\n  @for Promise\n  @param {Array} entries array of promises\n  @param {String} [label] optional string for labeling the promise.\n  Useful for tooling.\n  @return {Promise} promise that is fulfilled when all `promises` have been\n  fulfilled, or rejected if any of them become rejected.\n  @static\n*/Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
allName.Otherany0.2436any[]0.2372boolean0.1013void0.0406string[]0.0240
(Punctuation
entriesName.Otherany0.7888any[]0.0366number0.0133string0.0037boolean0.0037
,Punctuation
 Text.Whitespace
labelName.Otherany0.4590string0.4260any[]0.0081complex0.0068Buffer0.0051
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
!Operator
ArrayName.BuiltinArrayConstructor0.9995any0.0000Math0.0000ObjectConstructor0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9942any0.0019any[]0.0012boolean0.0006number0.0003
(Punctuation
entriesName.Otherany0.6886any[]0.1392complex0.0581number0.0052number[]0.0027
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
thisKeyword
.Punctuation
rejectName.Othercomplex0.6704any0.1530void0.0571Function0.0104any[]0.0097
(Punctuation
newOperator.Wordany0.1937complex0.1068boolean0.0709TypeErrorConstructor0.0327{}0.0304
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9915ErrorConstructor0.0017BooleanConstructor0.0001NumberConstructor0.0001SymbolConstructor0.0001
(Punctuation
"Promise.all must be called with an array"Literal.String.Double
)Punctuation
,Punctuation
 Text.Whitespace
labelName.Otherstring0.6712any0.2985complex0.0042void0.0038any[]0.0028
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
newOperator.Wordany0.5203complex0.0860string0.0242{}0.0238boolean0.0205
 Text.Whitespace
EnumeratorName.Otherany0.9979complex0.0018string0.0001any[]0.0000void0.0000
(Punctuation
thisKeyword
,Punctuation
 Text.Whitespace
entriesName.Otherany0.2424any[]0.0870complex0.0303string[]0.0098number[]0.0089
,Punctuation
 Text.Whitespace
trueKeyword.Constant
 Text.Whitespace
/* abort on reject */Comment.Multiline
,Punctuation
 Text.Whitespace
labelName.Otherany0.4552string0.2695complex0.0156Promise<string>0.0073ArrayBuffer0.0058
)Punctuation
.Punctuation
promiseName.Otherany0.3632Promise<any>0.1657Promise<number>0.0651Promise<void>0.0617Promise<string>0.0261
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
