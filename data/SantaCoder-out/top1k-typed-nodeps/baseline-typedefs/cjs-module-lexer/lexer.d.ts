declare let source: any, pos: any, end: any;
declare let openTokenDepth: any, templateDepth: any, lastTokenPos: any, lastSlashWasDivision: any, templateStack: any, templateStackDepth: any, openTokenPosStack: any, openClassPosStack: any, nextBraceIsClass: any, starExportMap: any, lastStarExportSpecifier: any, _exports: any, unsafeGetters: any, reexports: any;
declare function resetState(): void;
declare const Import = 0;
declare const ExportAssign = 1;
declare const ExportStar = 2;
declare function parseCJS(source: string, name: string, : any): {
    exports: any[];
    reexports: any[];
};
declare function decode(str: string): any;
declare function parseSource(cjsSource: string): boolean;
declare function tryBacktrackAddStarExportBinding(bPos: number): void;
declare function tryParseObjectHasOwnProperty(it_id: number): boolean;
declare function tryParseObjectDefineOrKeys(keys: string[]): void;
declare function readExportsOrModuleDotExports(ch: string): boolean;
declare function tryParseModuleExportsDotAssign(): void;
declare function tryParseExportsDotAssign(assign: string): void;
declare function tryParseRequire(requireType: string): boolean;
declare function tryParseLiteralExports(): void;
declare let nonASCIIidentifierStartChars: string;
declare let nonASCIIidentifierChars: string;
declare const nonASCIIidentifierStart: RegExp;
declare const nonASCIIidentifier: RegExp;
declare const astralIdentifierStartCodes: number[];
declare const astralIdentifierCodes: number[];
declare function isInAstralSet(code: number, set: number): boolean;
declare function isIdentifierStart(code: number, astral: boolean): boolean;
declare function isIdentifierChar(code: number, astral: boolean): boolean;
declare function identifier(): boolean;
declare function codePointLen(ch: number): 1 | 2;
declare function codePointAtLast(bPos: number): any;
declare function throwIfImportStatement(): void;
declare function throwIfExportStatement(): void;
declare function commentWhitespace(): any;
declare function templateString(): void;
declare function blockComment(): void;
declare function lineComment(): void;
declare function stringLiteral(quote: string): void;
declare function regexCharacterClass(): any;
declare function regularExpression(): void;
declare function isBr(c: number): boolean;
declare function isBrOrWs(c: string): boolean;
declare function isBrOrWsOrPunctuatorNotDot(c: string): boolean;
declare function keywordStart(pos: number): boolean;
declare function readPrecedingKeyword(pos: number, match: string): boolean;
declare function readPrecedingKeyword1(pos: number, ch: string): boolean;
declare function isExpressionKeyword(pos: number): boolean;
declare function isParenKeyword(curPos: number): any;
declare function isPunctuator(ch: string): boolean;
declare function isExpressionPunctuator(ch: string): boolean;
declare function isExpressionTerminator(curPos: number): any;
declare const initPromise: Promise<void>;
