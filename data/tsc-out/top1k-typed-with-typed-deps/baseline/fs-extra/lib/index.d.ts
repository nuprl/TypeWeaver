declare const _exports: {
    remove: (...args: any[]) => void | Promise<any>;
    removeSync: (path: any) => void;
    pathExists: (...args: any[]) => void | Promise<any>;
    pathExistsSync: any;
    outputFile: (...args: any[]) => void | Promise<any>;
    outputFileSync: (file: any, ...args: any[]) => void;
    move: (...args: any[]) => void | Promise<any>;
    moveSync: typeof import("./move/move-sync");
    mkdirs: (...args: any[]) => void | Promise<any>;
    mkdirsSync: (dir: any, options: any) => any;
    mkdirp: (...args: any[]) => void | Promise<any>;
    mkdirpSync: (dir: any, options: any) => any;
    ensureDir: (...args: any[]) => void | Promise<any>;
    ensureDirSync: (dir: any, options: any) => any;
    readJson: typeof import("jsonfile").readFile;
    readJsonSync: typeof import("jsonfile").readFileSync;
    writeJson: typeof import("jsonfile").writeFile;
    writeJsonSync: typeof import("jsonfile").writeFileSync;
    createFile: (...args: any[]) => void | Promise<any>;
    createFileSync: (file: any) => void;
    ensureFile: (...args: any[]) => void | Promise<any>;
    ensureFileSync: (file: any) => void;
    createLink: (...args: any[]) => void | Promise<any>;
    createLinkSync: (srcpath: any, dstpath: any) => void;
    ensureLink: (...args: any[]) => void | Promise<any>;
    ensureLinkSync: (srcpath: any, dstpath: any) => void;
    createSymlink: (...args: any[]) => void | Promise<any>;
    createSymlinkSync: (srcpath: any, dstpath: any, type: any) => any;
    ensureSymlink: (...args: any[]) => void | Promise<any>;
    ensureSymlinkSync: (srcpath: any, dstpath: any, type: any) => any;
    emptyDirSync: (dir: any) => any;
    emptydirSync: (dir: any) => any;
    emptyDir: (...args: any[]) => void | Promise<any>;
    emptydir: (...args: any[]) => void | Promise<any>;
    copy: (...args: any[]) => void | Promise<any>;
    copySync: typeof import("./copy/copy-sync");
    exists: (filename: any, callback: any) => void | Promise<any>;
    read: (fd: any, buffer: any, offset: any, length: any, position: any, callback: any) => void | Promise<any>;
    write: (fd: any, buffer: any, ...args: any[]) => void | Promise<any>;
    writev: (fd: any, buffers: any, ...args: any[]) => void | Promise<any>;
};
export = _exports;
