// Generated by LiveScript 1.6.0

// prelude.ls 1.2.1
// Copyright (c) George Zahariev
// Released under the MIT License
// https://raw.githubusercontent.com/gkz/prelude-ls/master/LICENSE
require=(function(){function r(e: Object,n: Object,t: Array): Function{function o(i: String,f: Boolean): Function{if(!n[i]){if(!e[i]){var c: Function="function"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a: Error=new Error("Cannot find module '"+i+"'");throw a.code="MODULE_NOT_FOUND",a}var p: Object=n[i]={exports:{}};e[i][0].call(p.exports,function(r: String){var n: String=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u="function"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var apply: Function, curry: Function, flip: Array, fix: Function, over: Object, memoize: Function, toString$: Function = {}.toString;
apply = curry$(function(f: Object, list: Object){
  return f.apply(null, list);
});
curry = function(f: Function){
  return curry$(f);
};
flip = curry$(function(f: Function, x: String, y: Number){
  return f(y, x);
});
fix = function(f: Function){
  return function(g: Function){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  }(function(g: Function){
    return function(){
      return f(g(g)).apply(null, arguments);
    };
  });
};
over = curry$(function(f: Function, g: Function, x: String, y: Number){
  return f(g(x), g(y));
});
memoize = function(f: Object){
  var memo: Object;
  memo = {};
  return function(){
    var args: Array, res$: Array, i$: Number, to$: Function, key: String, arg: String;
    res$ = [];
    for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
      res$.push(arguments[i$]);
    }
    args = res$;
    key = (function(){
      var i$: Number, ref$: Object, len$: Function, results$: Array = [];
      for (i$ = 0, len$ = (ref$ = args).length; i$ < len$; ++i$) {
        arg = ref$[i$];
        results$.push(arg + toString$.call(arg).slice(8, -1));
      }
      return results$;
    }()).join('');
    return memo[key] = key in memo
      ? memo[key]
      : f.apply(null, args);
  };
};
module.exports = {
  curry: curry,
  flip: flip,
  fix: fix,
  apply: apply,
  over: over,
  memoize: memoize
};
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],2:[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var each: Object, map: Array, compact: Function, filter: Object, reject: Object, remove: String, partition: Array, find: Object, head: Object, first: Object, tail: Function, last: Function, initial: Function, empty: Function, reverse: Function, unique: Function, uniqueBy: Array, fold: Function, foldl: Array, fold1: Array, foldl1: Array, foldr: Function, foldr1: Array, unfoldr: Array, concat: Object, concatMap: Object, flatten: Function, difference: Function, intersection: Function, union: Function, countBy: String, groupBy: Array, andList: Function, orList: Function, any: Object, all: Object, sort: Function, sortWith: Function, sortBy: String, sum: Function, product: Function, mean: Array, average: Function, maximum: Function, minimum: Function, maximumBy: Array, minimumBy: Array, scan: Function, scanl: Array, scan1: Array, scanl1: Array, scanr: Array, scanr1: Array, slice: Array, take: Function, drop: Function, splitAt: Number, takeWhile: Function, dropWhile: Function, span: Function, breakList: Array, zip: Array, zipWith: Object, zipAll: Function, zipAllWith: Function, at: Object, elemIndex: Function, elemIndices: Array, findIndex: Number, findIndices: Array, toString$: Function = {}.toString;
each = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    f(x);
  }
  return xs;
});
map = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    results$.push(f(x));
  }
  return results$;
});
compact = function(xs: Array){
  var i$: Number, len$: Function, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      results$.push(x);
    }
  }
  return results$;
};
filter = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
reject = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      results$.push(x);
    }
  }
  return results$;
});
remove = curry$(function(el: Array, xs: Object){
  var i: Number, x$: Array;
  i = elemIndex(el, xs);
  x$ = xs.slice();
  if (i != null) {
    x$.splice(i, 1);
  }
  return x$;
});
partition = curry$(function(f: Function, xs: Array){
  var passed: Array, failed: Array, i$: Number, len$: Function, x: String;
  passed = [];
  failed = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    (f(x) ? passed : failed).push(x);
  }
  return [passed, failed];
});
find = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return x;
    }
  }
});
head = first = function(xs: Promise){
  return xs[0];
};
tail = function(xs: Array){
  if (!xs.length) {
    return;
  }
  return xs.slice(1);
};
last = function(xs: Array){
  return xs[xs.length - 1];
};
initial = function(xs: Array){
  if (!xs.length) {
    return;
  }
  return xs.slice(0, -1);
};
empty = function(xs: Array){
  return !xs.length;
};
reverse = function(xs: Promise){
  return xs.concat().reverse();
};
unique = function(xs: Array){
  var result: Array, i$: Number, len$: Function, x: String;
  result = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!in$(x, result)) {
      result.push(x);
    }
  }
  return result;
};
uniqueBy = curry$(function(f: Function, xs: Array){
  var seen: Array, i$: Number, len$: Function, x: String, val: String, results$: Array = [];
  seen = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    val = f(x);
    if (in$(val, seen)) {
      continue;
    }
    seen.push(val);
    results$.push(x);
  }
  return results$;
});
fold = foldl = curry$(function(f: Function, memo: Number, xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    memo = f(memo, x);
  }
  return memo;
});
fold1 = foldl1 = curry$(function(f: Number, xs: Array){
  return fold(f, xs[0], xs.slice(1));
});
foldr = curry$(function(f: Function, memo: Number, xs: Array){
  var i$: Number, x: String;
  for (i$ = xs.length - 1; i$ >= 0; --i$) {
    x = xs[i$];
    memo = f(x, memo);
  }
  return memo;
});
foldr1 = curry$(function(f: Number, xs: Array){
  return foldr(f, xs[xs.length - 1], xs.slice(0, -1));
});
unfoldr = curry$(function(f: Function, b: String){
  var result: Array, x: String, that: Object;
  result = [];
  x = b;
  while ((that = f(x)) != null) {
    result.push(that[0]);
    x = that[1];
  }
  return result;
});
concat = function(xss: Function){
  return [].concat.apply([], xss);
};
concatMap = curry$(function(f: Function, xs: Function){
  var x: String;
  return [].concat.apply([], (function(){
    var i$: Number, ref$: Object, len$: Function, results$: Array = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(f(x));
    }
    return results$;
  }()));
});
flatten = function(xs: Function){
  var x: String;
  return [].concat.apply([], (function(){
    var i$: Number, ref$: Object, len$: Function, results$: Array = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      if (toString$.call(x).slice(8, -1) === 'Array') {
        results$.push(flatten(x));
      } else {
        results$.push(x);
      }
    }
    return results$;
  }()));
};
difference = function(xs: Array){
  var yss: Array, res$: Array, i$: Number, to$: Function, results: Array, len$: Function, x: String, j$: Number, len1$: Function, ys: Function;
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  yss = res$;
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
intersection = function(xs: Array){
  var yss: Array, res$: Array, i$: Number, to$: Function, results: Array, len$: Function, x: String, j$: Number, len1$: Function, ys: Function;
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  yss = res$;
  results = [];
  outer: for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    for (j$ = 0, len1$ = yss.length; j$ < len1$; ++j$) {
      ys = yss[j$];
      if (!in$(x, ys)) {
        continue outer;
      }
    }
    results.push(x);
  }
  return results;
};
union = function(){
  var xss: Array, res$: Array, i$: Number, to$: Function, results: Array, len$: Function, xs: Array, j$: Number, len1$: Function, x: String;
  res$ = [];
  for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  results = [];
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    for (j$ = 0, len1$ = xs.length; j$ < len1$; ++j$) {
      x = xs[j$];
      if (!in$(x, results)) {
        results.push(x);
      }
    }
  }
  return results;
};
countBy = curry$(function(f: Function, xs: Array){
  var results: Object, i$: Number, len$: Function, x: String, key: String;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key] += 1;
    } else {
      results[key] = 1;
    }
  }
  return results;
});
groupBy = curry$(function(f: Function, xs: Array){
  var results: Object, i$: Number, len$: Function, x: String, key: String;
  results = {};
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    key = f(x);
    if (key in results) {
      results[key].push(x);
    } else {
      results[key] = [x];
    }
  }
  return results;
});
andList = function(xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!x) {
      return false;
    }
  }
  return true;
};
orList = function(xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (x) {
      return true;
    }
  }
  return false;
};
any = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (f(x)) {
      return true;
    }
  }
  return false;
});
all = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    if (!f(x)) {
      return false;
    }
  }
  return true;
});
sort = function(xs: Promise){
  return xs.concat().sort(function(x: Number, y: Number){
    if (x > y) {
      return 1;
    } else if (x < y) {
      return -1;
    } else {
      return 0;
    }
  });
};
sortWith = curry$(function(f: String, xs: Promise){
  return xs.concat().sort(f);
});
sortBy = curry$(function(f: Function, xs: Promise){
  return xs.concat().sort(function(x: String, y: String){
    if (f(x) > f(y)) {
      return 1;
    } else if (f(x) < f(y)) {
      return -1;
    } else {
      return 0;
    }
  });
});
sum = function(xs: Array){
  var result: Number, i$: Number, len$: Function, x: String;
  result = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result += x;
  }
  return result;
};
product = function(xs: Array){
  var result: Number, i$: Number, len$: Function, x: String;
  result = 1;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    result *= x;
  }
  return result;
};
mean = average = function(xs: Array){
  var sum: Number, i$: Number, len$: Function, x: String;
  sum = 0;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    x = xs[i$];
    sum += x;
  }
  return sum / xs.length;
};
maximum = function(xs: Array){
  var max: Number, i$: Number, ref$: Object, len$: Function, x: Number;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x > max) {
      max = x;
    }
  }
  return max;
};
minimum = function(xs: Array){
  var min: Function, i$: Number, ref$: Object, len$: Function, x: Function;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (x < min) {
      min = x;
    }
  }
  return min;
};
maximumBy = curry$(function(f: Function, xs: Array){
  var max: Function, i$: Number, ref$: Object, len$: Function, x: Function;
  max = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) > f(max)) {
      max = x;
    }
  }
  return max;
});
minimumBy = curry$(function(f: Function, xs: Array){
  var min: Function, i$: Number, ref$: Object, len$: Function, x: Function;
  min = xs[0];
  for (i$ = 0, len$ = (ref$ = xs.slice(1)).length; i$ < len$; ++i$) {
    x = ref$[i$];
    if (f(x) < f(min)) {
      min = x;
    }
  }
  return min;
});
scan = scanl = curry$(function(f: Function, memo: String, xs: Function){
  var last: String, x: String;
  last = memo;
  return [memo].concat((function(){
    var i$: Number, ref$: Object, len$: Function, results$: Array = [];
    for (i$ = 0, len$ = (ref$ = xs).length; i$ < len$; ++i$) {
      x = ref$[i$];
      results$.push(last = f(last, x));
    }
    return results$;
  }()));
});
scan1 = scanl1 = curry$(function(f: Number, xs: Array){
  if (!xs.length) {
    return;
  }
  return scan(f, xs[0], xs.slice(1));
});
scanr = curry$(function(f: Number, memo: Number, xs: Array){
  xs = xs.concat().reverse();
  return scan(f, memo, xs).reverse();
});
scanr1 = curry$(function(f: Number, xs: Array){
  if (!xs.length) {
    return;
  }
  xs = xs.concat().reverse();
  return scan(f, xs[0], xs.slice(1)).reverse();
});
slice = curry$(function(x: String, y: String, xs: Array){
  return xs.slice(x, y);
});
take = curry$(function(n: Number, xs: Array){
  if (n <= 0) {
    return xs.slice(0, 0);
  } else {
    return xs.slice(0, n);
  }
});
drop = curry$(function(n: Number, xs: Array){
  if (n <= 0) {
    return xs;
  } else {
    return xs.slice(n);
  }
});
splitAt = curry$(function(n: String, xs: Number){
  return [take(n, xs), drop(n, xs)];
});
takeWhile = curry$(function(p: Function, xs: Array){
  var len: Number, i: Number;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(0, i);
});
dropWhile = curry$(function(p: Function, xs: Array){
  var len: Number, i: Number;
  len = xs.length;
  if (!len) {
    return xs;
  }
  i = 0;
  while (i < len && p(xs[i])) {
    i += 1;
  }
  return xs.slice(i);
});
span = curry$(function(p: Array, xs: Number){
  return [takeWhile(p, xs), dropWhile(p, xs)];
});
breakList = curry$(function(p: String, xs: Array){
  return span(compose$(p, not$), xs);
});
zip = curry$(function(xs: Array, ys: Array){
  var result: Array, len: Number, i$: Number, len$: Function, i: Number, x: String;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push([x, ys[i]]);
  }
  return result;
});
zipWith = curry$(function(f: Function, xs: Array, ys: Array){
  var result: Array, len: Number, i$: Number, len$: Function, i: Number, x: String;
  result = [];
  len = ys.length;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (i === len) {
      break;
    }
    result.push(f(x, ys[i]));
  }
  return result;
});
zipAll = function(){
  var xss: Array, res$: Array, i$: Number, to$: Function, minLength: Number, len$: Function, xs: Array, ref$: Function, i: Number, lresult$: Array, j$: Number, results$: Array = [];
  res$ = [];
  for (i$ = 0, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    lresult$ = [];
    for (j$ = 0, len$ = xss.length; j$ < len$; ++j$) {
      xs = xss[j$];
      lresult$.push(xs[i]);
    }
    results$.push(lresult$);
  }
  return results$;
};
zipAllWith = function(f: Object){
  var xss: Array, res$: Array, i$: Number, to$: Function, minLength: Number, len$: Function, xs: Array, ref$: Function, i: Number, results$: Array = [];
  res$ = [];
  for (i$ = 1, to$ = arguments.length; i$ < to$; ++i$) {
    res$.push(arguments[i$]);
  }
  xss = res$;
  minLength = undefined;
  for (i$ = 0, len$ = xss.length; i$ < len$; ++i$) {
    xs = xss[i$];
    minLength <= (ref$ = xs.length) || (minLength = ref$);
  }
  for (i$ = 0; i$ < minLength; ++i$) {
    i = i$;
    results$.push(f.apply(null, (fn$())));
  }
  return results$;
  function fn$(): Array{
    var i$: Number, ref$: Object, len$: Function, results$: Array = [];
    for (i$ = 0, len$ = (ref$ = xss).length; i$ < len$; ++i$) {
      xs = ref$[i$];
      results$.push(xs[i]);
    }
    return results$;
  }
};
at = curry$(function(n: String, xs: Array){
  if (n < 0) {
    return xs[xs.length + n];
  } else {
    return xs[n];
  }
});
elemIndex = curry$(function(el: String, xs: Array){
  var i$: Number, len$: Function, i: Number, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      return i;
    }
  }
});
elemIndices = curry$(function(el: String, xs: Array){
  var i$: Number, len$: Function, i: Number, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (x === el) {
      results$.push(i);
    }
  }
  return results$;
});
findIndex = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, i: Number, x: String;
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      return i;
    }
  }
});
findIndices = curry$(function(f: Function, xs: Array){
  var i$: Number, len$: Function, i: Number, x: String, results$: Array = [];
  for (i$ = 0, len$ = xs.length; i$ < len$; ++i$) {
    i = i$;
    x = xs[i$];
    if (f(x)) {
      results$.push(i);
    }
  }
  return results$;
});
module.exports = {
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  remove: remove,
  partition: partition,
  find: find,
  head: head,
  first: first,
  tail: tail,
  last: last,
  initial: initial,
  empty: empty,
  reverse: reverse,
  difference: difference,
  intersection: intersection,
  union: union,
  countBy: countBy,
  groupBy: groupBy,
  fold: fold,
  fold1: fold1,
  foldl: foldl,
  foldl1: foldl1,
  foldr: foldr,
  foldr1: foldr1,
  unfoldr: unfoldr,
  andList: andList,
  orList: orList,
  any: any,
  all: all,
  unique: unique,
  uniqueBy: uniqueBy,
  sort: sort,
  sortWith: sortWith,
  sortBy: sortBy,
  sum: sum,
  product: product,
  mean: mean,
  average: average,
  concat: concat,
  concatMap: concatMap,
  flatten: flatten,
  maximum: maximum,
  minimum: minimum,
  maximumBy: maximumBy,
  minimumBy: minimumBy,
  scan: scan,
  scan1: scan1,
  scanl: scanl,
  scanl1: scanl1,
  scanr: scanr,
  scanr1: scanr1,
  slice: slice,
  take: take,
  drop: drop,
  splitAt: splitAt,
  takeWhile: takeWhile,
  dropWhile: dropWhile,
  span: span,
  breakList: breakList,
  zip: zip,
  zipWith: zipWith,
  zipAll: zipAll,
  zipAllWith: zipAllWith,
  at: at,
  elemIndex: elemIndex,
  elemIndices: elemIndices,
  findIndex: findIndex,
  findIndices: findIndices
};
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
function in$(x: String, xs: Array): Boolean{
  var i: Number = -1, l: Number = xs.length >>> 0;
  while (++i < l) if (x === xs[i]) return true;
  return false;
}
function compose$(): Function {
  var functions: Map = arguments;
  return function() {
    var i: Number, result: Function;
    result = functions[0].apply(this, arguments);
    for (i = 1; i < functions.length; ++i) {
      result = functions[i](result);
    }
    return result;
  };
}
function not$(x: Number): Boolean{ return !x; }
},{}],3:[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var max: Number, min: String, negate: Function, abs: Number, signum: Function, quot: Array, rem: Array, div: Array, mod: Array, recip: Function, pi: Number, tau: Number, exp: Array, sqrt: Array, ln: String, pow: String, sin: String, tan: String, cos: String, asin: String, acos: Array, atan: String, atan2: Array, truncate: Function, round: Array, ceiling: Array, floor: Number, isItNaN: Boolean, even: Function, odd: Function, gcd: Function, lcm: Array;
max = curry$(function(x$: Number, y$: Number){
  return x$ > y$ ? x$ : y$;
});
min = curry$(function(x$: String, y$: Number){
  return x$ < y$ ? x$ : y$;
});
negate = function(x: Number){
  return -x;
};
abs = Math.abs;
signum = function(x: Number){
  if (x < 0) {
    return -1;
  } else if (x > 0) {
    return 1;
  } else {
    return 0;
  }
};
quot = curry$(function(x: Number, y: Number){
  return ~~(x / y);
});
rem = curry$(function(x$: String, y$: Number){
  return x$ % y$;
});
div = curry$(function(x: Number, y: Number){
  return Math.floor(x / y);
});
mod = curry$(function(x$: String, y$: Number){
  var ref$: Number;
  return ((x$) % (ref$ = y$) + ref$) % ref$;
});
recip = (function(it: Number){
  return 1 / it;
});
pi = Math.PI;
tau = pi * 2;
exp = Math.exp;
sqrt = Math.sqrt;
ln = Math.log;
pow = curry$(function(x$: Number, y$: Number){
  return Math.pow(x$, y$);
});
sin = Math.sin;
tan = Math.tan;
cos = Math.cos;
asin = Math.asin;
acos = Math.acos;
atan = Math.atan;
atan2 = curry$(function(x: Number, y: Number){
  return Math.atan2(x, y);
});
truncate = function(x: String){
  return ~~x;
};
round = Math.round;
ceiling = Math.ceil;
floor = Math.floor;
isItNaN = function(x: Number){
  return x !== x;
};
even = function(x: String){
  return x % 2 === 0;
};
odd = function(x: String){
  return x % 2 !== 0;
};
gcd = curry$(function(x: Number, y: Number){
  var z: Number;
  x = Math.abs(x);
  y = Math.abs(y);
  while (y !== 0) {
    z = x % y;
    x = y;
    y = z;
  }
  return x;
});
lcm = curry$(function(x: Number, y: Number){
  return Math.abs(Math.floor(x / gcd(x, y) * y));
});
module.exports = {
  max: max,
  min: min,
  negate: negate,
  abs: abs,
  signum: signum,
  quot: quot,
  rem: rem,
  div: div,
  mod: mod,
  recip: recip,
  pi: pi,
  tau: tau,
  exp: exp,
  sqrt: sqrt,
  ln: ln,
  pow: pow,
  sin: sin,
  tan: tan,
  cos: cos,
  acos: acos,
  asin: asin,
  atan: atan,
  atan2: atan2,
  truncate: truncate,
  round: round,
  ceiling: ceiling,
  floor: floor,
  isItNaN: isItNaN,
  even: even,
  odd: odd,
  gcd: gcd,
  lcm: lcm
};
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],4:[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var values: Function, keys: Function, pairsToObj: Function, objToPairs: Function, listsToObj: Array, objToLists: Function, empty: Function, each: Object, map: Array, compact: Function, filter: Object, reject: Object, partition: Array, find: Object;
values = function(object: Object){
  var i$: String, x: String, results$: Array = [];
  for (i$ in object) {
    x = object[i$];
    results$.push(x);
  }
  return results$;
};
keys = function(object: Object){
  var x: String, results$: Array = [];
  for (x in object) {
    results$.push(x);
  }
  return results$;
};
pairsToObj = function(object: Array){
  var i$: Number, len$: Function, x: Object, resultObj$: Object = {};
  for (i$ = 0, len$ = object.length; i$ < len$; ++i$) {
    x = object[i$];
    resultObj$[x[0]] = x[1];
  }
  return resultObj$;
};
objToPairs = function(object: Object){
  var key: String, value: String, results$: Array = [];
  for (key in object) {
    value = object[key];
    results$.push([key, value]);
  }
  return results$;
};
listsToObj = curry$(function(keys: Array, values: Object){
  var i$: Number, len$: Function, i: Number, key: String, resultObj$: Object = {};
  for (i$ = 0, len$ = keys.length; i$ < len$; ++i$) {
    i = i$;
    key = keys[i$];
    resultObj$[key] = values[i];
  }
  return resultObj$;
});
objToLists = function(object: Object){
  var keys: Array, values: Array, key: String, value: String;
  keys = [];
  values = [];
  for (key in object) {
    value = object[key];
    keys.push(key);
    values.push(value);
  }
  return [keys, values];
};
empty = function(object: Object){
  var x: String;
  for (x in object) {
    return false;
  }
  return true;
};
each = curry$(function(f: Function, object: Object){
  var i$: String, x: String;
  for (i$ in object) {
    x = object[i$];
    f(x);
  }
  return object;
});
map = curry$(function(f: Function, object: Object){
  var k: Function, x: String, resultObj$: Object = {};
  for (k in object) {
    x = object[k];
    resultObj$[k] = f(x);
  }
  return resultObj$;
});
compact = function(object: Object){
  var k: Function, x: Function, resultObj$: Object = {};
  for (k in object) {
    x = object[k];
    if (x) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
};
filter = curry$(function(f: Function, object: Object){
  var k: Function, x: String, resultObj$: Object = {};
  for (k in object) {
    x = object[k];
    if (f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
reject = curry$(function(f: Function, object: Object){
  var k: Function, x: String, resultObj$: Object = {};
  for (k in object) {
    x = object[k];
    if (!f(x)) {
      resultObj$[k] = x;
    }
  }
  return resultObj$;
});
partition = curry$(function(f: Function, object: Object){
  var passed: Object, failed: Object, k: Function, x: String;
  passed = {};
  failed = {};
  for (k in object) {
    x = object[k];
    (f(x) ? passed : failed)[k] = x;
  }
  return [passed, failed];
});
find = curry$(function(f: Function, object: Object){
  var i$: String, x: String;
  for (i$ in object) {
    x = object[i$];
    if (f(x)) {
      return x;
    }
  }
});
module.exports = {
  values: values,
  keys: keys,
  pairsToObj: pairsToObj,
  objToPairs: objToPairs,
  listsToObj: listsToObj,
  objToLists: objToLists,
  empty: empty,
  each: each,
  map: map,
  filter: filter,
  compact: compact,
  reject: reject,
  partition: partition,
  find: find
};
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],5:[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var split: Object, join: String, lines: Function, unlines: Function, words: Function, unwords: Function, chars: Function, unchars: Function, reverse: Function, repeat: String, capitalize: Function, camelize: Function, dasherize: Function;
split = curry$(function(sep: Array, str: String){
  return str.split(sep);
});
join = curry$(function(sep: String, xs: Object){
  return xs.join(sep);
});
lines = function(str: String){
  if (!str.length) {
    return [];
  }
  return str.split('\n');
};
unlines = function(it: Object){
  return it.join('\n');
};
words = function(str: String){
  if (!str.length) {
    return [];
  }
  return str.split(/[ ]+/);
};
unwords = function(it: Object){
  return it.join(' ');
};
chars = function(it: String){
  return it.split('');
};
unchars = function(it: Object){
  return it.join('');
};
reverse = function(str: String){
  return str.split('').reverse().join('');
};
repeat = curry$(function(n: Number, str: Number){
  var result: String, i$: Number;
  result = '';
  for (i$ = 0; i$ < n; ++i$) {
    result += str;
  }
  return result;
});
capitalize = function(str: String){
  return str.charAt(0).toUpperCase() + str.slice(1);
};
camelize = function(it: String){
  return it.replace(/[-_]+(.)?/g, function(arg$: Function, c: String){
    return (c != null ? c : '').toUpperCase();
  });
};
dasherize = function(str: String){
  return str.replace(/([^-A-Z])([A-Z]+)/g, function(arg$: Function, lower: Number, upper: String){
    return lower + "-" + (upper.length > 1
      ? upper
      : upper.toLowerCase());
  }).replace(/^([A-Z]+)/, function(arg$: Number, upper: String){
    if (upper.length > 1) {
      return upper + "-";
    } else {
      return upper.toLowerCase();
    }
  });
};
module.exports = {
  split: split,
  join: join,
  lines: lines,
  unlines: unlines,
  words: words,
  unwords: unwords,
  chars: chars,
  unchars: unchars,
  reverse: reverse,
  repeat: repeat,
  capitalize: capitalize,
  camelize: camelize,
  dasherize: dasherize
};
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{}],"prelude-ls":[function(require: Function,module: Function,exports: Number){
// Generated by LiveScript 1.6.0
var Func: Object, List: Object, Obj: Object, Str: Object, Num: Object, id: Function, isType: String, replicate: String, prelude: Object, toString$: Function = {}.toString;
Func = require('./Func.js');
List = require('./List.js');
Obj = require('./Obj.js');
Str = require('./Str.js');
Num = require('./Num.js');
id = function(x: String){
  return x;
};
isType = curry$(function(type: Number, x: String){
  return toString$.call(x).slice(8, -1) === type;
});
replicate = curry$(function(n: Number, x: String){
  var i$: Number, results$: Array = [];
  for (i$ = 0; i$ < n; ++i$) {
    results$.push(x);
  }
  return results$;
});
Str.empty = List.empty;
Str.slice = List.slice;
Str.take = List.take;
Str.drop = List.drop;
Str.splitAt = List.splitAt;
Str.takeWhile = List.takeWhile;
Str.dropWhile = List.dropWhile;
Str.span = List.span;
Str.breakStr = List.breakList;
prelude = {
  Func: Func,
  List: List,
  Obj: Obj,
  Str: Str,
  Num: Num,
  id: id,
  isType: isType,
  replicate: replicate
};
prelude.each = List.each;
prelude.map = List.map;
prelude.filter = List.filter;
prelude.compact = List.compact;
prelude.reject = List.reject;
prelude.partition = List.partition;
prelude.find = List.find;
prelude.head = List.head;
prelude.first = List.first;
prelude.tail = List.tail;
prelude.last = List.last;
prelude.initial = List.initial;
prelude.empty = List.empty;
prelude.reverse = List.reverse;
prelude.difference = List.difference;
prelude.intersection = List.intersection;
prelude.union = List.union;
prelude.countBy = List.countBy;
prelude.groupBy = List.groupBy;
prelude.fold = List.fold;
prelude.foldl = List.foldl;
prelude.fold1 = List.fold1;
prelude.foldl1 = List.foldl1;
prelude.foldr = List.foldr;
prelude.foldr1 = List.foldr1;
prelude.unfoldr = List.unfoldr;
prelude.andList = List.andList;
prelude.orList = List.orList;
prelude.any = List.any;
prelude.all = List.all;
prelude.unique = List.unique;
prelude.uniqueBy = List.uniqueBy;
prelude.sort = List.sort;
prelude.sortWith = List.sortWith;
prelude.sortBy = List.sortBy;
prelude.sum = List.sum;
prelude.product = List.product;
prelude.mean = List.mean;
prelude.average = List.average;
prelude.concat = List.concat;
prelude.concatMap = List.concatMap;
prelude.flatten = List.flatten;
prelude.maximum = List.maximum;
prelude.minimum = List.minimum;
prelude.maximumBy = List.maximumBy;
prelude.minimumBy = List.minimumBy;
prelude.scan = List.scan;
prelude.scanl = List.scanl;
prelude.scan1 = List.scan1;
prelude.scanl1 = List.scanl1;
prelude.scanr = List.scanr;
prelude.scanr1 = List.scanr1;
prelude.slice = List.slice;
prelude.take = List.take;
prelude.drop = List.drop;
prelude.splitAt = List.splitAt;
prelude.takeWhile = List.takeWhile;
prelude.dropWhile = List.dropWhile;
prelude.span = List.span;
prelude.breakList = List.breakList;
prelude.zip = List.zip;
prelude.zipWith = List.zipWith;
prelude.zipAll = List.zipAll;
prelude.zipAllWith = List.zipAllWith;
prelude.at = List.at;
prelude.elemIndex = List.elemIndex;
prelude.elemIndices = List.elemIndices;
prelude.findIndex = List.findIndex;
prelude.findIndices = List.findIndices;
prelude.apply = Func.apply;
prelude.curry = Func.curry;
prelude.flip = Func.flip;
prelude.fix = Func.fix;
prelude.over = Func.over;
prelude.split = Str.split;
prelude.join = Str.join;
prelude.lines = Str.lines;
prelude.unlines = Str.unlines;
prelude.words = Str.words;
prelude.unwords = Str.unwords;
prelude.chars = Str.chars;
prelude.unchars = Str.unchars;
prelude.repeat = Str.repeat;
prelude.capitalize = Str.capitalize;
prelude.camelize = Str.camelize;
prelude.dasherize = Str.dasherize;
prelude.values = Obj.values;
prelude.keys = Obj.keys;
prelude.pairsToObj = Obj.pairsToObj;
prelude.objToPairs = Obj.objToPairs;
prelude.listsToObj = Obj.listsToObj;
prelude.objToLists = Obj.objToLists;
prelude.max = Num.max;
prelude.min = Num.min;
prelude.negate = Num.negate;
prelude.abs = Num.abs;
prelude.signum = Num.signum;
prelude.quot = Num.quot;
prelude.rem = Num.rem;
prelude.div = Num.div;
prelude.mod = Num.mod;
prelude.recip = Num.recip;
prelude.pi = Num.pi;
prelude.tau = Num.tau;
prelude.exp = Num.exp;
prelude.sqrt = Num.sqrt;
prelude.ln = Num.ln;
prelude.pow = Num.pow;
prelude.sin = Num.sin;
prelude.tan = Num.tan;
prelude.cos = Num.cos;
prelude.acos = Num.acos;
prelude.asin = Num.asin;
prelude.atan = Num.atan;
prelude.atan2 = Num.atan2;
prelude.truncate = Num.truncate;
prelude.round = Num.round;
prelude.ceiling = Num.ceiling;
prelude.floor = Num.floor;
prelude.isItNaN = Num.isItNaN;
prelude.even = Num.even;
prelude.odd = Num.odd;
prelude.gcd = Num.gcd;
prelude.lcm = Num.lcm;
prelude.VERSION = '1.2.1';
module.exports = prelude;
function curry$(f: Array, bound: Boolean): Boolean{
  var context: String,
  _curry: Function = function(args: Promise) {
    return f.length > 1 ? function(){
      var params: Array = args ? args.concat() : [];
      context = bound ? context || this : this;
      return params.push.apply(params, arguments) <
          f.length && arguments.length ?
        _curry.call(context, params) : f.apply(context, params);
    } : f;
  };
  return _curry();
}
},{"./Func.js":1,"./List.js":2,"./Num.js":3,"./Obj.js":4,"./Str.js":5}]},{},[]);
