importKeyword
 Text.Whitespace
rootName.Otherany0.1086string0.0879Node0.0293HTMLElement0.0290Promise<string>0.0234
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./.internal/root.js'Literal.String.Single
\n\nText.Whitespace
Text
/** Used to match leading and trailing whitespace. */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
reTrimStartName.OtherRegExp0.5309string0.4359any0.0145number0.0067boolean0.0033
 Text.Whitespace
=Operator
 Text.Whitespace
/^\s+/Literal.String.Regex
\n\nText.Whitespace
Text
/* Built-in method references for those with the same name as other `lodash` methods. */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
nativeParseIntName.Othernumber0.7110string0.2289any0.0546boolean0.0024complex0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
rootName.Otherany0.2538Node0.0328string0.0275string[]0.0270complex0.0168
.Punctuation
parseIntName.Builtinnumber0.9567any0.0364string0.0047complex0.0012boolean0.0003
\n\nText.Whitespace
Text
/**\n * Converts `string` to an integer of the specified radix. If `radix` is\n * `undefined` or `0`, a `radix` of `10` is used unless `string` is a\n * hexadecimal, in which case a `radix` of `16` is used.\n *\n * **Note:** This method aligns with the\n * [ES5 implementation](https://es5.github.io/#x15.1.2.2) of `parseInt`.\n *\n * @since 1.1.0\n * @category String\n * @param {string} string The string to convert.\n * @param {number} [radix=10] The radix to interpret `string` by.\n * @returns {number} Returns the converted integer.\n * @example\n *\n * parseInt('08')\n * // => 8\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
parseIntName.Builtinnumber0.9915any0.0042string0.0024complex0.0009boolean0.0004
(Punctuation
stringKeyword.Type
,Punctuation
 Text.Whitespace
radixName.Othernumber0.9347any0.0599string0.0042boolean0.0006complex0.0005
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
radixName.Othernumber0.8911any0.1031string0.0034complex0.0013boolean0.0006
 Text.Whitespace
==Operator
 Text.Whitespace
nullKeyword.Constant
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
radixName.Othernumber0.9738any0.0242string0.0012complex0.0004boolean0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
radixName.Othernumber0.9346any0.0605string0.0031boolean0.0009complex0.0006
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
radixName.Othernumber0.9482any0.0481string0.0027boolean0.0004complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
+Operator
radixName.Othernumber0.9587any0.0379string0.0022complex0.0006boolean0.0003
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
nativeParseIntName.Otherstring0.6651number0.1332any0.1076complex0.0283RegExp0.0214
(Punctuation
`Literal.String.Backtick
${Literal.String.Interpol
stringKeyword.Type
}Literal.String.Interpol
`Literal.String.Backtick
.Punctuation
replaceName.Othercomplex0.9272any0.0679string0.0023number0.0010boolean0.0005
(Punctuation
reTrimStartName.OtherRegExp0.9418string0.0469any0.0060number0.0015string[]0.0009
,Punctuation
 Text.Whitespace
''Literal.String.Single
)Punctuation
,Punctuation
 Text.Whitespace
radixName.Othernumber0.9303any0.0650string0.0031boolean0.0006complex0.0006
 Text.Whitespace
||Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
parseIntName.Builtinnumber0.9845any0.0054string0.0049boolean0.0008complex0.0008
\nText.Whitespace
