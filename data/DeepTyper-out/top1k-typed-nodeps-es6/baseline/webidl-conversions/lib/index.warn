Found multiple declarations; skipping rest of declarations.
	let lowerBound: number, upperBound;
Found optional parameters; skipping function.
	(value, options = {}) => { let x = toNumber(value, options); x = censorNegativeZ
Found optional parameters; skipping function.
	(value, options = {}) => { let x = toNumber(value, options); x = censorNegativeZ
Found optional parameters; skipping function.
	(value, options = {}) => { const x = toNumber(value, options); if (!Number.isFin
Found optional parameters; skipping function.
	(value, options = {}) => { const x = toNumber(value, options); return x; }
Found optional parameters; skipping function.
	(value, options = {}) => { const x = toNumber(value, options); if (!Number.isFin
Found optional parameters; skipping function.
	(value, options = {}) => { const x = toNumber(value, options); if (isNaN(x)) { r
Found optional parameters; skipping function.
	(value, options = {}) => { if (options.treatNullAsEmptyString && value === null)
Found optional parameters; skipping function.
	(value, options = {}) => { const x = exports.DOMString(value, options); let c; f
Found optional parameters; skipping function.
	(value, options = {}) => { const S = exports.DOMString(value, options); const n 
Found optional parameters; skipping function.
	(value, options = {}) => { if (value === null || (typeof value !== "object" && t
Found optional parameters; skipping function.
	(value, options = {}) => { if (!isNonSharedArrayBuffer(value)) { if (options.all
Found optional parameters; skipping function.
	(value, options = {}) => { try { dvByteLengthGetter.call(value); } catch (e) { t
Found optional parameters; skipping function.
	(value, options = {}) => { if (!ArrayBuffer.isView(value) || typedArrayNameGette
Found optional parameters; skipping function.
	(value, options = {}) => { if (!ArrayBuffer.isView(value)) { throw makeException
Found optional parameters; skipping function.
	(value, options = {}) => { if (ArrayBuffer.isView(value)) { if (!options.allowSh

