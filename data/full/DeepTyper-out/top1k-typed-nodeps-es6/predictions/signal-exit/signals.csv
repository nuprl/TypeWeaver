Text
// This is not the set of all possible signals.Comment.Single
\nText.Whitespace
//Comment.Single
\nText.Whitespace
// It IS, however, the set of all signals that triggerComment.Single
\nText.Whitespace
// an exit on either Linux or BSD systems.  Linux is aComment.Single
\nText.Whitespace
// superset of the signal names supported on BSD, andComment.Single
\nText.Whitespace
// the unknown signals just fail to register, so we canComment.Single
\nText.Whitespace
// catch that easily enough.Comment.Single
\nText.Whitespace
//Comment.Single
\nText.Whitespace
// Don't bother with SIGKILL.  It's uncatchable, whichComment.Single
\nText.Whitespace
// means that we can't fire any callbacks anyway.Comment.Single
\nText.Whitespace
//Comment.Single
\nText.Whitespace
// If a user does happen to register a handler on a non-Comment.Single
\nText.Whitespace
// fatal signal like SIGWINCH or something, and thenComment.Single
\nText.Whitespace
// exit, it'll end up firing `process.emit('exit')`, soComment.Single
\nText.Whitespace
// the handler will be fired anyway.Comment.Single
\nText.Whitespace
//Comment.Single
\nText.Whitespace
// SIGBUS, SIGFPE, SIGSEGV and SIGILL, when not raisedComment.Single
\nText.Whitespace
// artificially, inherently leave the process in aComment.Single
\nText.Whitespace
// state from which it is not safe to try and enter JSComment.Single
\nText.Whitespace
// listeners.Comment.Single
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
[Punctuation
\n  Text.Whitespace
'SIGABRT'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'SIGALRM'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'SIGHUP'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'SIGINT'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'SIGTERM'Literal.String.Single
\nText.Whitespace
]Punctuation
;Punctuation
\n\nText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
processName.Otherany0.9853Process0.0018complex0.0011string0.0009this0.0005
.Punctuation
platformName.Otherany0.9515string0.0441number0.0013boolean0.0008complex0.0006
 Text.Whitespace
!==Operator
 Text.Whitespace
'win32'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
pushName.Othernumber0.7922any0.0950void0.0724string0.0060boolean0.0059
(Punctuation
\n    Text.Whitespace
'SIGVTALRM'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGXCPU'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGXFSZ'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGUSR2'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGTRAP'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGSYS'Literal.String.Single
,Punctuation
\n    Text.Whitespace
'SIGQUIT'Literal.String.Single
,Punctuation
\n    Text.Whitespace
// should detect profiler and enable/disable accordingly.Comment.Single
\n    Text.Whitespace
// see #21Comment.Single
\n    Text.Whitespace
// 'SIGPROF'Comment.Single
\n    Text.Whitespace
'SIGIOT'Literal.String.Single
\n  Text.Whitespace
)Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
processName.Otherany0.9929complex0.0006Process0.0006string0.0005void0.0004
.Punctuation
platformName.Otherany0.9738string0.0232number0.0008boolean0.0007void0.0005
 Text.Whitespace
===Operator
 Text.Whitespace
'linux'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
pushName.Othernumber0.8295any0.0808void0.0595string0.0053boolean0.0037
(Punctuation
'SIGIO'Literal.String.Single
,Punctuation
 Text.Whitespace
'SIGPOLL'Literal.String.Single
,Punctuation
 Text.Whitespace
'SIGPWR'Literal.String.Single
,Punctuation
 Text.Whitespace
'SIGSTKFLT'Literal.String.Single
,Punctuation
 Text.Whitespace
'SIGUNUSED'Literal.String.Single
)Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
