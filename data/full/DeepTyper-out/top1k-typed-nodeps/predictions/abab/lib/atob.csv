"use strict"Literal.String.Double
;Punctuation
\n\nText.Whitespace
/**\n * Implementation of atob() according to the HTML and Infra specs, except that\n * instead of throwing INVALID_CHARACTER_ERR we return null.\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
atobName.Otherstring0.9953any0.0021number0.0011void0.0006boolean0.0002
(Punctuation
dataName.Otherstring0.9468any0.0427number0.0028Buffer0.0011string[]0.0009
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
argumentsName.OtherIArguments0.9563string[]0.0107any[]0.0047string0.0022any0.0018
.Punctuation
lengthName.Othernumber0.9894any0.0087string0.0013boolean0.0002void0.0001
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
throwKeywordany0.4373complex0.3066string0.0796Error0.0501{}0.0292
 Text.Whitespace
newOperator.Wordany0.3820string0.2127boolean0.1459complex0.0874string[]0.0363
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9907ErrorConstructor0.0020BooleanConstructor0.0001MapConstructor0.0001NumberConstructor0.0001
(Punctuation
"1 argument required, but only 0 present."Literal.String.Double
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
// Web IDL requires DOMStrings to just be converted using ECMAScriptComment.Single
\n  Text.Whitespace
// ToString, which in our case amounts to using a template literal.Comment.Single
\n  Text.Whitespace
dataName.Otherstring0.9132any0.0733string[]0.0039number0.0019complex0.0015
 Text.Whitespace
=Operator
 Text.Whitespace
`Literal.String.Backtick
${Literal.String.Interpol
dataName.Otherstring0.7942any0.0623string[]0.0269any[]0.0116complex0.0106
}Literal.String.Interpol
`Literal.String.Backtick
;Punctuation
\n  Text.Whitespace
// "Remove all ASCII whitespace from data."Comment.Single
\n  Text.Whitespace
dataName.Otherstring0.8224any0.1574string[]0.0037number0.0034complex0.0022
 Text.Whitespace
=Operator
 Text.Whitespace
dataName.Otherstring0.9141any0.0673number0.0018string[]0.0018complex0.0014
.Punctuation
replaceName.Othercomplex0.9369any0.0549void0.0016string0.0015number0.0003
(Punctuation
/[ \t\n\f\r]/gLiteral.String.Regex
,Punctuation
 Text.Whitespace
""Literal.String.Double
)Punctuation
;Punctuation
\n  Text.Whitespace
// "If data's code point length divides by 4 leaving no remainder, then: if data endsComment.Single
\n  Text.Whitespace
// with one or two U+003D (=) code points, then remove them from data."Comment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
dataName.Otherstring0.7596any0.0929string[]0.0858any[]0.0198complex0.0047
.Punctuation
lengthName.Othernumber0.9344any0.0623string0.0021complex0.0004boolean0.0003
 Text.Whitespace
%Operator
 Text.Whitespace
4Literal.Number.Float
 Text.Whitespace
===Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
dataName.Otherstring0.8954any0.0934number0.0042string[]0.0019complex0.0010
 Text.Whitespace
=Operator
 Text.Whitespace
dataName.Otherstring0.9262any0.0642number0.0022string[]0.0011String0.0009
.Punctuation
replaceName.Othercomplex0.9165any0.0760string0.0021void0.0014number0.0006
(Punctuation
/==?$/Literal.String.Regex
,Punctuation
 Text.Whitespace
""Literal.String.Double
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
// "If data's code point length divides by 4 leaving a remainder of 1, then returnComment.Single
\n  Text.Whitespace
// failure."Comment.Single
\n  Text.Whitespace
//Comment.Single
\n  Text.Whitespace
// "If data contains a code point that is not one ofComment.Single
\n  Text.Whitespace
//Comment.Single
\n  Text.Whitespace
// U+002B (+)Comment.Single
\n  Text.Whitespace
// U+002F (/)Comment.Single
\n  Text.Whitespace
// ASCII alphanumericComment.Single
\n  Text.Whitespace
//Comment.Single
\n  Text.Whitespace
// then return failure."Comment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
dataName.Otherstring0.7358any0.0989string[]0.0937any[]0.0261complex0.0056
.Punctuation
lengthName.Othernumber0.9385any0.0587string0.0015boolean0.0005complex0.0004
 Text.Whitespace
%Operator
 Text.Whitespace
4Literal.Number.Float
 Text.Whitespace
===Operator
 Text.Whitespace
1Literal.Number.Float
 Text.Whitespace
||Operator
 Text.Whitespace
/[^+/0-9A-Za-z]/Literal.String.Regex
.Punctuation
testName.Otherboolean0.9091string0.0596any0.0091number0.0081complex0.0077
(Punctuation
dataName.Otherstring0.9293any0.0607number0.0051boolean0.0007string[]0.0006
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
nullKeyword.Constant
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
// "Let output be an empty byte sequence."Comment.Single
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
outputName.Otherstring0.9886any0.0070RegExp0.0022number0.0010string[]0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
""Literal.String.Double
;Punctuation
\n  Text.Whitespace
// "Let buffer be an empty buffer that can have bits appended to it."Comment.Single
\n  Text.Whitespace
//Comment.Single
\n  Text.Whitespace
// We append bits via left-shift and or.  accumulatedBits is used to trackComment.Single
\n  Text.Whitespace
// when we've gotten to 24 bits.Comment.Single
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
bufferName.Othernumber0.8545any0.1136complex0.0071string0.0067Buffer0.0060
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
accumulatedBitsName.Othernumber0.9981any0.0010string0.0004boolean0.0001number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
// "Let position be a position variable for data, initially pointing at theComment.Single
\n  Text.Whitespace
// start of data."Comment.Single
\n  Text.Whitespace
//Comment.Single
\n  Text.Whitespace
// "While position does not point past the end of data:"Comment.Single
\n  Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9987any0.0009string0.0002boolean0.0001number[]0.0000
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
 Text.Whitespace
iName.Othernumber0.9968any0.0023string0.0004boolean0.0001void0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
dataName.Otherstring0.5758any0.1730string[]0.0578any[]0.0315number[]0.0174
.Punctuation
lengthName.Othernumber0.9698any0.0285string0.0009boolean0.0002void0.0002
;Punctuation
 Text.Whitespace
iName.Othernumber0.9966any0.0028string0.0003boolean0.0002void0.0001
++Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
// "Find the code point pointed to by position in the second column ofComment.Single
\n    Text.Whitespace
// Table 1: The Base 64 Alphabet of RFC 4648. Let n be the number given inComment.Single
\n    Text.Whitespace
// the first cell of the same row.Comment.Single
\n    Text.Whitespace
//Comment.Single
\n    Text.Whitespace
// "Append to buffer the six bits corresponding to n, most significant bitComment.Single
\n    Text.Whitespace
// first."Comment.Single
\n    Text.Whitespace
//Comment.Single
\n    Text.Whitespace
// atobLookup() implements the table from RFC 4648.Comment.Single
\n    Text.Whitespace
bufferName.Otherany0.7745number0.1316Buffer0.0356complex0.0270string0.0049
 Text.Whitespace
<<=Operator
 Text.Whitespace
6Literal.Number.Float
;Punctuation
\n    Text.Whitespace
bufferName.Othernumber0.7453any0.1813string0.0236complex0.0143Buffer0.0120
 Text.Whitespace
|=Operator
 Text.Whitespace
atobLookupName.Othernumber0.7539void0.0979any0.0793complex0.0202string0.0100
(Punctuation
dataName.Otherany0.2537string0.2522string[]0.1733number[]0.0965any[]0.0639
[Punctuation
iName.Othernumber0.9900any0.0078string0.0019boolean0.0001void0.0001
]Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
accumulatedBitsName.Othernumber0.9940any0.0039string0.0015boolean0.0003void0.0001
 Text.Whitespace
+=Operator
 Text.Whitespace
6Literal.Number.Float
;Punctuation
\n    Text.Whitespace
// "If buffer has accumulated 24 bits, interpret them as three 8-bitComment.Single
\n    Text.Whitespace
// big-endian numbers. Append three bytes with values equal to thoseComment.Single
\n    Text.Whitespace
// numbers to output, in the same order, and then empty buffer."Comment.Single
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
accumulatedBitsName.Othernumber0.9792any0.0175string0.0022boolean0.0006complex0.0002
 Text.Whitespace
===Operator
 Text.Whitespace
24Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
outputName.Otherstring0.9856any0.0077number0.0048complex0.0005boolean0.0004
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9980String0.0007NumberConstructor0.0000Window0.0000string0.0000
.Punctuation
fromCharCodeName.Otherstring0.9915any0.0038number0.0034complex0.0007boolean0.0002
(Punctuation
(Punctuation
bufferName.Othernumber0.5612any0.3908complex0.0078string0.0076Buffer0.0053
 Text.Whitespace
&Operator
 Text.Whitespace
0xff0000Literal.Number.Hex
)Punctuation
 Text.Whitespace
>>Operator
 Text.Whitespace
16Literal.Number.Float
)Punctuation
;Punctuation
\n      Text.Whitespace
outputName.Otherstring0.9839any0.0079number0.0062boolean0.0005complex0.0004
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9979String0.0009NumberConstructor0.0000Window0.0000string0.0000
.Punctuation
fromCharCodeName.Otherstring0.9905any0.0042number0.0036complex0.0010boolean0.0001
(Punctuation
(Punctuation
bufferName.Othernumber0.6016any0.3480complex0.0088string0.0062Buffer0.0051
 Text.Whitespace
&Operator
 Text.Whitespace
0xff00Literal.Number.Hex
)Punctuation
 Text.Whitespace
>>Operator
 Text.Whitespace
8Literal.Number.Float
)Punctuation
;Punctuation
\n      Text.Whitespace
outputName.Otherstring0.9832any0.0081number0.0066complex0.0005boolean0.0005
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9981String0.0009NumberConstructor0.0000Window0.0000string0.0000
.Punctuation
fromCharCodeName.Otherstring0.9918any0.0037number0.0030complex0.0007boolean0.0002
(Punctuation
bufferName.Othernumber0.7117any0.2492string0.0069complex0.0068Buffer0.0065
 Text.Whitespace
&Operator
 Text.Whitespace
0xffLiteral.Number.Hex
)Punctuation
;Punctuation
\n      Text.Whitespace
bufferName.Othernumber0.6033any0.2979string0.0342Buffer0.0186complex0.0175
 Text.Whitespace
=Operator
 Text.Whitespace
accumulatedBitsName.Othernumber0.9788any0.0136string0.0051boolean0.0006number[]0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
// "Advance position by 1."Comment.Single
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
// "If buffer is not empty, it contains either 12 or 18 bits. If it containsComment.Single
\n  Text.Whitespace
// 12 bits, then discard the last four and interpret the remaining eight asComment.Single
\n  Text.Whitespace
// an 8-bit big-endian number. If it contains 18 bits, then discard the lastComment.Single
\n  Text.Whitespace
// two and interpret the remaining 16 as two 8-bit big-endian numbers. AppendComment.Single
\n  Text.Whitespace
// the one or two bytes with values equal to those one or two numbers toComment.Single
\n  Text.Whitespace
// output, in the same order."Comment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
accumulatedBitsName.Othernumber0.9800any0.0168string0.0016boolean0.0008complex0.0002
 Text.Whitespace
===Operator
 Text.Whitespace
12Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
bufferName.Otherany0.7712number0.0689complex0.0610Buffer0.0510string0.0071
 Text.Whitespace
>>=Operator
 Text.Whitespace
4Literal.Number.Float
;Punctuation
\n    Text.Whitespace
outputName.Otherstring0.9867any0.0081number0.0032complex0.0008void0.0003
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9981String0.0008NumberConstructor0.0000RegExp0.0000String[]0.0000
.Punctuation
fromCharCodeName.Otherstring0.9924any0.0036number0.0023complex0.0010void0.0002
(Punctuation
bufferName.Otherany0.4223number0.2896Buffer0.1168complex0.0561string0.0350
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
accumulatedBitsName.Othernumber0.9733any0.0233string0.0020boolean0.0004complex0.0003
 Text.Whitespace
===Operator
 Text.Whitespace
18Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
bufferName.Otherany0.7841complex0.0626Buffer0.0540number0.0467string0.0060
 Text.Whitespace
>>=Operator
 Text.Whitespace
2Literal.Number.Float
;Punctuation
\n    Text.Whitespace
outputName.Otherstring0.9859any0.0088number0.0033complex0.0009void0.0003
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9976String0.0010NumberConstructor0.0000RegExp0.0000string0.0000
.Punctuation
fromCharCodeName.Otherstring0.9915any0.0037number0.0030complex0.0011string[]0.0001
(Punctuation
(Punctuation
bufferName.Othernumber0.5100any0.4195complex0.0110string0.0084Buffer0.0082
 Text.Whitespace
&Operator
 Text.Whitespace
0xff00Literal.Number.Hex
)Punctuation
 Text.Whitespace
>>Operator
 Text.Whitespace
8Literal.Number.Float
)Punctuation
;Punctuation
\n    Text.Whitespace
outputName.Otherstring0.9847any0.0078number0.0056complex0.0005boolean0.0004
 Text.Whitespace
+=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9976String0.0010NumberConstructor0.0000string0.0000Window0.0000
.Punctuation
fromCharCodeName.Otherstring0.9906any0.0039number0.0038complex0.0008boolean0.0002
(Punctuation
bufferName.Othernumber0.8138any0.1518string0.0071complex0.0051Buffer0.0040
 Text.Whitespace
&Operator
 Text.Whitespace
0xffLiteral.Number.Hex
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
// "Return output."Comment.Single
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
outputName.Otherstring0.9306any0.0494number0.0080void0.0033complex0.0010
;Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
Text
/**\n * A lookup table for atob(), which converts an ASCII character to the\n * corresponding six-bit number.\n */Comment.Multiline
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
keystrName.Otherstring0.5793RegExp0.3811any0.0193string[]0.0039boolean0.0028
 Text.Whitespace
=Operator
\n  Text.Whitespace
"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/"Literal.String.Double
;Punctuation
\n\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
atobLookupName.Otherstring0.3911number0.2492boolean0.2109void0.0639any0.0638
(Punctuation
chrName.Otherstring0.8875any0.0857number0.0073boolean0.0045Function0.0009
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
indexName.Othernumber0.9688any0.0264string0.0029boolean0.0008Date0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
keystrName.Otherstring0.7887string[]0.0623RegExp0.0486any0.0485any[]0.0098
.Punctuation
indexOfName.Othernumber0.9604any0.0316string0.0034void0.0025complex0.0006
(Punctuation
chrName.Otherstring0.7189any0.2436number0.0162boolean0.0042void0.0024
)Punctuation
;Punctuation
\n  Text.Whitespace
// Throw exception if character is not in the lookup string; should not be hit in testsComment.Single
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
indexName.Othernumber0.9790any0.0178string0.0015boolean0.0007void0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
0Literal.Number.Float
 Text.Whitespace
?Operator
 Text.Whitespace
undefinedName.Other
 Text.Whitespace
:Operator
 Text.Whitespace
indexKeyword.Typenumber0.9301any0.0615string0.0037boolean0.0005Date0.0003
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
moduleKeyword.Reserved
.exportsName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
atobName.Otherstring0.9863any0.0075number0.0044void0.0002boolean0.0001
;Punctuation
\nText.Whitespace
