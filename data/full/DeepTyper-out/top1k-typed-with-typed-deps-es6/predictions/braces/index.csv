'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
importKeyword
 Text.Whitespace
stringifyName.Otherstring0.7746complex0.1339any0.0598void0.0076string[]0.0066
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./lib/stringify'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
compileName.Otherstring0.5658any0.1307complex0.0394number0.0373Promise<any>0.0226
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./lib/compile'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
expandName.Otherstring[]0.3998complex0.1494boolean0.0585any0.0547void0.0354
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./lib/expand'Literal.String.Single
;Punctuation
\nText.Whitespace
importKeyword
 Text.Whitespace
parseName.Otherany0.2248complex0.0541T[]0.0265void0.0252T0.0156
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./lib/parse'Literal.String.Single
;Punctuation
\n\nText.Whitespace
/**\n * Expand the given pattern or create a regex-compatible string.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\n * ```\n * @param {String} `str`\n * @param {Object} `options`\n * @return {String}\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
bracesName.Otherany0.3202complex0.0272any[]0.0111T[]0.0089Promise<any>0.0067
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.5873string0.3184number0.0177complex0.0074any[]0.0067
,Punctuation
 Text.Whitespace
optionsName.Other{}0.2097any0.1867Options0.0202T0.0150complex0.0096
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
outputName.Otherany[]0.9143any0.0321T[]0.0064{}0.0043string[]0.0035
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
ArrayName.BuiltinArrayConstructor0.9997ObjectConstructor0.0000any0.0000any[]0.0000Math0.0000
.Punctuation
isArrayName.Othercomplex0.9963any[]0.0014any0.0009boolean0.0002{}0.0002
(Punctuation
inputName.Otherany0.7278any[]0.1294complex0.0946string0.0129{}0.0049
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
patternName.Otherstring0.4877any0.3060complex0.0273any[]0.0204RegExp0.0119
 Text.Whitespace
ofKeyword
 Text.Whitespace
inputName.Otherany0.6098any[]0.2324string0.0640complex0.0327string[]0.0060
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
resultName.Otherany0.6785any[]0.2260complex0.0117{}0.0032string0.0017
 Text.Whitespace
=Operator
 Text.Whitespace
bracesName.Otherany0.9192complex0.0193any[]0.0166{}0.0016string0.0005
.Punctuation
createName.Otherany0.7321complex0.1049any[]0.0615{}0.0084T0.0055
(Punctuation
patternName.Otherstring0.5785any0.3315complex0.0292any[]0.0185{}0.0081
,Punctuation
 Text.Whitespace
optionsName.Otherany0.3326complex0.1143any[]0.1025{}0.0842Options0.0110
)Punctuation
;Punctuation
\n      Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
ArrayName.BuiltinArrayConstructor0.9997ObjectConstructor0.0000any0.0000Math0.0000complex0.0000
.Punctuation
isArrayName.Othercomplex0.9964any[]0.0013any0.0008boolean0.0003{}0.0002
(Punctuation
resultName.Otherany[]0.5088any0.3954complex0.0379{}0.0076Object0.0035
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
outputName.Otherany[]0.9548any0.0124string[]0.0039Function[]0.0018T[]0.0014
.Punctuation
pushName.Othernumber0.8890any0.0956complex0.0033void0.0033any[]0.0022
(Punctuation
...Punctuation
resultName.Otherany[]0.8850any0.0836{}0.0067string[]0.0066complex0.0043
)Punctuation
;Punctuation
\n      Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
outputName.Otherany[]0.9460any0.0204string[]0.0040Function[]0.0023T[]0.0015
.Punctuation
pushName.Othernumber0.8733any0.1159void0.0029string0.0015any[]0.0014
(Punctuation
resultName.Otherany0.5114any[]0.4262{}0.0139string0.0063string[]0.0045
)Punctuation
;Punctuation
\n      Text.Whitespace
}Punctuation
\n    Text.Whitespace
}Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
outputName.Otherany[]0.9150any0.0295string[]0.0031T[]0.0028{}0.0023
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
.Punctuation
concatName.Othercomplex0.9029any0.0837any[]0.0096string0.0007void0.0003
(Punctuation
bracesName.Otherany0.7721complex0.0364any[]0.0178Set<any>0.0016{}0.0015
.Punctuation
createName.Otherany0.6456complex0.1552any[]0.0597{}0.0137void0.0092
(Punctuation
inputName.Otherany0.7689any[]0.1149string0.0399complex0.0368{}0.0079
,Punctuation
 Text.Whitespace
optionsName.Otherany0.3092any[]0.1519complex0.0433{}0.0398Options0.0232
)Punctuation
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
optionsName.Otherany0.3310complex0.1085any[]0.0871{}0.0329Options0.0135
 Text.Whitespace
&&Operator
 Text.Whitespace
optionsName.Otherany0.2469complex0.0912any[]0.0498Options0.0264{}0.0196
.Punctuation
expandName.Otherboolean0.6251any0.3071complex0.0353any[]0.0060void0.0038
 Text.Whitespace
===Operator
 Text.Whitespace
trueKeyword.Constant
 Text.Whitespace
&&Operator
 Text.Whitespace
optionsName.Otherany0.2273complex0.0556any[]0.0552Options0.0278{}0.0192
.Punctuation
nodupesName.Otherany0.4357boolean0.4132complex0.0874any[]0.0114{}0.0069
 Text.Whitespace
===Operator
 Text.Whitespace
trueKeyword.Constant
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
outputName.Otherany[]0.7563any0.0867Set<any>0.0106{}0.0085Function[]0.0069
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
...Punctuation
newOperator.Wordany0.6605Set<any>0.0758any[]0.0449SetConstructor0.0193{}0.0174
 Text.Whitespace
SetName.BuiltinSetConstructor0.9689any0.0081Set<any>0.0071number0.0004Document0.0003
(Punctuation
outputName.Otherany[]0.5023any0.2214{}0.0253complex0.0068string[]0.0041
)Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
outputName.Otherany[]0.6933any0.1642{}0.0190complex0.0068string[]0.0028
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Parse the given `str` with the given `options`.\n *\n * ```js\n * // braces.parse(pattern, [, options]);\n * const ast = braces.parse('a/{b,c}/d');\n * console.log(ast);\n * ```\n * @param {String} pattern Brace pattern to parse\n * @param {Object} options\n * @return {Object} Returns an AST\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
bracesName.Otherany0.6580complex0.0178Set<any>0.0062any[]0.0057this0.0048
.Punctuation
parseName.Otherany0.7410complex0.0265number0.0162any[]0.0114{}0.0110
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.7190string0.2024any[]0.0215number0.0164complex0.0131
,Punctuation
 Text.Whitespace
optionsName.Other{}0.3988any0.2489complex0.0343any[]0.0283T0.0097
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
parseName.Otherany0.5307complex0.1273{}0.0335void0.0301T0.0269
(Punctuation
inputName.Otherany0.5914string0.3285complex0.0407any[]0.0144number0.0076
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4767{}0.0622complex0.0566any[]0.0511number0.0109
)Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Creates a braces string from an AST, or an AST node.\n *\n * ```js\n * const braces = require('braces');\n * let ast = braces.parse('foo/{a,b}/bar');\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
bracesName.Otherany0.8291complex0.0548{}0.0027any[]0.0025this0.0015
.Punctuation
stringifyName.Otherany0.5684complex0.2751string0.1350any[]0.0034number0.0018
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.8707string0.0573complex0.0192any[]0.0121{}0.0082
,Punctuation
 Text.Whitespace
optionsName.Otherany0.3550{}0.2057complex0.0286any[]0.0195Options0.0082
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
inputName.Otherany0.6361complex0.2161string0.1245any[]0.0064{}0.0044
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
stringifyName.Othercomplex0.5737string0.2904any0.1238any[]0.0021boolean0.0017
(Punctuation
bracesName.Otherany0.8519complex0.0153this0.0018{}0.0017any[]0.0014
.Punctuation
parseName.Otherany0.7624complex0.0790{}0.0070any[]0.0062number0.0060
(Punctuation
inputName.Otherstring0.6957any0.2343complex0.0311number0.0120any[]0.0081
,Punctuation
 Text.Whitespace
optionsName.Otherany0.3815{}0.0737complex0.0569any[]0.0392string0.0191
)Punctuation
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4533{}0.0663complex0.0548any[]0.0442string0.0079
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
stringifyName.Otherstring0.5716complex0.2404any0.1675any[]0.0029boolean0.0027
(Punctuation
inputName.Otherany0.7932string0.0946complex0.0458any[]0.0275{}0.0061
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4091{}0.0711any[]0.0399complex0.0389Options0.0095
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Compiles a brace pattern into a regex-compatible, optimized string.\n * This method is called by the main [braces](#braces) function by default.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.compile('a/{b,c}/d'));\n * //=> ['a/(b|c)/d']\n * ```\n * @param {String} `input` Brace pattern or AST.\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
bracesName.Otherany0.6258complex0.0594any[]0.0068{}0.0047Set<any>0.0038
.Punctuation
compileName.Otherany0.9476string0.0168number0.0077complex0.0053Promise<any>0.0050
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.7771string0.1476number0.0157complex0.0150any[]0.0148
,Punctuation
 Text.Whitespace
optionsName.Other{}0.3525any0.1643complex0.0337any[]0.0199ConnectionOptions0.0095
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
inputName.Otherany0.7006complex0.2074string0.0608any[]0.0080{}0.0071
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
inputName.Otherany0.9570complex0.0146any[]0.0104string0.0045{}0.0015
 Text.Whitespace
=Operator
 Text.Whitespace
bracesName.Otherany0.8959complex0.0281any[]0.0036{}0.0023T0.0009
.Punctuation
parseName.Otherany0.7554complex0.0802any[]0.0102{}0.0080number0.0065
(Punctuation
inputName.Otherstring0.5922any0.3310complex0.0408number0.0114any[]0.0087
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4284{}0.1236complex0.0837any[]0.0391string0.0139
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
compileName.Otherstring0.4355any0.3642complex0.0401Promise<any>0.0254number0.0239
(Punctuation
inputName.Otherany0.7197string0.1720complex0.0454any[]0.0277number0.0083
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4399{}0.0650complex0.0579any[]0.0558number0.0142
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Expands a brace pattern into an array. This method is called by the\n * main [braces](#braces) function when `options.expand` is true. Before\n * using this method it's recommended that you read the [performance notes](#performance))\n * and advantages of using [.compile](#compile) instead.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.expand('a/{b,c}/d'));\n * //=> ['a/b/d', 'a/c/d'];\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
bracesName.Otherany0.6611complex0.0355{}0.0047any[]0.0039Set<any>0.0029
.Punctuation
expandName.Otherany0.8622complex0.0912boolean0.0093void0.0062any[]0.0048
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.8064string0.1009any[]0.0229complex0.0214number0.0170
,Punctuation
 Text.Whitespace
optionsName.Other{}0.3333any0.1725complex0.0359any[]0.0292ConnectionOptions0.0099
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
typeofOperator.Word
 Text.Whitespace
inputName.Otherany0.6799complex0.2055string0.0736any[]0.0105{}0.0089
 Text.Whitespace
===Operator
 Text.Whitespace
'string'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
inputName.Otherany0.9309any[]0.0210complex0.0210string0.0040{}0.0023
 Text.Whitespace
=Operator
 Text.Whitespace
bracesName.Otherany0.8454complex0.0357any[]0.0054{}0.0030T0.0015
.Punctuation
parseName.Otherany0.5964complex0.0884any[]0.0205{}0.0123number0.0122
(Punctuation
inputName.Otherstring0.5470any0.3545complex0.0440any[]0.0183number0.0134
,Punctuation
 Text.Whitespace
optionsName.Otherany0.4438{}0.0782complex0.0684any[]0.0585number0.0145
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
letKeyword.Declaration
 Text.Whitespace
resultName.Otherany0.5839any[]0.2858complex0.0301string0.0216boolean0.0157
 Text.Whitespace
=Operator
 Text.Whitespace
expandName.Othercomplex0.5240any0.1794any[]0.0957boolean0.0516string[]0.0266
(Punctuation
inputName.Otherany0.6718string0.1431complex0.0669any[]0.0635number0.0067
,Punctuation
 Text.Whitespace
optionsName.Otherany0.1187complex0.0594any[]0.0575{}0.0500Options0.0186
)Punctuation
;Punctuation
\n\n  Text.Whitespace
// filter out empty strings if specifiedComment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
optionsName.Othercomplex0.1034any0.0516Options0.0294any[]0.0240{}0.0211
.Punctuation
noemptyName.Otherboolean0.4283complex0.3142any0.1890{}0.0086any[]0.0078
 Text.Whitespace
===Operator
 Text.Whitespace
trueKeyword.Constant
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
resultName.Otherany[]0.5030any0.3501complex0.0248{}0.0167boolean0.0060
 Text.Whitespace
=Operator
 Text.Whitespace
resultName.Otherany[]0.5213any0.3209complex0.0371{}0.0075string[]0.0066
.Punctuation
filterName.Othercomplex0.9152any0.0571v...0.0092boolean0.0025valu...0.0014
(Punctuation
BooleanName.BuiltinBooleanConstructor0.9342boolean0.0078Boolean0.0054false0.0041any0.0016
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
// filter out duplicates if specifiedComment.Single
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
optionsName.Othercomplex0.0643Options0.0354any0.0294ConnectionOptions0.0193{}0.0133
.Punctuation
nodupesName.Otherboolean0.6264complex0.1749any0.1334any[]0.0051{}0.0040
 Text.Whitespace
===Operator
 Text.Whitespace
trueKeyword.Constant
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
resultName.Otherany[]0.7124any0.0965Set<any>0.0340boolean0.0096complex0.0092
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
...Punctuation
newOperator.Wordany0.5080Set<any>0.1326SetConstructor0.0423any[]0.0399Set<string>0.0273
 Text.Whitespace
SetName.BuiltinSetConstructor0.9782Set<any>0.0061any0.0037number0.0006Set<string>0.0003
(Punctuation
resultName.Otherany0.4381any[]0.2009complex0.0451{}0.0378string0.0224
)Punctuation
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
resultName.Otherany0.3834any[]0.3568complex0.0901{}0.0495boolean0.0133
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Processes a brace pattern and returns either an expanded array\n * (if `options.expand` is true), a highly optimized regex-compatible string.\n * This method is called by the main [braces](#braces) function.\n *\n * ```js\n * const braces = require('braces');\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\n * ```\n * @param {String} `pattern` Brace pattern\n * @param {Object} `options`\n * @return {Array} Returns an array of expanded values.\n * @api public\n */Comment.Multiline
\n\nText.Whitespace
bracesName.Otherany0.7144complex0.0450any[]0.0059{}0.0039Set<any>0.0031
.Punctuation
createName.Otherany0.8033complex0.0365void0.0211any[]0.0138{}0.0094
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
inputName.Otherany0.7259string0.1204any[]0.0392complex0.0326number0.0209
,Punctuation
 Text.Whitespace
optionsName.Other{}0.3332any0.0928any[]0.0292complex0.0215Options0.0169
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
inputName.Otherstring0.5733any0.3618complex0.0390number0.0081any[]0.0036
 Text.Whitespace
===Operator
 Text.Whitespace
''Literal.String.Single
 Text.Whitespace
||Operator
 Text.Whitespace
inputName.Otherstring0.4199any0.4011any[]0.0789complex0.0398number0.0226
.Punctuation
lengthName.Othernumber0.9479any0.0484string0.0016complex0.0012boolean0.0003
 Text.Whitespace
<Operator
 Text.Whitespace
3Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
[Punctuation
inputName.Otherstring0.7197any0.1676complex0.0552number0.0343any[]0.0026
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n\n Text.Whitespace
returnKeyword
 Text.Whitespace
optionsName.Otherany0.1534complex0.1420Options0.0627{}0.0176ConnectionOptions0.0132
.Punctuation
expandName.Otherboolean0.5870any0.3189complex0.0661string0.0068number0.0034
 Text.Whitespace
!==Operator
 Text.Whitespace
trueKeyword.Constant
\n    Text.Whitespace
?Operator
 Text.Whitespace
bracesName.Otherany0.5839complex0.1554{}0.0036any[]0.0027number[][]0.0013
.Punctuation
compileName.Otherany0.7856string0.1175complex0.0218boolean0.0207number0.0160
(Punctuation
inputName.Otherany0.5411string0.3004number0.0476complex0.0396any[]0.0282
,Punctuation
 Text.Whitespace
optionsName.Otherany0.0924{}0.0496Options0.0455complex0.0331ConnectionOptions0.0191
)Punctuation
\n    Text.Whitespace
:Operator
 Text.Whitespace
bracesName.Otherany0.8170complex0.0638{}0.0029any[]0.0027number[][]0.0014
.Punctuation
expandName.Otherany0.5717complex0.1854boolean0.0575void0.0260any[]0.0189
(Punctuation
inputName.Otherany0.5566string0.2341any[]0.0676complex0.0554number0.0269
,Punctuation
 Text.Whitespace
optionsName.Otherany0.3006{}0.1014complex0.0333any[]0.0220Options0.0213
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Expose "braces"\n */Comment.Multiline
\n\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
bracesName.Otherany0.6184complex0.0724void0.0237number0.0136Function0.0102
;Punctuation
\nText.Whitespace
