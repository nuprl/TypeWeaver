importKeyword
 Text.Whitespace
eachOfName.Otherany0.1378void0.0718complex0.0448boolean0.0261Promise<void>0.0207
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./eachOf.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
onceName.Otherany0.2919void0.1199complex0.0478T[]0.0186boolean0.0172
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/once.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
wrapAsyncName.Othervoid0.2767any0.1255complex0.0474boolean0.0321Promise<void>0.0224
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/wrapAsync.js'Literal.String.Single
\nText.Whitespace
importKeyword
 Text.Whitespace
{Punctuation
 Text.Whitespace
promiseCallbackName.Otherany0.2335void0.1543complex0.0725boolean0.0338number0.0236
,Punctuation
 Text.Whitespace
PROMISE_SYMBOLName.Otherany0.2696void0.1757complex0.1143boolean0.0582string0.0365
 Text.Whitespace
}Punctuation
 Text.Whitespace
fromKeyword.Reserved
 Text.Whitespace
'./internal/promiseCallback.js'Literal.String.Single
\n\nText.Whitespace
Text
/**\n * A relative of `reduce`.  Takes an Object or Array, and iterates over each\n * element in parallel, each step potentially mutating an `accumulator` value.\n * The type of the accumulator defaults to the type of collection passed in.\n *\n * @name transform\n * @static\n * @memberOf module:Collections\n * @method\n * @category Collection\n * @param {Array|Iterable|AsyncIterable|Object} coll - A collection to iterate over.\n * @param {*} [accumulator] - The initial state of the transform.  If omitted,\n * it will default to an empty Object or Array, depending on the type of `coll`\n * @param {AsyncFunction} iteratee - A function applied to each item in the\n * collection that potentially modifies the accumulator.\n * Invoked with (accumulator, item, key, callback).\n * @param {Function} [callback] - A callback which is called after all the\n * `iteratee` functions have finished. Result is the transformed accumulator.\n * Invoked with (err, result).\n * @returns {Promise} a promise, if no callback provided\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileList = ['file1.txt','file2.txt','file3.txt'];\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileList, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileList, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * (async () => {\n *     try {\n *         let result = await async.transform(fileList, transformFileSize);\n *         console.log(result);\n *         // [ '1000 Bytes', '1.95 KB', '2.93 KB' ]\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * })();\n *\n * @example\n *\n * // file1.txt is a file that is 1000 bytes in size\n * // file2.txt is a file that is 2000 bytes in size\n * // file3.txt is a file that is 3000 bytes in size\n *\n * // helper function that returns human-readable size format from bytes\n * function formatBytes(bytes, decimals = 2) {\n *   // implementation not included for brevity\n *   return humanReadbleFilesize;\n * }\n *\n * const fileMap = { f1: 'file1.txt', f2: 'file2.txt', f3: 'file3.txt' };\n *\n * // asynchronous function that returns the file size, transformed to human-readable format\n * // e.g. 1024 bytes = 1KB, 1234 bytes = 1.21 KB, 1048576 bytes = 1MB, etc.\n * function transformFileSize(acc, value, key, callback) {\n *     fs.stat(value, function(err, stat) {\n *         if (err) {\n *             return callback(err);\n *         }\n *         acc[key] = formatBytes(stat.size);\n *         callback(null);\n *     });\n * }\n *\n * // Using callbacks\n * async.transform(fileMap, transformFileSize, function(err, result) {\n *     if(err) {\n *         console.log(err);\n *     } else {\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n * });\n *\n * // Using Promises\n * async.transform(fileMap, transformFileSize)\n * .then(result => {\n *     console.log(result);\n *     // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n * }).catch(err => {\n *     console.log(err);\n * });\n *\n * // Using async/await\n * async () => {\n *     try {\n *         let result = await async.transform(fileMap, transformFileSize);\n *         console.log(result);\n *         // { f1: '1000 Bytes', f2: '1.95 KB', f3: '2.93 KB' }\n *     }\n *     catch (err) {\n *         console.log(err);\n *     }\n * }\n *\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
defaultKeyword
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
transformName.Othervoid0.5023any0.3309string0.0319boolean0.0284complex0.0186
 Text.Whitespace
(Punctuation
collName.Otherany0.6873any[]0.0575T[]0.0140string0.0076Object0.0068
,Punctuation
 Text.Whitespace
accumulatorName.Otherany0.9350string0.0185complex0.0025any[]0.0024number0.0023
,Punctuation
 Text.Whitespace
iterateeName.Otherany0.9191string0.0114number0.0092Function0.0023any[]0.0020
,Punctuation
 Text.Whitespace
callbackName.Otherany0.7621Function0.0800number0.0096boolean0.0060Callback0.0043
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
argumentsName.OtherIArguments0.9883any[]0.0048any0.0007string[]0.0004number[]0.0001
.Punctuation
lengthName.Othernumber0.9385any0.0588string0.0014boolean0.0004complex0.0003
 Text.Whitespace
<=Operator
 Text.Whitespace
3Literal.Number.Float
 Text.Whitespace
&&Operator
 Text.Whitespace
typeofOperator.Word
 Text.Whitespace
accumulatorName.Otherany0.9610complex0.0101string0.0082boolean0.0028{}0.0019
 Text.Whitespace
===Operator
 Text.Whitespace
'function'Literal.String.Single
)Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
callbackName.Otherany0.7561Function0.0410boolean0.0167{}0.0073void0.0073
 Text.Whitespace
=Operator
 Text.Whitespace
iterateeName.Otherany0.9201string0.0117any[]0.0052number0.0050complex0.0029
;Punctuation
\n        Text.Whitespace
iterateeName.Otherany0.7342string0.0082any[]0.0060{}0.0044number0.0035
 Text.Whitespace
=Operator
 Text.Whitespace
accumulatorName.Otherany0.8835complex0.0166string0.0112any[]0.0055{}0.0046
;Punctuation
\n        Text.Whitespace
accumulatorName.Otherany0.9267complex0.0096string0.0057any[]0.0045{}0.0042
 Text.Whitespace
=Operator
 Text.Whitespace
ArrayName.BuiltinArrayConstructor0.9993ObjectConstructor0.0001any0.0000Math0.0000any[]0.0000
.Punctuation
isArrayName.Othercomplex0.9816any0.0059any[]0.0050boolean0.0016Object0.0009
(Punctuation
collName.Otherany0.7839any[]0.1082{}0.0220Object0.0098complex0.0090
)Punctuation
 Text.Whitespace
?Operator
 Text.Whitespace
[Punctuation
]Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
callbackName.Otherany0.8427Function0.0171number0.0127void0.0122any[]0.0105
 Text.Whitespace
=Operator
 Text.Whitespace
onceName.Otherany0.6530any[]0.0239number0.0083boolean0.0065T0.0064
(Punctuation
callbackName.Otherany0.7583void0.0237Function0.0198any[]0.0125{}0.0116
 Text.Whitespace
||Operator
 Text.Whitespace
promiseCallbackName.Otherany0.7264void0.0368boolean0.0337any[]0.0325complex0.0163
(Punctuation
)Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
_iterateeName.Otherany0.6063any[]0.1704void0.0443complex0.0299boolean0.0252
 Text.Whitespace
=Operator
 Text.Whitespace
wrapAsyncName.Otherany0.5090any[]0.1584complex0.0617void0.0410number0.0195
(Punctuation
iterateeName.Otherany0.8751any[]0.0182string0.0063number0.0056complex0.0053
)Punctuation
;Punctuation
\n\n    Text.Whitespace
eachOfName.Othervoid0.8284any0.1073complex0.0173any[]0.0063boolean0.0055
(Punctuation
collName.Otherany0.7442any[]0.1317{}0.0075T[]0.0074Object0.0057
,Punctuation
 Text.Whitespace
(Punctuation
vName.Otherany0.8990number0.0259string0.0081any[]0.0073boolean0.0069
,Punctuation
 Text.Whitespace
kName.Otherany0.8955string0.0662number0.0272any[]0.0013boolean0.0011
,Punctuation
 Text.Whitespace
cbName.Otherany0.7238Function0.1571number0.0435void0.0263boolean0.0073
)Punctuation
 Text.Whitespace
=>Punctuation
 Text.Whitespace
{Punctuation
\n        Text.Whitespace
_iterateeName.Otherany0.4529void0.4334complex0.0366Function0.0148boolean0.0072
(Punctuation
accumulatorName.Otherany0.9161string0.0172complex0.0098Error0.0056{}0.0048
,Punctuation
 Text.Whitespace
vName.Otherany0.9140number0.0267string0.0112any[]0.0063boolean0.0062
,Punctuation
 Text.Whitespace
kName.Otherany0.8965string0.0599number0.0279void0.0031Function0.0023
,Punctuation
 Text.Whitespace
cbName.Otherany0.7712Function0.1097void0.0590number0.0294boolean0.0062
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
,Punctuation
 Text.Whitespace
errName.Otherany0.8601Error0.0804void0.0096Function0.0045string0.0044
 Text.Whitespace
=>Punctuation
 Text.Whitespace
callbackName.Otherany0.6435void0.0980Function0.0946boolean0.0120Error0.0069
(Punctuation
errName.Otherany0.6613Error0.2764string0.0063{}0.0049never0.0017
,Punctuation
 Text.Whitespace
accumulatorName.Otherany0.8724string0.0142Error0.0127complex0.0110{}0.0089
)Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
callbackName.Otherany0.4950Function0.0244{}0.0209any[]0.0157void0.0150
[Punctuation
PROMISE_SYMBOLName.Otherany0.6033string0.0760number0.0594any[]0.0161void0.0126
]Punctuation
\nText.Whitespace
}Punctuation
\nText.Whitespace
