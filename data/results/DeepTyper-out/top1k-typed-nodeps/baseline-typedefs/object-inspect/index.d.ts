declare var hasMap: boolean;
declare var mapSizeDescriptor: boolean;
declare var mapSize: boolean;
declare var mapForEach: boolean;
declare var hasSet: boolean;
declare var setSizeDescriptor: boolean;
declare var setSize: boolean;
declare var setForEach: boolean;
declare var hasWeakMap: boolean;
declare var weakMapHas: any;
declare var hasWeakSet: any;
declare var weakSetHas: any;
declare var hasWeakRef: boolean;
declare var weakRefDeref: any;
declare var booleanValueOf: boolean;
declare var objectToString: string;
declare var functionToString: string;
declare var $match: {
    (regexp: string | RegExp): RegExpMatchArray;
    (matcher: {
        [Symbol.match](string: string): RegExpMatchArray;
    }): RegExpMatchArray;
};
declare var $slice: (start?: number, end?: number) => string;
declare var $replace: {
    (searchValue: string | RegExp, replaceValue: string): string;
    (searchValue: string | RegExp, replacer: (substring: string, ...args: any[]) => string): string;
    (searchValue: {
        [Symbol.replace](string: string, replaceValue: string): string;
    }, replaceValue: string): string;
    (searchValue: {
        [Symbol.replace](string: string, replacer: (substring: string, ...args: any[]) => string): string;
    }, replacer: (substring: string, ...args: any[]) => string): string;
};
declare var $toUpperCase: () => string;
declare var $toLowerCase: () => string;
declare var $test: (string: string) => boolean;
declare var $concat: {
    (...items: ConcatArray<any>[]): any[];
    (...items: any[]): any[];
};
declare var $join: (separator?: string) => string;
declare var $arrSlice: (start?: number, end?: number) => any[];
declare var $floor: (x: number) => number;
declare var bigIntValueOf: any;
declare var gOPS: boolean;
declare var symToString: boolean;
declare var hasShammedSymbols: boolean;
declare var toStringTag: boolean;
declare var isEnumerable: any;
declare var gPO: boolean;
declare function addNumericSeparator(num: number, str: string): any;
declare var utilInspect: any;
declare var inspectCustom: any;
declare var inspectSymbol: any;
declare function wrapQuotes(s: string, defaultStyle: string, opts: any): string;
declare function quote(s: string): any;
declare function isArray(obj: any): boolean;
declare function isDate(obj: any): boolean;
declare function isRegExp(obj: any): boolean;
declare function isError(obj: any): boolean;
declare function isString(obj: any): any;
declare function isNumber(obj: any): boolean;
declare function isBoolean(obj: any): boolean;
declare function isSymbol(obj: any): boolean;
declare function isBigInt(obj: any): boolean;
declare var hasOwn: boolean;
declare function has(obj: any, key: string): boolean;
declare function toStr(obj: any): any;
declare function nameOf(f: any): any;
declare function indexOf(xs: any, x: any): number;
declare function isMap(x: any): boolean;
declare function isWeakMap(x: any): boolean;
declare function isWeakRef(x: any): boolean;
declare function isSet(x: any): boolean;
declare function isWeakSet(x: any): boolean;
declare function isElement(x: any): boolean;
declare function inspectString(str: string, opts: any): string;
declare function lowbyte(c: string): string;
declare function markBoxed(str: string): string;
declare function weakCollectionOf(type: any): string;
declare function collectionOf(type: any, size: number, entries: any, indent: number): string;
declare function singleLineValues(xs: any): boolean;
declare function getIndent(opts: any, depth: number): string;
declare function indentedJoin(xs: any, indent: number): string;
declare function arrObjKeys(obj: any, inspect: string): any;
