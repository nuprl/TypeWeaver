'use strict'Literal.String.Single
;Punctuation
\n\nText.Whitespace
/** Highest positive signed 32-bit float value */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
maxIntName.Othernumber0.9960any0.0019string0.0011boolean0.0002Date0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
2147483647Literal.Number.Float
;Punctuation
 Text.Whitespace
// aka. 0x7FFFFFFF or 2^31-1Comment.Single
\n\nText.Whitespace
/** Bootstring parameters */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
baseName.Othernumber0.9831string0.0068any0.0048Date0.0012number[]0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
36Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
tMinName.Othernumber0.9967any0.0015string0.0010boolean0.0002number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
tMaxName.Othernumber0.9968any0.0014string0.0009boolean0.0002number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
26Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
skewName.Othernumber0.9835number[]0.0060any0.0060string0.0013Date0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
38Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
dampName.Othernumber0.9954any0.0027string0.0011boolean0.0002number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
700Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
initialBiasName.Othernumber0.9961any0.0020string0.0010boolean0.0002Date0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
72Literal.Number.Float
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
initialNName.Othernumber0.9962any0.0018string0.0011boolean0.0004Date0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
128Literal.Number.Float
;Punctuation
 Text.Whitespace
// 0x80Comment.Single
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
delimiterName.Otherstring0.9664any0.0250number0.0057boolean0.0012complex0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
'-'Literal.String.Single
;Punctuation
 Text.Whitespace
// '\x2D'Comment.Single
\n\nText.Whitespace
/** Regular expressions */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
regexPunycodeName.Otherstring0.7077RegExp0.2485number0.0226any0.0112boolean0.0041
 Text.Whitespace
=Operator
 Text.Whitespace
/^xn--/Literal.String.Regex
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
regexNonASCIIName.Otherstring0.6068RegExp0.3618number0.0141any0.0088boolean0.0030
 Text.Whitespace
=Operator
 Text.Whitespace
/[^\0-\x7E]/Literal.String.Regex
;Punctuation
 Text.Whitespace
// non-ASCII charsComment.Single
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
regexSeparatorsName.Otherstring0.6286RegExp0.3454number0.0107any0.0070boolean0.0031
 Text.Whitespace
=Operator
 Text.Whitespace
/[\x2E\u3002\uFF0E\uFF61]/gLiteral.String.Regex
;Punctuation
 Text.Whitespace
// RFC 3490 separatorsComment.Single
\n\nText.Whitespace
/** Error messages */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
errorsName.Othercomplex0.8766any0.0671{}0.0025number0.0016any[]0.0014
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
'overflow'Literal.String.Single
:Operator
 Text.Whitespace
'Overflow: input needs wider integers to process'Literal.String.Single
,Punctuation
\n\tText.Whitespace
'not-basic'Literal.String.Single
:Operator
 Text.Whitespace
'Illegal input >= 0x80 (not a basic code point)'Literal.String.Single
,Punctuation
\n\tText.Whitespace
'invalid-input'Literal.String.Single
:Operator
 Text.Whitespace
'Invalid input'Literal.String.Single
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/** Convenience shortcuts */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
baseMinusTMinName.Othernumber0.9921any0.0044string0.0019boolean0.0006complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
baseName.Othernumber0.9531any0.0268string0.0112Date0.0020complex0.0020
 Text.Whitespace
-Operator
 Text.Whitespace
tMinName.Othernumber0.9608any0.0240string0.0108boolean0.0009complex0.0008
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
floorName.Othernumber0.9959any0.0018string0.0009boolean0.0009complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
MathName.BuiltinMath0.9997ArrayConstructor0.0000PointerCoordinates0.0000NumberConstructor0.0000ClientRect0.0000
.Punctuation
floorName.Othernumber0.9982any0.0008boolean0.0004string0.0003complex0.0001
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
stringFromCharCodeName.Otherstring0.7455number0.1792any0.0364boolean0.0255string[]0.0019
 Text.Whitespace
=Operator
 Text.Whitespace
StringName.BuiltinStringConstructor0.9980String0.0010NumberConstructor0.0000Repository<Post>0.0000PlatformInformation0.0000
.Punctuation
fromCharCodeName.Otherstring0.9891any0.0062number0.0028complex0.0010boolean0.0001
;Punctuation
\n\nText.Whitespace
/*--------------------------------------------------------------------------*/Comment.Multiline
\n\nText.Whitespace
/**\n * A generic error utility function.\n * @private\n * @param {String} type The error type.\n * @returns {Error} Throws a `RangeError` with the applicable error message.\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
errorName.Othervoid0.6774any0.0587Error0.0477never0.0332complex0.0100
(Punctuation
typeKeyword.Reserved
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
throwKeywordError0.4776any0.3598string0.0526number0.0201never0.0039
 Text.Whitespace
newOperator.WordError0.1363any0.1279string0.0871Node0.0217Type0.0132
 Text.Whitespace
RangeErrorName.ExceptionRangeErrorConstructor0.6738ErrorConstructor0.0088SetConstructor0.0071DocumentFragment0.0014Promise<T>0.0013
(Punctuation
errorsName.Otherany0.6800complex0.2936{}0.0018any[]0.0018void0.0016
[Punctuation
typeKeyword.Reserved
]Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * A generic `Array#map` utility function.\n * @private\n * @param {Array} array The array to iterate over.\n * @param {Function} callback The function that gets called for every array\n * item.\n * @returns {Array} A new array of values returned by the callback function.\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
mapName.Otherany0.4790complex0.0885void0.0872U[]0.0642any[]0.0115
(Punctuation
arrayName.Otherany0.3530any[]0.2920string[]0.0461string0.0244Buffer0.0154
,Punctuation
 Text.Whitespace
fnName.Otherany0.6019Function0.2247string0.1077number0.0146boolean0.0074
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
resultName.Otherany[]0.9180string[]0.0264number[]0.0137any[][]0.0133any0.0079
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
lengthName.Othernumber0.9437any0.0525string0.0026void0.0002complex0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
arrayName.Otherany[]0.6073any0.1693any[][]0.0557number[]0.0293string[]0.0226
.Punctuation
lengthName.Othernumber0.9074any0.0901string0.0014complex0.0003any[]0.0001
;Punctuation
\n\tText.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
lengthName.Othernumber0.9623any0.0362string0.0009complex0.0001boolean0.0001
--Operator
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
resultName.Otherany[]0.6622any0.1711number[]0.0377any[][]0.0259string[]0.0211
[Punctuation
lengthName.Othernumber0.9690any0.0274string0.0029complex0.0002any[]0.0001
]Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
fnName.Otherany0.6093number0.1636Function0.1325string0.0343any[]0.0083
(Punctuation
arrayName.Otherany[]0.6982any0.1682number[]0.0346any[][]0.0277string[]0.0155
[Punctuation
lengthName.Othernumber0.9561any0.0401string0.0030complex0.0002void0.0001
]Punctuation
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
resultName.Otherany[]0.3335any0.2410string0.1833string[]0.0706number[]0.0352
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * A simple `Array#map`-like wrapper to work with domain name strings or email\n * addresses.\n * @private\n * @param {String} domain The domain name or email address.\n * @param {Function} callback The function that gets called for every\n * character.\n * @returns {Array} A new string of characters returned by the callback\n * function.\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
mapDomainName.Otherstring0.6646any0.1414number0.1013void0.0353complex0.0100
(Punctuation
stringKeyword.Type
,Punctuation
 Text.Whitespace
fnName.Otherstring0.5403any0.2450Function0.1338number0.0275boolean0.0190
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
partsName.Otherstring[]0.9926any[]0.0021any0.0018string0.0017number[]0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
splitName.Othercomplex0.9568any0.0380string0.0020string[]0.0012void0.0005
(Punctuation
'@'Literal.String.Single
)Punctuation
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
resultName.Otherstring0.9128string[]0.0381any0.0207RegExp0.0200number0.0014
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
partsName.Otherstring[]0.9935any[]0.0023number[]0.0017string0.0009complex0.0004
.Punctuation
lengthName.Othernumber0.9895any0.0082string0.0017complex0.0003boolean0.0001
 Text.Whitespace
>Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
// In email addresses, only the domain name should be punycoded. LeaveComment.Single
\n\t\tText.Whitespace
// the local part (i.e. everything up to `@`) intact.Comment.Single
\n\t\tText.Whitespace
resultName.Otherstring0.9440any0.0387number0.0079string[]0.0053complex0.0010
 Text.Whitespace
=Operator
 Text.Whitespace
partsName.Otherstring[]0.9825any[]0.0065number[]0.0039complex0.0020any0.0014
[Punctuation
0Literal.Number.Float
]Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
'@'Literal.String.Single
;Punctuation
\n\t\tText.Whitespace
stringKeyword.Type
 Text.Whitespace
=Operator
 Text.Whitespace
partsName.Otherstring[]0.9601any0.0103any[]0.0095complex0.0057number[]0.0055
[Punctuation
1Literal.Number.Float
]Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
// Avoid `split(regex)` for IE8 compatibility. See #17.Comment.Single
\n\tText.Whitespace
stringKeyword.Type
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
replaceName.Othercomplex0.9651any0.0301string0.0025number0.0005void0.0005
(Punctuation
regexSeparatorsName.OtherRegExp0.5467string0.3431any0.0602number0.0291string[]0.0069
,Punctuation
 Text.Whitespace
'\x2E'Literal.String.Single
)Punctuation
;Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
labelsName.Otherstring[]0.7354string0.1924any0.0524any[]0.0080RegExp0.0031
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
splitName.Othercomplex0.9494any0.0458string0.0018string[]0.0011void0.0005
(Punctuation
'.'Literal.String.Single
)Punctuation
;Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
encodedName.Otherstring0.6776any0.2357string[]0.0613any[]0.0074number0.0059
 Text.Whitespace
=Operator
 Text.Whitespace
mapName.OtherU[]0.5142any0.1602complex0.1311string[]0.0449string0.0246
(Punctuation
labelsName.Otherstring0.6303string[]0.2585any0.0800any[]0.0114RegExp0.0073
,Punctuation
 Text.Whitespace
fnName.Otherstring0.7615any0.1639Function0.0285number0.0185boolean0.0055
)Punctuation
.Punctuation
joinName.Otherstring0.9213any0.0704number0.0037complex0.0014string[]0.0010
(Punctuation
'.'Literal.String.Single
)Punctuation
;Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
resultName.Otherstring0.8470any0.1337number0.0122string[]0.0020any[]0.0010
 Text.Whitespace
+Operator
 Text.Whitespace
encodedName.Otherstring0.9347any0.0467number0.0091string[]0.0045boolean0.0014
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Creates an array containing the numeric code points of each Unicode\n * character in the string. While JavaScript uses UCS-2 internally,\n * this function will convert a pair of surrogate halves (each of which\n * UCS-2 exposes as separate characters) into a single code point,\n * matching UTF-16.\n * @see `punycode.ucs2.encode`\n * @see <https://mathiasbynens.be/notes/javascript-encoding>\n * @memberOf punycode.ucs2\n * @name decode\n * @param {String} string The Unicode input string (UCS-2).\n * @returns {Array} The new array of code points.\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
ucs2decodeName.Otherstring0.5966number0.2203any0.1178string[]0.0155boolean0.0153
(Punctuation
stringKeyword.Type
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
outputName.Otherany[]0.9576string[]0.0126number[]0.0076any0.0061any[][]0.0018
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
counterName.Othernumber0.9959any0.0034string0.0004boolean0.0001number[]0.0000
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
lengthName.Othernumber0.9799any0.0169string0.0025boolean0.0001complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
lengthName.Othernumber0.9349any0.0619string0.0024complex0.0003boolean0.0001
;Punctuation
\n\tText.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
counterName.Othernumber0.9899any0.0092string0.0006boolean0.0001void0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
lengthName.Othernumber0.9769any0.0216string0.0011boolean0.0001complex0.0001
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
valueName.Othernumber0.9485any0.0341string0.0158boolean0.0007complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
charCodeAtName.Othernumber0.9702any0.0268string0.0015complex0.0004boolean0.0004
(Punctuation
counterName.Othernumber0.9925any0.0066string0.0005boolean0.0001void0.0000
++Operator
)Punctuation
;Punctuation
\n\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
valueName.Othernumber0.8963any0.0940string0.0080boolean0.0008complex0.0003
 Text.Whitespace
>=Operator
 Text.Whitespace
0xD800Literal.Number.Hex
 Text.Whitespace
&&Operator
 Text.Whitespace
valueName.Othernumber0.9272any0.0638string0.0078boolean0.0006complex0.0001
 Text.Whitespace
<=Operator
 Text.Whitespace
0xDBFFLiteral.Number.Hex
 Text.Whitespace
&&Operator
 Text.Whitespace
counterName.Othernumber0.9904any0.0087string0.0005boolean0.0001complex0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
lengthName.Othernumber0.9768any0.0216string0.0011boolean0.0001complex0.0001
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
// It's a high surrogate, and there is a next character.Comment.Single
\n\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
extraName.Othernumber0.9815any0.0128string0.0045boolean0.0006any[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
stringKeyword.Type
.Punctuation
charCodeAtName.Othernumber0.9671any0.0301string0.0014complex0.0004boolean0.0004
(Punctuation
counterName.Othernumber0.9932any0.0060string0.0005boolean0.0001void0.0000
++Operator
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
(Punctuation
extraName.Othernumber0.9672any0.0280string0.0027boolean0.0004number[]0.0004
 Text.Whitespace
&Operator
 Text.Whitespace
0xFC00Literal.Number.Hex
)Punctuation
 Text.Whitespace
==Operator
 Text.Whitespace
0xDC00Literal.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
 Text.Whitespace
// Low surrogate.Comment.Single
\n\t\t\t\tText.Whitespace
outputName.Otherany[]0.8676string[]0.0605number[]0.0384any0.0138string0.0017
.Punctuation
pushName.Othernumber0.9943any0.0047string0.0004void0.0002boolean0.0002
(Punctuation
(Punctuation
(Punctuation
valueName.Othernumber0.9211any0.0616string0.0157number[]0.0003complex0.0002
 Text.Whitespace
&Operator
 Text.Whitespace
0x3FFLiteral.Number.Hex
)Punctuation
 Text.Whitespace
<<Operator
 Text.Whitespace
10Literal.Number.Float
)Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
(Punctuation
extraName.Othernumber0.9624any0.0319string0.0034complex0.0005any[]0.0004
 Text.Whitespace
&Operator
 Text.Whitespace
0x3FFLiteral.Number.Hex
)Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
0x10000Literal.Number.Hex
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
// It's an unmatched surrogate; only append this code unit, in case theComment.Single
\n\t\t\t\tText.Whitespace
// next code unit is the high surrogate of a surrogate pair.Comment.Single
\n\t\t\t\tText.Whitespace
outputName.Otherany[]0.9117string[]0.0371any0.0192number[]0.0159Function[]0.0012
.Punctuation
pushName.Othernumber0.9880any0.0103string0.0005void0.0004boolean0.0002
(Punctuation
valueName.Othernumber0.6036string0.2245any0.1637complex0.0020any[]0.0011
)Punctuation
;Punctuation
\n\t\t\t\tText.Whitespace
counterName.Othernumber0.9933any0.0060string0.0003void0.0001boolean0.0001
--Operator
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\t\tText.Whitespace
}Punctuation
 Text.Whitespace
elseKeyword
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
outputName.Otherany[]0.8891string[]0.0386any0.0335number[]0.0130{}0.0021
.Punctuation
pushName.Othernumber0.9775any0.0195void0.0012string0.0009boolean0.0002
(Punctuation
valueName.Othernumber0.5210any0.2389string0.2320complex0.0017any[]0.0012
)Punctuation
;Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
outputName.Otherany[]0.8574any0.0414string[]0.0155number[]0.0086{}0.0065
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Creates a string based on an array of numeric code points.\n * @see `punycode.ucs2.decode`\n * @memberOf punycode.ucs2\n * @name encode\n * @param {Array} codePoints The array of numeric code points.\n * @returns {String} The new Unicode string (UCS-2).\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
ucs2encodeName.Otherstring0.4077number0.2999any0.2597boolean0.0126complex0.0022
 Text.Whitespace
=Operator
 Text.Whitespace
arrayName.Otherany0.4027any[]0.3484string[]0.0336string0.0281complex0.0211
 Text.Whitespace
=>Punctuation
 Text.Whitespace
StringName.BuiltinStringConstructor0.9969String0.0014NumberConstructor0.0001RegExp0.0000PropertyDescriptor0.0000
.Punctuation
fromCodePointName.Othernumber0.9139string0.0333complex0.0135boolean0.0090any0.0058
(Punctuation
...Punctuation
arrayName.Otherany[]0.8066number[]0.0593any0.0354string[]0.0262complex0.0106
)Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a basic code point into a digit/integer.\n * @see `digitToBasic()`\n * @private\n * @param {Number} codePoint The basic numeric code point value.\n * @returns {Number} The numeric value of a basic code point (for use in\n * representing integers) in the range `0` to `base - 1`, or `base` if\n * the code point does not represent a value.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
basicToDigitName.Othernumber0.9334boolean0.0224string0.0194any0.0183void0.0019
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
codePointName.Othernumber0.7590any0.2176string0.0083boolean0.0052complex0.0019
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
codePointName.Othernumber0.7449any0.2496string0.0023boolean0.0012complex0.0010
 Text.Whitespace
-Operator
 Text.Whitespace
0x30Literal.Number.Hex
 Text.Whitespace
<Operator
 Text.Whitespace
0x0ALiteral.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
codePointName.Othernumber0.7506any0.2396string0.0062boolean0.0015complex0.0008
 Text.Whitespace
-Operator
 Text.Whitespace
0x16Literal.Number.Hex
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
codePointName.Othernumber0.7641any0.2303string0.0021boolean0.0014complex0.0011
 Text.Whitespace
-Operator
 Text.Whitespace
0x41Literal.Number.Hex
 Text.Whitespace
<Operator
 Text.Whitespace
0x1ALiteral.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
codePointName.Othernumber0.7692any0.2217string0.0052boolean0.0016complex0.0008
 Text.Whitespace
-Operator
 Text.Whitespace
0x41Literal.Number.Hex
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
codePointName.Othernumber0.7637any0.2308string0.0019boolean0.0014complex0.0012
 Text.Whitespace
-Operator
 Text.Whitespace
0x61Literal.Number.Hex
 Text.Whitespace
<Operator
 Text.Whitespace
0x1ALiteral.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
codePointName.Othernumber0.8424any0.1516string0.0027boolean0.0014complex0.0007
 Text.Whitespace
-Operator
 Text.Whitespace
0x61Literal.Number.Hex
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
baseName.Othernumber0.7613any0.1247string0.0753Date0.0078boolean0.0073
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a digit/integer into a basic code point.\n * @see `basicToDigit()`\n * @private\n * @param {Number} digit The numeric value of a basic code point.\n * @returns {Number} The basic code point whose value (when used for\n * representing integers) is `digit`, which needs to be in the range\n * `0` to `base - 1`. If `flag` is non-zero, the uppercase form is\n * used; else, the lowercase form is used. The behavior is undefined\n * if `flag` is non-zero and `digit` has no uppercase form.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
digitToBasicName.Othernumber0.9591any0.0163boolean0.0105string0.0093void0.0017
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
digitName.Othernumber0.7492any0.1393string0.0919Date0.0013boolean0.0008
,Punctuation
 Text.Whitespace
flagName.Othernumber0.7059any0.0917string0.0725boolean0.0506Date0.0067
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
//  0..25 map to ASCII a..z or A..ZComment.Single
\n\tText.Whitespace
// 26..35 map to ASCII 0..9Comment.Single
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
digitName.Othernumber0.9439any0.0399string0.0143void0.0003complex0.0002
 Text.Whitespace
+Operator
 Text.Whitespace
22Literal.Number.Float
 Text.Whitespace
+Operator
 Text.Whitespace
75Literal.Number.Float
 Text.Whitespace
*Operator
 Text.Whitespace
(Punctuation
digitName.Othernumber0.9371any0.0563string0.0052void0.0005complex0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
26Literal.Number.Float
)Punctuation
 Text.Whitespace
-Operator
 Text.Whitespace
(Punctuation
(Punctuation
flagName.Othernumber0.9680any0.0232string0.0059boolean0.0013Date0.0002
 Text.Whitespace
!=Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
<<Operator
 Text.Whitespace
5Literal.Number.Float
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Bias adaptation function as per section 3.4 of RFC 3492.\n * https://tools.ietf.org/html/rfc3492#section-3.4\n * @private\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
adaptName.Othernumber0.8952any0.0737void0.0137string0.0064boolean0.0059
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
deltaName.Othernumber0.7057any0.2538string0.0064void0.0029number[]0.0023
,Punctuation
 Text.Whitespace
numPointsName.Othernumber0.7526any0.1443string0.0803boolean0.0074void0.0023
,Punctuation
 Text.Whitespace
firstTimeName.Otherany0.4939number0.2430boolean0.1896string0.0531void0.0054
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
kName.Othernumber0.9876any0.0102string0.0017boolean0.0001complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\tText.Whitespace
deltaName.Othernumber0.8878any0.1040string0.0046boolean0.0012void0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
firstTimeName.Othernumber0.4869any0.2612boolean0.2213string0.0156void0.0045
 Text.Whitespace
?Operator
 Text.Whitespace
floorName.Othernumber0.9595any0.0372string0.0021boolean0.0006void0.0002
(Punctuation
deltaName.Othernumber0.9468any0.0479string0.0023void0.0003number[]0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
dampName.Othernumber0.9820any0.0136string0.0037boolean0.0002number[]0.0001
)Punctuation
 Text.Whitespace
:Operator
 Text.Whitespace
deltaName.Othernumber0.8526any0.1377string0.0015void0.0010number[]0.0006
 Text.Whitespace
>>Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n\tText.Whitespace
deltaName.Othernumber0.9538any0.0435string0.0016void0.0003boolean0.0002
 Text.Whitespace
+=Operator
 Text.Whitespace
floorName.Othernumber0.9598any0.0377string0.0017boolean0.0002void0.0002
(Punctuation
deltaName.Othernumber0.9401any0.0566string0.0013void0.0006number[]0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
numPointsName.Othernumber0.9763any0.0205string0.0023void0.0002boolean0.0002
)Punctuation
;Punctuation
\n\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
/* no initialization */Comment.Multiline
;Punctuation
 Text.Whitespace
deltaName.Othernumber0.8625any0.1338string0.0011complex0.0007void0.0006
 Text.Whitespace
>Operator
 Text.Whitespace
baseMinusTMinName.Othernumber0.9484any0.0489string0.0015boolean0.0002void0.0002
 Text.Whitespace
*Operator
 Text.Whitespace
tMaxName.Othernumber0.9112any0.0859string0.0013boolean0.0003void0.0002
 Text.Whitespace
>>Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
 Text.Whitespace
kName.Othernumber0.9778any0.0181string0.0031number[]0.0002complex0.0002
 Text.Whitespace
+=Operator
 Text.Whitespace
baseName.Othernumber0.9035any0.0405string0.0360number[]0.0043Date0.0028
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
deltaName.Othernumber0.9833any0.0148string0.0008void0.0004complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
floorName.Othernumber0.9772any0.0208string0.0013void0.0002boolean0.0002
(Punctuation
deltaName.Othernumber0.9391any0.0569string0.0017void0.0005number[]0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
baseMinusTMinName.Othernumber0.9815any0.0147string0.0030number[]0.0002boolean0.0001
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
floorName.Othernumber0.9771any0.0204string0.0014void0.0003boolean0.0002
(Punctuation
kName.Othernumber0.9558any0.0389string0.0048complex0.0001number[]0.0001
 Text.Whitespace
+Operator
 Text.Whitespace
(Punctuation
baseMinusTMinName.Othernumber0.9668any0.0284string0.0044boolean0.0001number[]0.0000
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
*Operator
 Text.Whitespace
deltaName.Othernumber0.9528any0.0448string0.0010void0.0007boolean0.0001
 Text.Whitespace
/Operator
 Text.Whitespace
(Punctuation
deltaName.Othernumber0.9246any0.0727string0.0014void0.0003complex0.0003
 Text.Whitespace
+Operator
 Text.Whitespace
skewName.Othernumber0.9308any0.0487number[]0.0100string0.0049any[]0.0013
)Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a Punycode string of ASCII-only symbols to a string of Unicode\n * symbols.\n * @memberOf punycode\n * @param {String} input The Punycode string of ASCII-only symbols.\n * @returns {String} The resulting string of Unicode symbols.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
decodeName.Otherany0.2977string[]0.2136string0.1472number[]0.1366any[]0.0787
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
inputName.Otherany0.7208string0.1294any[]0.0741number0.0063number[]0.0046
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
// Don't use UCS-2.Comment.Single
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
outputName.Otherany[]0.9586number[]0.0112string[]0.0069any0.0045any[][]0.0011
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
inputLengthName.Othernumber0.9689any0.0256string0.0033boolean0.0007void0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
inputName.Otherany0.5496string0.2143any[]0.1440number0.0289number[]0.0198
.Punctuation
lengthName.Othernumber0.9032any0.0940string0.0016complex0.0003void0.0002
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9950any0.0045string0.0002boolean0.0001complex0.0000
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
nName.Othernumber0.9590any0.0334string0.0066complex0.0002number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
initialNName.Othernumber0.9511any0.0424string0.0049boolean0.0003any[]0.0002
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
biasName.Othernumber0.9575any0.0317string0.0096boolean0.0003complex0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
initialBiasName.Othernumber0.9378any0.0536string0.0066boolean0.0006any[]0.0002
;Punctuation
\n\n\tText.Whitespace
// Handle the basic code points: let `basic` be the number of input codeComment.Single
\n\tText.Whitespace
// points before the last delimiter, or `0` if there is none, then copyComment.Single
\n\tText.Whitespace
// the first basic code points to the output.Comment.Single
\n\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
basicName.Othernumber0.9790any0.0181string0.0006boolean0.0005complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
inputName.Otherany0.4901string0.2950number0.1467any[]0.0229number[]0.0064
.Punctuation
lastIndexOfName.Othernumber0.9700any0.0265string0.0013boolean0.0004void0.0004
(Punctuation
delimiterName.Otherstring0.5734number0.2145any0.2048boolean0.0028void0.0011
)Punctuation
;Punctuation
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
basicName.Othernumber0.9899any0.0077boolean0.0005number[]0.0005string0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
basicName.Othernumber0.9833any0.0135number[]0.0006any[]0.0005string0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
jName.Othernumber0.9953any0.0040string0.0003boolean0.0001void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
 Text.Whitespace
jName.Othernumber0.9883any0.0102string0.0005void0.0004boolean0.0002
 Text.Whitespace
<Operator
 Text.Whitespace
basicName.Othernumber0.9600any0.0339string0.0020number[]0.0011any[]0.0006
;Punctuation
 Text.Whitespace
++Operator
jName.Othernumber0.9919any0.0068string0.0005boolean0.0004void0.0001
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
// if it's not a basic code pointComment.Single
\n\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
inputName.Otherstring0.7641any0.1928number0.0208any[]0.0064string[]0.0057
.Punctuation
charCodeAtName.Othernumber0.9780any0.0202string0.0009boolean0.0003complex0.0002
(Punctuation
jName.Othernumber0.9598any0.0376string0.0019boolean0.0003void0.0001
)Punctuation
 Text.Whitespace
>=Operator
 Text.Whitespace
0x80Literal.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
errorName.Othervoid0.9794any0.0105complex0.0018number0.0010Promise<void>0.0008
(Punctuation
'not-basic'Literal.String.Single
)Punctuation
;Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\t\tText.Whitespace
outputName.Otherany[]0.8672string[]0.0432number[]0.0384any0.0245Function[]0.0012
.Punctuation
pushName.Othernumber0.9874any0.0110string0.0005void0.0004boolean0.0002
(Punctuation
inputName.Otherstring0.6824any0.2822number0.0185any[]0.0061string[]0.0022
.Punctuation
charCodeAtName.Othernumber0.9337any0.0629string0.0023boolean0.0003complex0.0002
(Punctuation
jName.Othernumber0.9524any0.0433string0.0033boolean0.0004void0.0002
)Punctuation
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
// Main decoding loop: start just after the last delimiter if any basic codeComment.Single
\n\tText.Whitespace
// points were copied; start at the beginning otherwise.Comment.Single
\n\n\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
indexName.Othernumber0.9885any0.0096string0.0013boolean0.0003number[]0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
basicName.Othernumber0.9877any0.0107string0.0007number[]0.0002boolean0.0002
 Text.Whitespace
>Operator
 Text.Whitespace
0Literal.Number.Float
 Text.Whitespace
?Operator
 Text.Whitespace
basicName.Othernumber0.9648any0.0280string0.0025number[]0.0011complex0.0005
 Text.Whitespace
+Operator
 Text.Whitespace
1Name.Other
 Text.Whitespace
:Operator
 Text.Whitespace
0Keyword.Type
;Punctuation
 Text.Whitespace
indexName.Othernumber0.9841any0.0146string0.0006boolean0.0002void0.0001
 Text.Whitespace
<Operator
 Text.Whitespace
inputLengthName.Othernumber0.9758any0.0191string0.0037boolean0.0006void0.0001
;Punctuation
 Text.Whitespace
/* no final expression */Comment.Multiline
)Punctuation
 Text.Whitespace
{Punctuation
\n\n\t\tText.Whitespace
// `index` is the index of the next character to be consumed.Comment.Single
\n\t\tText.Whitespace
// Decode a generalized variable-length integer into `delta`,Comment.Single
\n\t\tText.Whitespace
// which gets added to `i`. The overflow checking is easierComment.Single
\n\t\tText.Whitespace
// if we increase `i` as we go, then subtract off its startingComment.Single
\n\t\tText.Whitespace
// value at the end to obtain `delta`.Comment.Single
\n\t\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
oldiName.Othernumber0.9794any0.0160string0.0028boolean0.0012void0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
iName.Othernumber0.9410any0.0566string0.0014boolean0.0004void0.0001
;Punctuation
\n\t\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
wName.Othernumber0.9959any0.0031string0.0007number[]0.0001void0.0000
 Text.Whitespace
=Operator
 Text.Whitespace
1Literal.Number.Float
,Punctuation
 Text.Whitespace
kName.Othernumber0.9096any0.0704string0.0183complex0.0004boolean0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
baseName.Othernumber0.8537any0.0798string0.0278any[]0.0091Date0.0052
;Punctuation
 Text.Whitespace
/* no condition */Comment.Multiline
;Punctuation
 Text.Whitespace
kName.Othernumber0.9669any0.0169string0.0144complex0.0004boolean0.0004
 Text.Whitespace
+=Operator
 Text.Whitespace
baseName.Othernumber0.8164string0.0830any0.0573boolean0.0080any[]0.0059
)Punctuation
 Text.Whitespace
{Punctuation
\n\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
indexName.Othernumber0.9781any0.0200string0.0013boolean0.0003complex0.0001
 Text.Whitespace
>=Operator
 Text.Whitespace
inputLengthName.Othernumber0.9878any0.0075string0.0035boolean0.0006void0.0002
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
errorName.Othervoid0.9631any0.0204complex0.0030number0.0026Promise<void>0.0016
(Punctuation
'invalid-input'Literal.String.Single
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\n\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
digitName.Othernumber0.9162any0.0558string0.0246complex0.0009void0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
basicToDigitName.Othernumber0.9120any0.0455string0.0360complex0.0022boolean0.0011
(Punctuation
inputName.Otherstring0.7718any0.1975number0.0168any[]0.0051string[]0.0018
.Punctuation
charCodeAtName.Othernumber0.9657any0.0314string0.0017boolean0.0003complex0.0003
(Punctuation
indexName.Othernumber0.9722any0.0265string0.0009boolean0.0001complex0.0001
++Operator
)Punctuation
)Punctuation
;Punctuation
\n\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
digitName.Othernumber0.9263any0.0613string0.0104boolean0.0004complex0.0003
 Text.Whitespace
>=Operator
 Text.Whitespace
baseName.Othernumber0.8790any0.0671string0.0233number[]0.0068any[]0.0046
 Text.Whitespace
||Operator
 Text.Whitespace
digitName.Othernumber0.9091any0.0837string0.0061complex0.0004void0.0002
 Text.Whitespace
>Operator
 Text.Whitespace
floorName.Othernumber0.9487any0.0488string0.0013boolean0.0003complex0.0003
(Punctuation
(Punctuation
maxIntName.Othernumber0.9278any0.0679string0.0036boolean0.0002complex0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
iName.Othernumber0.9413any0.0568string0.0014boolean0.0001complex0.0001
)Punctuation
 Text.Whitespace
/Operator
 Text.Whitespace
wName.Othernumber0.9244any0.0696string0.0045void0.0002boolean0.0002
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
errorName.Othervoid0.9670any0.0201complex0.0019number0.0017Promise<void>0.0016
(Punctuation
'overflow'Literal.String.Single
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\n\t\t\tText.Whitespace
iName.Othernumber0.9896any0.0083string0.0015complex0.0001void0.0001
 Text.Whitespace
+=Operator
 Text.Whitespace
digitName.Othernumber0.8799any0.1045string0.0121complex0.0005void0.0005
 Text.Whitespace
*Operator
 Text.Whitespace
wName.Othernumber0.9295any0.0673string0.0020void0.0002boolean0.0001
;Punctuation
\n\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
tName.Othernumber0.8159any0.1562string0.0135boolean0.0102complex0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
kName.Othernumber0.9350any0.0608string0.0032complex0.0004boolean0.0002
 Text.Whitespace
<=Operator
 Text.Whitespace
biasName.Othernumber0.9726any0.0159string0.0089complex0.0009boolean0.0007
 Text.Whitespace
?Operator
 Text.Whitespace
tMinName.Othernumber0.9814any0.0094string0.0074boolean0.0011complex0.0002
 Text.Whitespace
:Operator
 Text.Whitespace
(Punctuation
kName.Othernumber0.9420any0.0535string0.0039complex0.0002boolean0.0001
 Text.Whitespace
>=Operator
 Text.Whitespace
biasName.Othernumber0.9672any0.0260string0.0058complex0.0004number[]0.0001
 Text.Whitespace
+Operator
 Text.Whitespace
tMaxName.Othernumber0.9330any0.0483string0.0122boolean0.0049void0.0003
 Text.Whitespace
?Operator
 Text.Whitespace
tMaxName.Othernumber0.9545any0.0375string0.0073boolean0.0002complex0.0001
 Text.Whitespace
:Operator
 Text.Whitespace
kKeyword.Typenumber0.9578any0.0364string0.0053complex0.0001boolean0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
biasName.Othernumber0.9657any0.0225string0.0106complex0.0003boolean0.0001
)Punctuation
;Punctuation
\n\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
digitName.Othernumber0.9139any0.0763string0.0061void0.0007complex0.0007
 Text.Whitespace
<Operator
 Text.Whitespace
tName.Othernumber0.6232any0.3536string0.0133boolean0.0037Date0.0012
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
breakKeyword
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\n\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
baseMinusTName.Othernumber0.9834any0.0125string0.0033boolean0.0004complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
baseName.Othernumber0.9121any0.0682string0.0147Date0.0009complex0.0009
 Text.Whitespace
-Operator
 Text.Whitespace
tName.Othernumber0.6316any0.3491string0.0133boolean0.0014Date0.0011
;Punctuation
\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
wName.Othernumber0.8504any0.1462string0.0022boolean0.0003void0.0002
 Text.Whitespace
>Operator
 Text.Whitespace
floorName.Othernumber0.9608any0.0371string0.0010boolean0.0003complex0.0003
(Punctuation
maxIntName.Othernumber0.9412any0.0537string0.0043boolean0.0002complex0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
baseMinusTName.Othernumber0.9653any0.0256string0.0073boolean0.0005complex0.0004
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
errorName.Othervoid0.9661any0.0164complex0.0050Promise<void>0.0027number0.0023
(Punctuation
'overflow'Literal.String.Single
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\n\t\t\tText.Whitespace
wName.Othernumber0.9380any0.0526string0.0061void0.0007{}0.0005
 Text.Whitespace
*=Operator
 Text.Whitespace
baseMinusTName.Othernumber0.9813any0.0126string0.0041boolean0.0004complex0.0003
;Punctuation
\n\n\t\tText.Whitespace
}Punctuation
\n\n\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
outName.Othernumber0.8189any0.1202string0.0343number[]0.0052void0.0037
 Text.Whitespace
=Operator
 Text.Whitespace
outputName.Otherany[]0.7584any0.1050string[]0.0399number[]0.0358string0.0112
.Punctuation
lengthName.Othernumber0.8729any0.1248string0.0012complex0.0004void0.0003
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n\t\tText.Whitespace
biasName.Othernumber0.9598any0.0288string0.0103complex0.0004boolean0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
adaptName.Othernumber0.9661any0.0205string0.0083complex0.0024number[]0.0007
(Punctuation
iName.Othernumber0.8859any0.1121string0.0013complex0.0002boolean0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
oldiName.Othernumber0.9700any0.0253string0.0036boolean0.0003number[]0.0002
,Punctuation
 Text.Whitespace
outName.Othernumber0.7201any0.1252string0.1125number[]0.0045complex0.0027
,Punctuation
 Text.Whitespace
oldiName.Othernumber0.9761any0.0190string0.0039boolean0.0004complex0.0002
 Text.Whitespace
==Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
;Punctuation
\n\n\t\tText.Whitespace
// `i` was supposed to wrap around from `out` to `0`,Comment.Single
\n\t\tText.Whitespace
// incrementing `n` each time, so we'll fix that now:Comment.Single
\n\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
floorName.Othernumber0.9636any0.0322string0.0016boolean0.0015void0.0003
(Punctuation
iName.Othernumber0.8903any0.1076string0.0011boolean0.0003complex0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
outName.Othernumber0.7430any0.1505string0.0766complex0.0039number[]0.0035
)Punctuation
 Text.Whitespace
>Operator
 Text.Whitespace
maxIntName.Othernumber0.9793any0.0187string0.0014boolean0.0002void0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
nName.Othernumber0.9761any0.0214string0.0019boolean0.0001complex0.0001
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
errorName.Othervoid0.9589any0.0209complex0.0038Promise<void>0.0030number0.0029
(Punctuation
'overflow'Literal.String.Single
)Punctuation
;Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\n\t\tText.Whitespace
nName.Othernumber0.9833any0.0125string0.0033complex0.0003number[]0.0002
 Text.Whitespace
+=Operator
 Text.Whitespace
floorName.Othernumber0.9356any0.0612string0.0022boolean0.0004complex0.0002
(Punctuation
iName.Othernumber0.8002any0.1961string0.0026complex0.0002boolean0.0002
 Text.Whitespace
/Operator
 Text.Whitespace
outName.Othernumber0.6840string0.1494any0.1273complex0.0057number[]0.0048
)Punctuation
;Punctuation
\n\t\tText.Whitespace
iName.Othernumber0.6957any0.2991string0.0025boolean0.0009complex0.0005
 Text.Whitespace
%=Operator
 Text.Whitespace
outName.Otherany0.3876number0.2635string0.0441any[]0.0302complex0.0286
;Punctuation
\n\n\t\tText.Whitespace
// Insert `n` at position `i` of the output.Comment.Single
\n\t\tText.Whitespace
outputName.Otherany[]0.8479any0.0353string[]0.0299number[]0.0228complex0.0026
.Punctuation
spliceName.Othercomplex0.8501any0.1317void0.0077any[]0.0045number0.0022
(Punctuation
iName.Othernumber0.9765any0.0226string0.0005complex0.0001boolean0.0001
++Operator
,Punctuation
 Text.Whitespace
0Literal.Number.Float
,Punctuation
 Text.Whitespace
nName.Othernumber0.9665any0.0277string0.0045void0.0003complex0.0003
)Punctuation
;Punctuation
\n\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
returnKeyword
 Text.Whitespace
StringName.BuiltinStringConstructor0.9963String0.0017NumberConstructor0.0001Number0.0000PropertyDescriptor0.0000
.Punctuation
fromCodePointName.Othernumber0.7191string0.1669complex0.0289any0.0203boolean0.0191
(Punctuation
...Punctuation
outputName.Otherany[]0.9123number[]0.0181string[]0.0176any0.0090{}0.0022
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a string of Unicode symbols (e.g. a domain name label) to a\n * Punycode string of ASCII-only symbols.\n * @memberOf punycode\n * @param {String} input The string of Unicode symbols.\n * @returns {String} The resulting Punycode string of ASCII-only symbols.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
encodeName.Othercomplex0.2861any[]0.2473string[]0.0956any0.0839string0.0411
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
inputName.Otherany0.5246string0.2890any[]0.0622number0.0194number[]0.0045
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
outputName.Otherany[]0.9600any0.0071string[]0.0064number[]0.0061any[][]0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
[Punctuation
]Punctuation
;Punctuation
\n\n\tText.Whitespace
// Convert the input in UCS-2 to an array of Unicode code points.Comment.Single
\n\tText.Whitespace
inputName.Otherstring0.4697any0.3497any[]0.0850number0.0653number[]0.0057
 Text.Whitespace
=Operator
 Text.Whitespace
ucs2decodeName.Otherany0.3092number0.2894string0.2222any[]0.1144complex0.0142
(Punctuation
inputName.Otherany0.4445string0.3204any[]0.1133number0.0384number[]0.0118
)Punctuation
;Punctuation
\n\n\tText.Whitespace
// Cache the length.Comment.Single
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
inputLengthName.Othernumber0.9810any0.0147string0.0024boolean0.0006number[]0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
inputName.Otherany0.3990string0.3932any[]0.0893number0.0635number[]0.0168
.Punctuation
lengthName.Othernumber0.9513any0.0467string0.0011complex0.0002void0.0001
;Punctuation
\n\n\tText.Whitespace
// Initialize the state.Comment.Single
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
nName.Othernumber0.9656any0.0267string0.0066boolean0.0001complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
initialNName.Othernumber0.9626any0.0309string0.0046boolean0.0004any[]0.0001
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
deltaName.Othernumber0.9926any0.0063string0.0003boolean0.0002void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
biasName.Othernumber0.9481any0.0391string0.0105boolean0.0005complex0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
initialBiasName.Othernumber0.9204any0.0684string0.0072boolean0.0010any[]0.0005
;Punctuation
\n\n\tText.Whitespace
// Handle the basic code points.Comment.Single
\n\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
currentValueName.Otherany0.7626number0.1319string0.0920complex0.0014any[]0.0011
 Text.Whitespace
ofKeyword
 Text.Whitespace
inputName.Otherany0.6515string0.1038any[]0.0915number0.0696number[]0.0130
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
currentValueName.Othernumber0.6098any0.3810string0.0059boolean0.0009void0.0005
 Text.Whitespace
<Operator
 Text.Whitespace
0x80Literal.Number.Hex
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
outputName.Otherany[]0.8850any0.0409string[]0.0171number[]0.0167Function[]0.0012
.Punctuation
pushName.Othernumber0.9733any0.0239void0.0009string0.0006any[]0.0002
(Punctuation
stringFromCharCodeName.Othernumber0.4837any0.2479string0.2362boolean0.0039any[]0.0035
(Punctuation
currentValueName.Otherany0.8399string0.0870number0.0595{}0.0029any[]0.0014
)Punctuation
)Punctuation
;Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
basicLengthName.Othernumber0.9008any0.0860string0.0101boolean0.0009any[]0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
outputName.Otherany[]0.6239any0.2107string[]0.0433string0.0240number[]0.0175
.Punctuation
lengthName.Othernumber0.8552any0.1418string0.0016complex0.0003boolean0.0002
;Punctuation
\n\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
handledCPCountName.Othernumber0.8234any0.1111string0.0511boolean0.0113any[]0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
basicLengthName.Othernumber0.8260any0.1288string0.0339boolean0.0074any[]0.0008
;Punctuation
\n\n\tText.Whitespace
// `handledCPCount` is the number of code points that have been handled;Comment.Single
\n\tText.Whitespace
// `basicLength` is the number of basic code points.Comment.Single
\n\n\tText.Whitespace
// Finish the basic string with a delimiter unless it's empty.Comment.Single
\n\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
basicLengthName.Othernumber0.5034boolean0.2262any0.1977string0.0633any[]0.0026
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
outputName.Otherany[]0.8939any0.0387string[]0.0218number[]0.0198Function[]0.0013
.Punctuation
pushName.Othernumber0.9777any0.0202string0.0008void0.0005boolean0.0003
(Punctuation
delimiterName.Otherstring0.7659any0.1619number0.0668boolean0.0023complex0.0005
)Punctuation
;Punctuation
\n\tText.Whitespace
}Punctuation
\n\n\tText.Whitespace
// Main encoding loop:Comment.Single
\n\tText.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
handledCPCountName.Othernumber0.9628any0.0301string0.0042boolean0.0019void0.0003
 Text.Whitespace
<Operator
 Text.Whitespace
inputLengthName.Othernumber0.9542any0.0371string0.0060boolean0.0018number[]0.0001
)Punctuation
 Text.Whitespace
{Punctuation
\n\n\t\tText.Whitespace
// All non-basic code points < n have been handled already. Find the nextComment.Single
\n\t\tText.Whitespace
// larger one:Comment.Single
\n\t\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
mName.Othernumber0.8034any0.1796string0.0118boolean0.0024complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
maxIntName.Othernumber0.9230any0.0612string0.0109boolean0.0023complex0.0005
;Punctuation
\n\t\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
currentValueName.Otherany0.7347string0.1608number0.0838boolean0.0033complex0.0021
 Text.Whitespace
ofKeyword
 Text.Whitespace
inputName.Otherany0.5805string0.1452any[]0.1140number0.0479number[]0.0097
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
currentValueName.Otherany0.7057number0.2752string0.0137boolean0.0017Date0.0005
 Text.Whitespace
>=Operator
 Text.Whitespace
nName.Othernumber0.9394any0.0561string0.0032boolean0.0002complex0.0002
 Text.Whitespace
&&Operator
 Text.Whitespace
currentValueName.Otherany0.6167number0.3487string0.0264boolean0.0013T0.0010
 Text.Whitespace
<Operator
 Text.Whitespace
mName.Othernumber0.6116any0.3695string0.0137boolean0.0012complex0.0006
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
mName.Otherany0.5999number0.3709string0.0252boolean0.0006{}0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
currentValueName.Otherany0.8931number0.0565string0.0412{}0.0014T0.0011
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\n\t\tText.Whitespace
// Increase `delta` enough to advance the decoder's <n,i> state to <m,0>,Comment.Single
\n\t\tText.Whitespace
// but guard against overflow.Comment.Single
\n\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
handledCPCountPlusOneName.Othernumber0.9427any0.0437string0.0118boolean0.0008complex0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
handledCPCountName.Othernumber0.9423any0.0480string0.0084boolean0.0004complex0.0002
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
mName.Othernumber0.7817any0.2113string0.0055boolean0.0006complex0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
nName.Othernumber0.9533any0.0444string0.0019boolean0.0001complex0.0001
 Text.Whitespace
>Operator
 Text.Whitespace
floorName.Othernumber0.9502any0.0472string0.0012boolean0.0004void0.0002
(Punctuation
(Punctuation
maxIntName.Othernumber0.9501any0.0450string0.0041boolean0.0002Date0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
deltaName.Othernumber0.9284any0.0661string0.0028void0.0007boolean0.0004
)Punctuation
 Text.Whitespace
/Operator
 Text.Whitespace
handledCPCountPlusOneName.Othernumber0.9686any0.0261string0.0039boolean0.0005void0.0003
)Punctuation
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
errorName.Othervoid0.9611any0.0248complex0.0025number0.0018Promise<void>0.0014
(Punctuation
'overflow'Literal.String.Single
)Punctuation
;Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\n\t\tText.Whitespace
deltaName.Othernumber0.9701any0.0192string0.0078void0.0013boolean0.0007
 Text.Whitespace
+=Operator
 Text.Whitespace
(Punctuation
mName.Othernumber0.7339any0.2568string0.0081boolean0.0003complex0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
nName.Othernumber0.9553any0.0398string0.0042boolean0.0001complex0.0001
)Punctuation
 Text.Whitespace
*Operator
 Text.Whitespace
handledCPCountPlusOneName.Othernumber0.9584any0.0360string0.0039boolean0.0007void0.0004
;Punctuation
\n\t\tText.Whitespace
nName.Othernumber0.8519any0.1352string0.0098boolean0.0007complex0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
mName.Othernumber0.7121any0.2769string0.0073boolean0.0009void0.0006
;Punctuation
\n\n\t\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
constKeyword.Declaration
 Text.Whitespace
currentValueName.Otherany0.6751string0.1897number0.1175boolean0.0033complex0.0025
 Text.Whitespace
ofKeyword
 Text.Whitespace
inputName.Otherany0.5242any[]0.1690string0.1117number0.0557number[]0.0133
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
currentValueName.Otherany0.7714number0.2030string0.0173boolean0.0016complex0.0013
 Text.Whitespace
<Operator
 Text.Whitespace
nName.Othernumber0.9374any0.0586string0.0022boolean0.0005complex0.0004
 Text.Whitespace
&&Operator
 Text.Whitespace
++Operator
deltaName.Othernumber0.9547any0.0429string0.0011void0.0003boolean0.0002
 Text.Whitespace
>Operator
 Text.Whitespace
maxIntName.Othernumber0.9814any0.0118string0.0044boolean0.0009void0.0003
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
errorName.Othervoid0.9415any0.0385complex0.0036Promise<void>0.0020number0.0016
(Punctuation
'overflow'Literal.String.Single
)Punctuation
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
currentValueName.Otherany0.7871number0.1660string0.0372complex0.0023boolean0.0009
 Text.Whitespace
==Operator
 Text.Whitespace
nName.Othernumber0.8501any0.1411string0.0056boolean0.0006complex0.0005
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\tText.Whitespace
// Represent delta as a generalized variable-length integer.Comment.Single
\n\t\t\t\tText.Whitespace
letKeyword.Declaration
 Text.Whitespace
qName.Othernumber0.8200any0.1750string0.0025any[]0.0003boolean0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
deltaName.Othernumber0.9041any0.0834string0.0023complex0.0011any[]0.0011
;Punctuation
\n\t\t\t\tText.Whitespace
forKeyword
 Text.Whitespace
(Punctuation
letKeyword.Declaration
 Text.Whitespace
kName.Othernumber0.9340any0.0368string0.0273boolean0.0005complex0.0004
 Text.Whitespace
=Operator
 Text.Whitespace
baseName.Othernumber0.8704any0.0673string0.0399Date0.0036any[]0.0032
;Punctuation
 Text.Whitespace
/* no condition */Comment.Multiline
;Punctuation
 Text.Whitespace
kName.Othernumber0.9769string0.0118any0.0100boolean0.0003complex0.0003
 Text.Whitespace
+=Operator
 Text.Whitespace
baseName.Othernumber0.8695string0.0763any0.0331Date0.0050boolean0.0043
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
tName.Othernumber0.8228any0.1401string0.0185boolean0.0145Date0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
kName.Othernumber0.9586any0.0364string0.0042boolean0.0003complex0.0002
 Text.Whitespace
<=Operator
 Text.Whitespace
biasName.Othernumber0.9650any0.0194string0.0125boolean0.0015complex0.0008
 Text.Whitespace
?Operator
 Text.Whitespace
tMinName.Othernumber0.9786any0.0095string0.0095boolean0.0018complex0.0002
 Text.Whitespace
:Operator
 Text.Whitespace
(Punctuation
kName.Othernumber0.9511any0.0436string0.0047complex0.0002boolean0.0002
 Text.Whitespace
>=Operator
 Text.Whitespace
biasName.Othernumber0.9710any0.0220string0.0063complex0.0003boolean0.0001
 Text.Whitespace
+Operator
 Text.Whitespace
tMaxName.Othernumber0.9289any0.0431string0.0175boolean0.0090complex0.0003
 Text.Whitespace
?Operator
 Text.Whitespace
tMaxName.Othernumber0.9627any0.0283string0.0084boolean0.0003complex0.0001
 Text.Whitespace
:Operator
 Text.Whitespace
kKeyword.Typenumber0.9665any0.0274string0.0056boolean0.0001complex0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
biasName.Othernumber0.9620any0.0230string0.0139complex0.0003boolean0.0002
)Punctuation
;Punctuation
\n\t\t\t\t\tText.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
qName.Othernumber0.9279any0.0675string0.0027boolean0.0004void0.0003
 Text.Whitespace
<Operator
 Text.Whitespace
tName.Othernumber0.7289any0.2453string0.0133boolean0.0047Date0.0022
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\t\t\t\t\tText.Whitespace
breakKeyword
;Punctuation
\n\t\t\t\t\tText.Whitespace
}Punctuation
\n\t\t\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
qMinusTName.Othernumber0.9933any0.0052string0.0008boolean0.0003complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
qName.Othernumber0.9120any0.0853string0.0014Date0.0002void0.0001
 Text.Whitespace
-Operator
 Text.Whitespace
tName.Othernumber0.7002any0.2836string0.0056Date0.0023boolean0.0019
;Punctuation
\n\t\t\t\t\tText.Whitespace
constKeyword.Declaration
 Text.Whitespace
baseMinusTName.Othernumber0.9896any0.0081string0.0014boolean0.0005complex0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
baseName.Othernumber0.9449any0.0437string0.0061Date0.0013boolean0.0005
 Text.Whitespace
-Operator
 Text.Whitespace
tName.Othernumber0.8147any0.1653string0.0081boolean0.0028Date0.0026
;Punctuation
\n\t\t\t\t\tText.Whitespace
outputName.Otherany[]0.7846any0.0866number[]0.0429string[]0.0183number0.0048
.Punctuation
pushName.Othernumber0.9848any0.0136string0.0005void0.0004boolean0.0002
(Punctuation
\n\t\t\t\t\t\tText.Whitespace
stringFromCharCodeName.Othernumber0.8760any0.0630string0.0529boolean0.0017complex0.0017
(Punctuation
digitToBasicName.Othernumber0.8699any0.0655string0.0525boolean0.0027complex0.0025
(Punctuation
tName.Othernumber0.5123any0.4738string0.0080boolean0.0017Date0.0009
 Text.Whitespace
+Operator
 Text.Whitespace
qMinusTName.Othernumber0.9466any0.0473string0.0052boolean0.0003complex0.0001
 Text.Whitespace
%Operator
 Text.Whitespace
baseMinusTName.Othernumber0.9570any0.0375string0.0041boolean0.0004complex0.0002
,Punctuation
 Text.Whitespace
0Literal.Number.Float
)Punctuation
)Punctuation
\n\t\t\t\t\tText.Whitespace
)Punctuation
;Punctuation
\n\t\t\t\t\tText.Whitespace
qName.Othernumber0.9644any0.0337string0.0010void0.0002boolean0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
floorName.Othernumber0.9744any0.0237string0.0012boolean0.0003void0.0001
(Punctuation
qMinusTName.Othernumber0.9656any0.0310string0.0029boolean0.0002complex0.0001
 Text.Whitespace
/Operator
 Text.Whitespace
baseMinusTName.Othernumber0.9783any0.0171string0.0036boolean0.0004void0.0001
)Punctuation
;Punctuation
\n\t\t\t\tText.Whitespace
}Punctuation
\n\n\t\t\t\tText.Whitespace
outputName.Otherany[]0.7970any0.0855number[]0.0280string[]0.0276string0.0029
.Punctuation
pushName.Othernumber0.9682any0.0290string0.0007void0.0007boolean0.0004
(Punctuation
stringFromCharCodeName.Othernumber0.7842any0.1280string0.0569boolean0.0066complex0.0035
(Punctuation
digitToBasicName.Othernumber0.8085any0.0924string0.0764boolean0.0084complex0.0027
(Punctuation
qName.Othernumber0.7399any0.2403string0.0146complex0.0006Date0.0004
,Punctuation
 Text.Whitespace
0Literal.Number.Float
)Punctuation
)Punctuation
)Punctuation
;Punctuation
\n\t\t\t\tText.Whitespace
biasName.Othernumber0.9432any0.0401string0.0141boolean0.0010complex0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
adaptName.Othernumber0.9607any0.0255string0.0093boolean0.0020complex0.0009
(Punctuation
deltaName.Othernumber0.9033any0.0879string0.0026boolean0.0010void0.0009
,Punctuation
 Text.Whitespace
handledCPCountPlusOneName.Othernumber0.9532any0.0300string0.0105boolean0.0041void0.0004
,Punctuation
 Text.Whitespace
handledCPCountName.Othernumber0.9309any0.0494string0.0167boolean0.0013complex0.0005
 Text.Whitespace
==Operator
 Text.Whitespace
basicLengthName.Othernumber0.9560any0.0296string0.0121boolean0.0011complex0.0004
)Punctuation
;Punctuation
\n\t\t\t\tText.Whitespace
deltaName.Othernumber0.9805any0.0174string0.0012boolean0.0003void0.0001
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n\t\t\t\tText.Whitespace
++Operator
handledCPCountName.Othernumber0.9840any0.0119string0.0024boolean0.0008void0.0003
;Punctuation
\n\t\t\tText.Whitespace
}Punctuation
\n\t\tText.Whitespace
}Punctuation
\n\n\t\tText.Whitespace
++Operator
deltaName.Othernumber0.9733any0.0242string0.0009void0.0004boolean0.0004
;Punctuation
\n\t\tText.Whitespace
++Operator
nName.Othernumber0.9833any0.0130string0.0026boolean0.0002void0.0002
;Punctuation
\n\n\tText.Whitespace
}Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
outputName.Otherany[]0.9240string[]0.0334any0.0119number[]0.0044T[]0.0015
.Punctuation
joinName.Otherstring0.8517any0.1215number0.0136complex0.0033boolean0.0025
(Punctuation
''Literal.String.Single
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a Punycode string representing a domain name or an email address\n * to Unicode. Only the Punycoded parts of the input will be converted, i.e.\n * it doesn't matter if you call it on a string that has already been\n * converted to Unicode.\n * @memberOf punycode\n * @param {String} input The Punycoded domain name or email address to\n * convert to Unicode.\n * @returns {String} The Unicode representation of the given Punycode\n * string.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
toUnicodeName.Otherstring0.6953any0.2883number0.0049complex0.0029boolean0.0026
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
inputName.Otherstring0.5445any0.3747number0.0175any[]0.0080Date0.0021
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
mapDomainName.Otherstring0.6685any0.2120number0.0705boolean0.0158complex0.0113
(Punctuation
inputName.Otherstring0.6680any0.2820number0.0138any[]0.0092string[]0.0025
,Punctuation
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stringKeyword.Type
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
regexPunycodeName.Otherstring0.5062any0.3802RegExp0.0737number0.0103string[]0.0061
.Punctuation
testName.Otherboolean0.4697any0.2581string0.1541complex0.0853number0.0176
(Punctuation
stringKeyword.Type
)Punctuation
\n\t\t\tText.Whitespace
?Operator
 Text.Whitespace
decodeName.Otherstring0.7468any0.1734string[]0.0520complex0.0058number0.0028
(Punctuation
stringKeyword.Type
.Punctuation
sliceName.Otherstring0.9613any0.0279string[]0.0069number0.0008any[]0.0007
(Punctuation
4Literal.Number.Float
)Punctuation
.Punctuation
toLowerCaseName.Otherstring0.9556any0.0419number0.0013complex0.0004boolean0.0002
(Punctuation
)Punctuation
)Punctuation
\n\t\t\tText.Whitespace
:Operator
 Text.Whitespace
stringKeyword.Type
;Punctuation
\n\tText.Whitespace
}Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Converts a Unicode string representing a domain name or an email address to\n * Punycode. Only the non-ASCII parts of the domain name will be converted,\n * i.e. it doesn't matter if you call it with a domain that's already in\n * ASCII.\n * @memberOf punycode\n * @param {String} input The domain name or email address to convert, as a\n * Unicode string.\n * @returns {String} The Punycode representation of the given domain name or\n * email address.\n */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
toASCIIName.Otherstring0.5537any0.2538number0.1560boolean0.0220complex0.0030
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
inputName.Otherstring0.5158any0.4143number0.0087any[]0.0055Date0.0035
)Punctuation
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
returnKeyword
 Text.Whitespace
mapDomainName.Otherstring0.7696any0.1445number0.0422boolean0.0143complex0.0129
(Punctuation
inputName.Otherstring0.7147any0.2460number0.0086any[]0.0066Date0.0027
,Punctuation
 Text.Whitespace
functionKeyword.Declaration
(Punctuation
stringKeyword.Type
)Punctuation
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
returnKeyword
 Text.Whitespace
regexNonASCIIName.Otherstring0.5233any0.3777RegExp0.0660number0.0092Date0.0057
.Punctuation
testName.Otherboolean0.3740any0.3267string0.1687complex0.0980number0.0195
(Punctuation
stringKeyword.Type
)Punctuation
\n\t\t\tText.Whitespace
?Operator
 Text.Whitespace
'xn--'Literal.String.Single
 Text.Whitespace
+Operator
 Text.Whitespace
encodeName.Otherstring0.9317complex0.0268any0.0237string[]0.0062number0.0025
(Punctuation
stringKeyword.Type
)Punctuation
\n\t\t\tText.Whitespace
:Operator
 Text.Whitespace
stringKeyword.Type
;Punctuation
\n\tText.Whitespace
}Punctuation
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/*--------------------------------------------------------------------------*/Comment.Multiline
\n\nText.Whitespace
/** Define the public API */Comment.Multiline
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
punycodeName.Othercomplex0.5895any0.1678number0.0264string0.0135Route0.0047
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n\tText.Whitespace
/**\n\t * A string representing the current Punycode.js version number.\n\t * @memberOf punycode\n\t * @type String\n\t */Comment.Multiline
\n\tText.Whitespace
'version'Literal.String.Single
:Operator
 Text.Whitespace
'2.1.0'Literal.String.Single
,Punctuation
\n\tText.Whitespace
/**\n\t * An object of methods to convert from JavaScript's internal character\n\t * representation (UCS-2) to Unicode code points, and back.\n\t * @see <https://mathiasbynens.be/notes/javascript-encoding>\n\t * @memberOf punycode\n\t * @type Object\n\t */Comment.Multiline
\n\tText.Whitespace
'ucs2'Literal.String.Single
:Operator
 Text.Whitespace
{Punctuation
\n\t\tText.Whitespace
'decode'Literal.String.Single
:Operator
 Text.Whitespace
ucs2decodeName.Otherstring0.6912number0.1975any0.0528boolean0.0295complex0.0079
,Punctuation
\n\t\tText.Whitespace
'encode'Literal.String.Single
:Operator
 Text.Whitespace
ucs2encodeName.Otherstring0.5596number0.2886any0.0742boolean0.0424complex0.0121
\n\tText.Whitespace
}Punctuation
,Punctuation
\n\tText.Whitespace
'decode'Literal.String.Single
:Operator
 Text.Whitespace
decodeName.Otherstring0.8554any0.0579complex0.0334string[]0.0312number0.0085
,Punctuation
\n\tText.Whitespace
'encode'Literal.String.Single
:Operator
 Text.Whitespace
encodeName.Othercomplex0.8027string0.1036string[]0.0231any0.0207any[]0.0049
,Punctuation
\n\tText.Whitespace
'toASCII'Literal.String.Single
:Operator
 Text.Whitespace
toASCIIName.Otherstring0.5428number0.3385any0.0647boolean0.0296complex0.0055
,Punctuation
\n\tText.Whitespace
'toUnicode'Literal.String.Single
:Operator
 Text.Whitespace
toUnicodeName.Otherstring0.7292any0.2451complex0.0164number0.0028boolean0.0012
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
moduleKeyword.Reserved
.exportsName.Other
 Text.Whitespace
=Operator
 Text.Whitespace
punycodeName.Otherany0.3287number0.3014string0.2844complex0.0199boolean0.0103
;Punctuation
\nText.Whitespace
