Text
/* -*- Mode: js; js-indent-level: 2; -*- */Comment.Multiline
\nText.Whitespace
/*\n * Copyright 2011 Mozilla Foundation and contributors\n * Licensed under the New BSD license. See LICENSE or:\n * http://opensource.org/licenses/BSD-3-Clause\n *\n * Based on the Base 64 VLQ implementation in Closure Compiler:\n * https://code.google.com/p/closure-compiler/source/browse/trunk/src/com/google/debugging/sourcemap/Base64VLQ.java\n *\n * Copyright 2011 The Closure Compiler Authors. All rights reserved.\n * Redistribution and use in source and binary forms, with or without\n * modification, are permitted provided that the following conditions are\n * met:\n *\n *  * Redistributions of source code must retain the above copyright\n *    notice, this list of conditions and the following disclaimer.\n *  * Redistributions in binary form must reproduce the above\n *    copyright notice, this list of conditions and the following\n *    disclaimer in the documentation and/or other materials provided\n *    with the distribution.\n *  * Neither the name of Google Inc. nor the names of its\n *    contributors may be used to endorse or promote products derived\n *    from this software without specific prior written permission.\n *\n * THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS\n * "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT\n * LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR\n * A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT\n * OWNER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL,\n * SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT\n * LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE,\n * DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY\n * THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n * (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE\n * OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\n */Comment.Multiline
\n\nText.Whitespace
/*eslint no-bitwise:0,quotes:0,global-strict:0*/Comment.Multiline
\n\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
charToIntMapName.Other{}0.9312any0.0235Object0.0053complex0.0020object0.0011
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
intToCharMapName.Other{}0.9762any0.0100Object0.0031complex0.0008object0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\n\nText.Whitespace
'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'Literal.String.Single
\n  Text.Whitespace
.Punctuation
splitName.Othercomplex0.9143any0.0719void0.0032Object0.0018string[]0.0017
(Punctuation
''Literal.String.Single
)Punctuation
\n  Text.Whitespace
.Punctuation
forEachName.Othervoid0.9350any0.0426complex0.0112{}0.0021v...0.0019
(Punctuation
functionKeyword.Declaration
 Text.Whitespace
(Punctuation
chName.Otherstring0.8431any0.0997number0.0483{}0.0017void0.0014
,Punctuation
 Text.Whitespace
indexName.Othernumber0.7489any0.2206string0.0212{}0.0028complex0.0010
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
charToIntMapName.Other{}0.6470any0.2394complex0.0532Object0.0173any[]0.0084
[Punctuation
chName.Otherstring0.7422number0.1843any0.0641complex0.0025void0.0009
]Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
indexName.Othernumber0.5469any0.4180string0.0212{}0.0033complex0.0030
;Punctuation
\n    Text.Whitespace
intToCharMapName.Other{}0.2469any0.2250string[]0.1808any[]0.1181number[]0.0513
[Punctuation
indexName.Othernumber0.7883any0.1126string0.0913complex0.0019{}0.0015
]Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
chName.Otherstring0.7909any0.1132number0.0811void0.0025complex0.0025
;Punctuation
\n  Text.Whitespace
}Punctuation
)Punctuation
;Punctuation
\n\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
base64Name.Other{}0.9530any0.0231Object0.0050complex0.0042any[]0.0008
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
}Punctuation
;Punctuation
\nText.Whitespace
/**\n * Encode an integer in the range of 0 to 63 to a single base 64 digit.\n */Comment.Multiline
\nText.Whitespace
base64Name.Otherany0.7025complex0.1068{}0.0581Object0.0096any[]0.0053
.Punctuation
encodeName.Otherany0.7361void0.1001complex0.0426string0.0385{}0.0226
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
base64_encodeName.Otherany0.4550void0.1233string0.1220complex0.0496{}0.0392
(Punctuation
aNumberName.Otherany0.5882string0.2568string[]0.0176any[]0.0135{}0.0103
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
aNumberName.Otherstring0.8572any0.1204boolean0.0095number0.0050string[]0.0020
 Text.Whitespace
inOperator.Word
 Text.Whitespace
intToCharMapName.Otherany0.6449{}0.1137complex0.0553string0.0487any[]0.0219
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
intToCharMapName.Otherany0.4828{}0.3142complex0.1050any[]0.0397Object0.0105
[Punctuation
aNumberName.Otherstring0.8585any0.0549number0.0508{}0.0097string[]0.0031
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
throwKeywordany0.3056complex0.2428{}0.1909Error0.0814string0.0648
 Text.Whitespace
newOperator.Wordany0.3133{}0.1906complex0.0918string0.0786Error0.0446
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9941ErrorConstructor0.0007MapConstructor0.0001BooleanConstructor0.0001AutocompletionProvider0.0000
(Punctuation
"Must be between 0 and 63: "Literal.String.Double
 Text.Whitespace
+Operator
 Text.Whitespace
aNumberName.Otherstring0.5984any0.2005number0.1560{}0.0064Error0.0044
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Decode a single base 64 digit to an integer.\n */Comment.Multiline
\nText.Whitespace
base64Name.Otherany0.4554complex0.0522{}0.0107Object0.0090Error0.0054
.Punctuation
decodeName.Otherany0.9636string0.0260complex0.0017string[]0.0010number0.0010
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
base64_decodeName.Otherany0.5316string0.1937void0.0560any[]0.0315string[]0.0280
(Punctuation
aCharName.Otherany0.5989string0.2890string[]0.0129number0.0105any[]0.0081
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
aCharName.Otherstring0.8335any0.1456boolean0.0089number0.0058string[]0.0015
 Text.Whitespace
inOperator.Word
 Text.Whitespace
charToIntMapName.Otherany0.6853{}0.0776string0.0500complex0.0444number0.0235
)Punctuation
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
returnKeyword
 Text.Whitespace
charToIntMapName.Otherany0.6170{}0.2085complex0.0831any[]0.0331Object0.0124
[Punctuation
aCharName.Otherstring0.8481any0.0647number0.0579{}0.0049boolean0.0021
]Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
\n  Text.Whitespace
throwKeywordany0.3640complex0.1415{}0.1389Error0.1187string0.0990
 Text.Whitespace
newOperator.Wordany0.3105{}0.1327string0.0911Error0.0544complex0.0526
 Text.Whitespace
TypeErrorName.ExceptionTypeErrorConstructor0.9933ErrorConstructor0.0005MapConstructor0.0001BooleanConstructor0.0001AutocompletionProvider0.0001
(Punctuation
"Not a valid base 64 digit: "Literal.String.Double
 Text.Whitespace
+Operator
 Text.Whitespace
aCharName.Othernumber0.4791string0.3755any0.1166never0.0040Object0.0026
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\n\n\nText.Whitespace
// A single base 64 digit can contain 6 bits of data. For the base 64 variableComment.Single
\nText.Whitespace
// length quantities we use in the source map spec, the first bit is the sign,Comment.Single
\nText.Whitespace
// the next four bits are the actual value, and the 6th bit is theComment.Single
\nText.Whitespace
// continuation bit. The continuation bit tells us whether there are moreComment.Single
\nText.Whitespace
// digits in this value following this digit.Comment.Single
\nText.Whitespace
//Comment.Single
\nText.Whitespace
//   ContinuationComment.Single
\nText.Whitespace
//   |    SignComment.Single
\nText.Whitespace
//   |    |Comment.Single
\nText.Whitespace
//   V    VComment.Single
\nText.Whitespace
//   101011Comment.Single
\n\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
VLQ_BASE_SHIFTName.Othernumber0.9928any0.0038boolean0.0007string0.0006void0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
5Literal.Number.Float
;Punctuation
\n\nText.Whitespace
// binary: 100000Comment.Single
\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
VLQ_BASEName.Othernumber0.6607any0.0688boolean0.0681string0.0255{}0.0154
 Text.Whitespace
=Operator
 Text.Whitespace
1Literal.Number.Float
 Text.Whitespace
<<Operator
 Text.Whitespace
VLQ_BASE_SHIFTName.Othernumber0.3688any0.1440number[]0.0123any[]0.0080string0.0068
;Punctuation
\n\nText.Whitespace
// binary: 011111Comment.Single
\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
VLQ_BASE_MASKName.Othernumber0.9874any0.0082boolean0.0013string0.0010void0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
VLQ_BASEName.Othernumber0.9786any0.0156string0.0016boolean0.0010void0.0003
 Text.Whitespace
-Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n\nText.Whitespace
// binary: 100000Comment.Single
\nText.Whitespace
varKeyword.Declaration
 Text.Whitespace
VLQ_CONTINUATION_BITName.Othernumber0.8260boolean0.0443any0.0436string0.0220{}0.0047
 Text.Whitespace
=Operator
 Text.Whitespace
VLQ_BASEName.Othernumber0.8149any0.0543string0.0203boolean0.0181any[]0.0052
;Punctuation
\n\nText.Whitespace
/**\n * Converts from a two-complement value to a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   1 becomes 2 (10 binary), -1 becomes 3 (11 binary)\n *   2 becomes 4 (100 binary), -2 becomes 5 (101 binary)\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
toVLQSignedName.Othernumber0.7474boolean0.1177string0.0603any0.0234{}0.0039
(Punctuation
aValueName.Othernumber0.7581string0.0778any0.0607boolean0.0149Date0.0081
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
aValueName.Othernumber0.9751any0.0114string0.0063boolean0.0032void0.0005
 Text.Whitespace
<Operator
 Text.Whitespace
0Literal.Number.Float
\n    Text.Whitespace
?Operator
 Text.Whitespace
(Punctuation
(Punctuation
-Operator
aValueName.Othernumber0.9623any0.0168string0.0094Object0.0012number[]0.0009
)Punctuation
 Text.Whitespace
<<Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
1Literal.Number.Float
\n    Text.Whitespace
:Operator
 Text.Whitespace
(Punctuation
aValueName.Othernumber0.9653string0.0157any0.0147boolean0.0014number[]0.0004
 Text.Whitespace
<<Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
+Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Converts to a two-complement value from a value where the sign bit is\n * placed in the least significant bit.  For example, as decimals:\n *   2 (10 binary) becomes 1, 3 (11 binary) becomes -1\n *   4 (100 binary) becomes 2, 5 (101 binary) becomes -2\n */Comment.Multiline
\nText.Whitespace
functionKeyword.Declaration
 Text.Whitespace
fromVLQSignedName.Othernumber0.3851boolean0.3828any0.0592string0.0479void0.0145
(Punctuation
aValueName.Othernumber0.3816any0.1864string0.1844boolean0.0647Object0.0071
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
isNegativeName.Otherboolean0.9805number0.0131any0.0028void0.0014string0.0006
 Text.Whitespace
=Operator
 Text.Whitespace
(Punctuation
aValueName.Othernumber0.9483any0.0341boolean0.0049string0.0022{}0.0009
 Text.Whitespace
&Operator
 Text.Whitespace
1Literal.Number.Float
)Punctuation
 Text.Whitespace
===Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
shiftedName.Othernumber0.9575any0.0273string0.0069boolean0.0058void0.0003
 Text.Whitespace
=Operator
 Text.Whitespace
aValueName.Othernumber0.9246any0.0551string0.0073boolean0.0041complex0.0009
 Text.Whitespace
>>Operator
 Text.Whitespace
1Literal.Number.Float
;Punctuation
\n  Text.Whitespace
returnKeyword
 Text.Whitespace
isNegativeName.Otherboolean0.9803number0.0091any0.0072string0.0010void0.0004
\n    Text.Whitespace
?Operator
 Text.Whitespace
-Operator
shiftedName.Othernumber0.8240any0.1063boolean0.0305string0.0182{}0.0017
\n    Text.Whitespace
:Operator
 Text.Whitespace
shiftedKeyword.Typenumber0.8279any0.0814string0.0412boolean0.0325{}0.0022
;Punctuation
\nText.Whitespace
}Punctuation
\n\nText.Whitespace
Text
/**\n * Returns the base 64 VLQ encoded value.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
encodeName.Othervoid0.2723any0.2348complex0.1391string0.0858any[]0.0275
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
base64VLQ_encodeName.Otherany0.2011string0.1811void0.1361complex0.0525number0.0473
(Punctuation
aValueName.Otherstring0.3782any0.3733number0.0560boolean0.0139string[]0.0115
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
encodedName.Otherstring0.9526any0.0356number0.0024RegExp0.0020string[]0.0015
 Text.Whitespace
=Operator
 Text.Whitespace
""Literal.String.Double
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
digitName.Otherany0.4919number0.2346string0.1896void0.0499{}0.0024
;Punctuation
\n\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
vlqName.Otherstring0.3917number0.3104any0.1869boolean0.0265void0.0263
 Text.Whitespace
=Operator
 Text.Whitespace
toVLQSignedName.Otherstring0.4270number0.2087any0.1657boolean0.0231void0.0180
(Punctuation
aValueName.Otherstring0.3536any0.3271number0.2230boolean0.0096{}0.0075
)Punctuation
;Punctuation
\n\n  Text.Whitespace
doKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
digitName.Othernumber0.5932any0.2597string0.0855void0.0186{}0.0101
 Text.Whitespace
=Operator
 Text.Whitespace
vlqName.Othernumber0.4749any0.3571string0.0482{}0.0204complex0.0063
 Text.Whitespace
&Operator
 Text.Whitespace
VLQ_BASE_MASKName.Othernumber0.5682any0.2868string0.0913boolean0.0058{}0.0045
;Punctuation
\n    Text.Whitespace
vlqName.Othernumber0.3996any0.3902string0.0786void0.0287boolean0.0208
 Text.Whitespace
>>>=Operator
 Text.Whitespace
VLQ_BASE_SHIFTName.Othernumber0.6115any0.2192string0.0717void0.0317boolean0.0225
;Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
vlqName.Othernumber0.9469any0.0390boolean0.0064string0.0050void0.0004
 Text.Whitespace
>Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
// There are still more digits in this value, so we must make sure theComment.Single
\n      Text.Whitespace
// continuation bit is marked.Comment.Single
\n      Text.Whitespace
digitName.Othernumber0.8054any0.0924string0.0620void0.0109{}0.0047
 Text.Whitespace
|=Operator
 Text.Whitespace
VLQ_CONTINUATION_BITName.Othernumber0.6939any0.2140string0.0512void0.0125boolean0.0035
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
encodedName.Otherstring0.9261any0.0570number0.0096void0.0020boolean0.0010
 Text.Whitespace
+=Operator
 Text.Whitespace
base64Name.Otherany0.9331string0.0181complex0.0127{}0.0041number0.0027
.Punctuation
encodeName.Otherany0.6539string0.2104complex0.0407{}0.0211void0.0120
(Punctuation
digitName.Otherstring0.4140any0.3125number0.1756{}0.0415void0.0107
)Punctuation
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
vlqName.Othernumber0.8985any0.0824string0.0124boolean0.0014{}0.0009
 Text.Whitespace
>Operator
 Text.Whitespace
0Literal.Number.Float
)Punctuation
;Punctuation
\n\n  Text.Whitespace
returnKeyword
 Text.Whitespace
encodedName.Otherstring0.7400any0.2350number0.0071boolean0.0029void0.0023
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Decodes the next base 64 VLQ value from the given string and returns the\n * value and the rest of the string via the out parameter.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
decodeName.Otherany0.7720string0.0948string[]0.0232complex0.0175any[]0.0126
 Text.Whitespace
=Operator
 Text.Whitespace
functionKeyword.Declaration
 Text.Whitespace
base64VLQ_decodeName.Otherany0.3585void0.3360string0.0476number0.0219complex0.0150
(Punctuation
aStrName.Otherany0.6516string0.1390number0.0483Object0.0061string[]0.0054
,Punctuation
 Text.Whitespace
aOutParamName.Otherany0.5949string0.1746number0.0944boolean0.0061string[]0.0053
)Punctuation
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
iName.Othernumber0.9796any0.0186string0.0006void0.0002boolean0.0002
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
strLenName.Othernumber0.8250any0.1580string0.0059void0.0023complex0.0015
 Text.Whitespace
=Operator
 Text.Whitespace
aStrName.Otherany0.5595any[]0.1051string[]0.0885string0.0628number[]0.0170
.Punctuation
lengthName.Othernumber0.8421any0.1527string0.0023complex0.0006void0.0004
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
resultName.Othernumber0.9484any0.0433string0.0045boolean0.0007void0.0007
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
shiftName.Othernumber0.6338any0.3199string0.0365complex0.0016void0.0013
 Text.Whitespace
=Operator
 Text.Whitespace
0Literal.Number.Float
;Punctuation
\n  Text.Whitespace
varKeyword.Declaration
 Text.Whitespace
continuationName.Othervoid0.3555number0.3034any0.1213boolean0.0490string0.0377
,Punctuation
 Text.Whitespace
digitName.Otherany0.3612string0.2949number0.2403void0.0473{}0.0054
;Punctuation
\n\n  Text.Whitespace
doKeyword
 Text.Whitespace
{Punctuation
\n    Text.Whitespace
ifKeyword
 Text.Whitespace
(Punctuation
iName.Othernumber0.8879any0.1071string0.0028boolean0.0007void0.0004
 Text.Whitespace
>=Operator
 Text.Whitespace
strLenName.Othernumber0.8896any0.0811string0.0086void0.0081complex0.0024
)Punctuation
 Text.Whitespace
{Punctuation
\n      Text.Whitespace
throwKeywordany0.6490Error0.2636{}0.0277complex0.0211string0.0081
 Text.Whitespace
newOperator.Wordany0.5367ErrorConstructor0.2219Error0.1467string0.0280{}0.0171
 Text.Whitespace
ErrorName.ExceptionErrorConstructor1.0000Error0.0000any0.0000never0.0000complex0.0000
(Punctuation
"Expected more digits in base 64 VLQ value."Literal.String.Double
)Punctuation
;Punctuation
\n    Text.Whitespace
}Punctuation
\n    Text.Whitespace
digitName.Otherany0.6405string0.2837number0.0292void0.0130Error0.0038
 Text.Whitespace
=Operator
 Text.Whitespace
base64Name.Otherany0.7785complex0.0356string0.0285Error0.0200{}0.0057
.Punctuation
decodeName.Otherany0.8119string0.1580string[]0.0049number0.0043complex0.0041
(Punctuation
aStrName.Otherstring0.7691any0.2242number0.0024void0.0007boolean0.0005
.Punctuation
charAtName.Otherstring0.8077any0.1866number0.0013void0.0013complex0.0007
(Punctuation
iName.Othernumber0.9105any0.0819string0.0042void0.0018boolean0.0005
++Operator
)Punctuation
)Punctuation
;Punctuation
\n    Text.Whitespace
continuationName.Otherboolean0.7172void0.1098any0.0862number0.0621string0.0098
 Text.Whitespace
=Operator
 Text.Whitespace
!Operator
!Operator
(Punctuation
digitName.Othernumber0.4410any0.4038string0.0608void0.0491{}0.0120
 Text.Whitespace
&Operator
 Text.Whitespace
VLQ_CONTINUATION_BITName.Otherany0.4947number0.4451string0.0357void0.0106boolean0.0027
)Punctuation
;Punctuation
\n    Text.Whitespace
digitName.Otherany0.5547string0.1976number0.1774void0.0509{}0.0054
 Text.Whitespace
&=Operator
 Text.Whitespace
VLQ_BASE_MASKName.Otherany0.4171number0.3968string0.1319void0.0197boolean0.0084
;Punctuation
\n    Text.Whitespace
resultName.Othernumber0.4468any0.2870string0.2401void0.0127boolean0.0056
 Text.Whitespace
=Operator
 Text.Whitespace
resultName.Othernumber0.6234any0.1898string0.1642void0.0113boolean0.0038
 Text.Whitespace
+Operator
 Text.Whitespace
(Punctuation
digitName.Othernumber0.5136string0.2488any0.2058void0.0169{}0.0033
 Text.Whitespace
<<Operator
 Text.Whitespace
shiftName.Otherany0.3984number0.3276string0.2093number[]0.0068any[]0.0067
)Punctuation
;Punctuation
\n    Text.Whitespace
shiftName.Otherstring0.5868number0.2356any0.1651complex0.0025void0.0022
 Text.Whitespace
+=Operator
 Text.Whitespace
VLQ_BASE_SHIFTName.Othernumber0.3902any0.2992string0.2719{}0.0046void0.0034
;Punctuation
\n  Text.Whitespace
}Punctuation
 Text.Whitespace
whileKeyword
 Text.Whitespace
(Punctuation
continuationName.Othervoid0.7314any0.0941boolean0.0687number0.0279string0.0155
)Punctuation
;Punctuation
\n\n  Text.Whitespace
aOutParamName.Otherany0.4029complex0.0141void0.0053{}0.0052string0.0024
.Punctuation
valueName.Otherany0.8343string0.0927number0.0148void0.0113complex0.0062
 Text.Whitespace
=Operator
 Text.Whitespace
fromVLQSignedName.Otherany0.4407string0.1363void0.1099number0.0632complex0.0484
(Punctuation
resultName.Otherany0.4695number0.2196string0.1941void0.0312boolean0.0115
)Punctuation
;Punctuation
\n  Text.Whitespace
aOutParamName.Otherany0.1591void0.0111number[]0.0088complex0.0079any[]0.0070
.Punctuation
restName.Otherany0.4328any[]0.1200string[]0.1130string0.0963number[]0.0287
 Text.Whitespace
=Operator
 Text.Whitespace
aStrName.Otherany0.2612string[]0.2555string0.2013any[]0.1531number[]0.0207
.Punctuation
sliceName.Otherstring0.4807any0.2663string[]0.0872any[]0.0487complex0.0141
(Punctuation
iName.Othernumber0.9759any0.0181string0.0028void0.0010boolean0.0006
)Punctuation
;Punctuation
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
