declare var each: object, map: any[], compact: Function, filter: object, reject: object, remove: string, partition: any[], find: object, head: object, first: object, tail: Function, last: Function, initial: Function, empty: Function, reverse: Function, unique: Function, uniqueBy: any[], fold: Function, foldl: any[], fold1: any[], foldl1: any[], foldr: Function, foldr1: any[], unfoldr: any[], concat: object, concatMap: object, flatten: Function, difference: Function, intersection: Function, union: Function, countBy: string, groupBy: any[], andList: Function, orList: Function, any: object, all: object, sort: Function, sortWith: Function, sortBy: string, sum: Function, product: Function, mean: any[], average: Function, maximum: Function, minimum: Function, maximumBy: any[], minimumBy: any[], scan: Function, scanl: any[], scan1: any[], scanl1: any[], scanr: any[], scanr1: any[], slice: any[], take: Function, drop: Function, splitAt: number, takeWhile: Function, dropWhile: Function, span: Function, breakList: any[], zip: any[], zipWith: object, zipAll: Function, zipAllWith: Function, at: object, elemIndex: Function, elemIndices: any[], findIndex: number, findIndices: any[], toString$: Function;
declare function in$(x: string, xs: any[]): boolean;
declare function compose$(): Function;
declare function not$(x: number): boolean;
