Text
/**\n * Copyright (C) 2017-present by Andrea Giammarchi - @WebReflection\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the "Software"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */Comment.Multiline
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
{Punctuation
replaceName.Otherany0.8007complex0.1046string0.0384void0.0212boolean0.0127
}Punctuation
 Text.Whitespace
=Operator
 Text.Whitespace
''Literal.String.Single
;Punctuation
\n\nText.Whitespace
// escapeComment.Single
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
esName.Otherstring0.8515RegExp0.1111any0.0155string[]0.0095boolean0.0022
 Text.Whitespace
=Operator
 Text.Whitespace
/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34);/gLiteral.String.Regex
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
caName.Otherstring0.4612RegExp0.4250string[]0.0861any0.0104boolean0.0017
 Text.Whitespace
=Operator
 Text.Whitespace
/[&<>'"]/gLiteral.String.Regex
;Punctuation
\n\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
escaName.Othercomplex0.8060any0.1007string0.0057{}0.0024RegExp0.0023
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
'&'Literal.String.Single
:Operator
 Text.Whitespace
'&amp;'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'<'Literal.String.Single
:Operator
 Text.Whitespace
'&lt;'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'>'Literal.String.Single
:Operator
 Text.Whitespace
'&gt;'Literal.String.Single
,Punctuation
\n  Text.Whitespace
"'"Literal.String.Double
:Operator
 Text.Whitespace
'&#39;'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'"'Literal.String.Single
:Operator
 Text.Whitespace
'&quot;'Literal.String.Single
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
peName.Otherany0.6810complex0.1012string0.0511any[]0.0129string[]0.0071
 Text.Whitespace
=Operator
 Text.Whitespace
mName.Otherany0.7229string0.0911complex0.0479number0.0072any[]0.0066
 Text.Whitespace
=>Punctuation
 Text.Whitespace
escaName.Othercomplex0.5882any0.2916{}0.0241any[]0.0109string[]0.0039
[Punctuation
mName.Otherstring0.6320any0.2156number0.0431complex0.0219RegExp0.0027
]Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Safely escape HTML entities such as `&`, `<`, `>`, `"`, and `'`.\n * @param {string} es the input to safely escape\n * @returns {string} the escaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
escapeName.Otherstring0.9246any0.0581string[]0.0080any[]0.0038boolean0.0021
 Text.Whitespace
=Operator
 Text.Whitespace
esName.Otherany0.6996string0.2899any[]0.0030string[]0.0019complex0.0009
 Text.Whitespace
=>Punctuation
 Text.Whitespace
replaceName.Otherany0.8406complex0.0747void0.0516string0.0113any[]0.0061
.Punctuation
callName.Otherany0.9599complex0.0160void0.0063string0.0045number0.0025
(Punctuation
esName.Otherany0.7741string0.2099boolean0.0018complex0.0016string[]0.0014
,Punctuation
 Text.Whitespace
caName.Otherstring0.5120any0.3748string[]0.0735complex0.0068void0.0064
,Punctuation
 Text.Whitespace
peName.Otherany0.8160string0.0718complex0.0670RegExp0.0127string[]0.0053
)Punctuation
;Punctuation
\n\n\nText.Whitespace
// unescapeComment.Single
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
unesName.Othercomplex0.8309any0.1203string0.0034{}0.0019Command0.0012
 Text.Whitespace
=Operator
 Text.Whitespace
{Punctuation
\n  Text.Whitespace
'&amp;'Literal.String.Single
:Operator
 Text.Whitespace
'&'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&#38;'Literal.String.Single
:Operator
 Text.Whitespace
'&'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&lt;'Literal.String.Single
:Operator
 Text.Whitespace
'<'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&#60;'Literal.String.Single
:Operator
 Text.Whitespace
'<'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&gt;'Literal.String.Single
:Operator
 Text.Whitespace
'>'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&#62;'Literal.String.Single
:Operator
 Text.Whitespace
'>'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&apos;'Literal.String.Single
:Operator
 Text.Whitespace
"'"Literal.String.Double
,Punctuation
\n  Text.Whitespace
'&#39;'Literal.String.Single
:Operator
 Text.Whitespace
"'"Literal.String.Double
,Punctuation
\n  Text.Whitespace
'&quot;'Literal.String.Single
:Operator
 Text.Whitespace
'"'Literal.String.Single
,Punctuation
\n  Text.Whitespace
'&#34;'Literal.String.Single
:Operator
 Text.Whitespace
'"'Literal.String.Single
\nText.Whitespace
}Punctuation
;Punctuation
\nText.Whitespace
constKeyword.Declaration
 Text.Whitespace
capeName.Otherany0.7398complex0.0782string0.0506any[]0.0124void0.0065
 Text.Whitespace
=Operator
 Text.Whitespace
mName.Otherany0.7743string0.0820complex0.0342number0.0077any[]0.0055
 Text.Whitespace
=>Punctuation
 Text.Whitespace
unesName.Othercomplex0.4579any0.4441{}0.0254any[]0.0079string0.0017
[Punctuation
mName.Otherstring0.5817any0.2818number0.0517complex0.0162RegExp0.0026
]Punctuation
;Punctuation
\n\nText.Whitespace
/**\n * Safely unescape previously escaped entities such as `&`, `<`, `>`, `"`,\n * and `'`.\n * @param {string} un a previously escaped string\n * @returns {string} the unescaped input, and it **throws** an error if\n *  the input type is unexpected, except for boolean and numbers,\n *  converted as string.\n */Comment.Multiline
\nText.Whitespace
exportKeyword
 Text.Whitespace
constKeyword.Declaration
 Text.Whitespace
unescapeName.Otherany0.8685string0.1066any[]0.0072boolean0.0053number0.0039
 Text.Whitespace
=Operator
 Text.Whitespace
unName.Otherany0.9514string0.0251complex0.0083any[]0.0082boolean0.0016
 Text.Whitespace
=>Punctuation
 Text.Whitespace
replaceName.Otherany0.9412complex0.0286void0.0204string0.0030boolean0.0026
.Punctuation
callName.Otherany0.9566complex0.0205void0.0062string0.0045number0.0018
(Punctuation
unName.Otherany0.7737complex0.0911string0.0643void0.0147any[]0.0099
,Punctuation
 Text.Whitespace
esName.Otherany0.8341string0.1443complex0.0029string[]0.0019Function0.0018
,Punctuation
 Text.Whitespace
capeName.Otherany0.8745complex0.0454string0.0308void0.0071RegExp0.0054
)Punctuation
;Punctuation
\nText.Whitespace
